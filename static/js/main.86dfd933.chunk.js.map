{"version":3,"sources":["hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/Swap.jsx","components/Timeline.jsx","components/L2Bridge.jsx","views/QuadraticDiplomacyVote.jsx","views/QuadraticDiplomacyReward.jsx","views/QuadraticDiplomacyCreate.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/CurrentDistribution.js","index.jsx","contracts/external_contracts.js"],"names":["useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","address","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","utils","isAddress","getCode","bytecode","ethers","require","useContractLoader","providerOrSigner","config","contracts","setContracts","customAddressKeys","customAddresses","Object","keys","join","customAddressValues","values","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","Contract","abi","loadContracts","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","useUserSigner","injectedProvider","localProvider","setSigner","burnerSigner","key","storedValue","setStoredValue","setValue","value","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","price","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","body","obj","errorObj","Blockie","AddressInput","scan","setScan","currentValue","CameraOutlined","QrcodeOutlined","updateAddress","newValue","possibleAddress","scanner","zIndex","position","left","top","width","onClick","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","Paragraph","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isAdmin","isVoter","modalButtons","cachedProvider","push","marginLeft","marginTop","shape","display","count","backgroundColor","className","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","paddingRight","BigNumber","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","inputs","map","input","type","buttons","title","cursor","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","parseEther","trim","margin","event","suffix","txValueInput","addonAfter","floatValue","parseFloat","from","toHexString","payable","buttonIcon","defaultValue","bordered","disabled","height","innerIndex","baseType","stateMutability","returned","overrides","noContractDisplay","padding","borderRadius","fontWeight","marginRight","role","contract","customContract","account","show","displayedContractFunctions","interface","functions","filter","contractDisplay","isQueryable","loading","Select","Option","Title","axios","QuadraticDiplomacyVote","contributorEntries","currentDistribution","serverUrl","selectedContributors","setSelectedContributors","currentStep","setCurrentStep","spentVoteTokens","setSpentVoteTokens","isSendingTx","setIsSendingTx","candidates","entries","remainingVoteTokens","voteAllocation","border","level","fontFamily","handleContributorVote","op","clickedContributorAddress","prevSpentVoteTokens","prevSelectedContributors","Math","min","max","handleSubmitVotes","sortedVotes","sort","voter","signMessage","signature","post","votes","response","catch","itemLayout","header","direction","showZero","overflowCount","footer","justify","dataSource","renderItem","contributorAddress","contributor","Ribbon","Item","extra","Group","danger","ghost","MinusOutlined","PlusOutlined","Meta","voteTokens","REWARD_STATUS","QuadraticDiplomacyReward","writeContracts","totalRewardAmount","setRewardStatus","selectedToken","votingType","voteCount","sqrts","total","forEach","memberVotes","voteInfo","vote","sqrtVote","sqrt","pow","voteResults","totalVotes","totalSqrtVotes","totalSquare","votersInfo","voters","members","member","hasVoted","verifiedSignature","verifyMessage","votesSignatures","columns","dataIndex","render","defaultSortOrder","align","sorter","b","columnsVoters","filters","onFilter","record","CheckCircleTwoTone","twoToneColor","CloseCircleTwoTone","votesSqrt","votesShare","rewardAmount","missingVotingMembers","handleFinishDistribution","finishDistribution","showIcon","pagination","pageSize","hideOnSinglePage","confirm","QuadraticDiplomacyCreate","setCurrentDistribution","setVoters","setCandidates","setVoteAllocation","Form","useForm","handleSubmit","filteredVoters","filteredCandidates","resetFields","onFinish","labelCol","wrapperCol","layout","label","tooltip","_","index","justifyContent","block","icon","prevVoters","prevCandidates","offset","htmlType","VoterInput","marginBottom","gutter","nextVoters","DeleteOutlined","i","targetNetwork","DEBUG","scaffoldEthProvider","providers","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","theme","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","logo","connector","enable","App","_network","setInjectedProvider","setAddress","clearCachedProvider","disconnect","setTimeout","reload","useExchangePrice","speed","setGasPrice","loadGasPrice","get","newGasPrice","useGasPrice","newAddress","loadCurrentDistribution","useCurrentDistribution","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","adminRole","setAdminRole","setIsAdmin","updateRoleAdmin","QuadraticDiplomacyContract","DEFAULT_ADMIN_ROLE","adminRoleFromContract","updateAdmin","hasRole","isAdminFromContract","networkDisplay","networkSelected","networkLocal","right","closable","ethereum","toString","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Web3Provider","code","reason","route","setRoute","connection","faucetClicked","setFaucetClicked","formatEther","to","src","selectedKeys","mode","exact","path","themes","dark","light","prevTheme","subgraphUri","client","ApolloClient","uri","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById","ERC20ABI","constant","outputs","anonymous","indexed","DAIABI","internalType","module","exports","DAI","UNI","GTC"],"mappings":"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","file":"static/js/main.86dfd933.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    try {\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\" Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\" Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#C9B8FF\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#C9B8FF\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#C9B8FF\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\n// export const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\nexport const INFURA_ID = \"d971555e2f2c49fa99370839ea3466f5\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      var options = null;\n      var notify = null;\n      if (navigator.onLine) {\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback({ ...e, error: true });\n        }\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Your Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        style={{\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Badge, Button, Space } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isAdmin,\n  isVoter,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          Logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <Space>\n      {isAdmin && <Badge count={\"admin\"} />}\n      {isVoter && <Badge count={\"voter\"} style={{ backgroundColor: \"#52c41a\" }} />}\n      {/* {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} /> */}\n      {/* <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      /> */}\n    </Space>\n  );\n\n  return (\n    <div className=\" d-flex justify-content-around\">\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 20,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14} className=\"text-break\">\n          <p>{tryToDisplay(variable)}</p>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 20,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n}) {\n  const contracts = useContractLoader(provider, { chainId });\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(\n    () =>\n      contract\n        ? Object.values(contract.interface.functions).filter(\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\n          )\n        : [],\n    [contract, show],\n  );\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(fn => {\n    if (isQueryable(fn)) {\n      // If there are no inputs, just display return value\n      return (\n        <DisplayVariable\n          key={fn.name}\n          contractFunction={contract[fn.name]}\n          functionInfo={fn}\n          refreshRequired={refreshRequired}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    // If there are inputs, display a form to allow users to provide these\n    return (\n      <FunctionForm\n        key={\"FF\" + fn.name}\n        contractFunction={\n          fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\n            ? contract[fn.name]\n            : contract.connect(signer)[fn.name]\n        }\n        functionInfo={fn}\n        provider={provider}\n        gasPrice={gasPrice}\n        triggerRefresh={triggerRefresh}\n      />\n    );\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            <Account\n              address={address}\n              localProvider={provider}\n              injectedProvider={provider}\n              mainnetProvider={provider}\n              price={price}\n              blockExplorer={blockExplorer}\n            />\n            {account}\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenList = await fetch(_tokenListUri);\n        const tokenListJson = await tokenList.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"../hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import React, { useState, useMemo } from \"react\";\nimport { Button, Divider, Space, List, Typography, Badge, Spin, Row } from \"antd\";\nimport { MinusOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Address } from \"../components\";\nconst { Title, Text } = Typography;\nconst axios = require(\"axios\");\n\nexport default function QuadraticDiplomacyVote({\n  contributorEntries,\n  isVoter,\n  mainnetProvider,\n  currentDistribution,\n  address,\n  userSigner,\n  serverUrl,\n}) {\n  const [selectedContributors, setSelectedContributors] = useState({});\n  const [currentStep, setCurrentStep] = useState(1);\n  const [spentVoteTokens, setSpentVoteTokens] = useState(0);\n  const [isSendingTx, setIsSendingTx] = useState(false);\n\n  if (Object.keys(selectedContributors).length === 0 && currentDistribution.id) {\n    setSelectedContributors(\n      currentDistribution.candidates.reduce((entries, current) => {\n        entries[current] = 0;\n        return entries;\n      }, {}),\n    );\n  }\n\n  const contributors = useMemo(\n    () =>\n      currentDistribution.id &&\n      currentDistribution.candidates.reduce((entries, current) => {\n        entries[current] = 0;\n        return entries;\n      }, {}),\n    [currentDistribution.id],\n  );\n\n  const remainingVoteTokens = useMemo(\n    () => currentDistribution.id && currentDistribution.voteAllocation - spentVoteTokens,\n    [currentDistribution.id, spentVoteTokens],\n  );\n\n  if (!isVoter) {\n    return (\n      <div\n        style={{ border: \"1px solid\", padding: \"40px\", width: 800, margin: \"auto\", marginTop: 64, textAlign: \"left\" }}\n      >\n        <Title level={4} style={{ fontFamily: \"Space Mono\" }}>\n          Access denied\n        </Title>\n        <p>You are not part of the voters of this election.</p>\n      </div>\n    );\n  }\n\n  const handleContributorVote = (e, op, clickedContributorAddress) => {\n    // adjust available vote tokens\n    setSpentVoteTokens(prevSpentVoteTokens => (op === \"add\" ? prevSpentVoteTokens + 1 : prevSpentVoteTokens - 1));\n\n    // update contributor vote tokens\n    setSelectedContributors(prevSelectedContributors => ({\n      ...prevSelectedContributors,\n      [clickedContributorAddress]:\n        op === \"add\"\n          ? Math.min(prevSelectedContributors[clickedContributorAddress] + 1, currentDistribution.voteAllocation)\n          : Math.max(prevSelectedContributors[clickedContributorAddress] - 1, 0),\n    }));\n  };\n\n  const handleSubmitVotes = async () => {\n    const wallets = [];\n    const amounts = [];\n\n    const sortedVotes = Object.keys(selectedContributors).sort();\n\n    const message =\n      \"qdip-vote-\" +\n      currentDistribution.id +\n      address +\n      sortedVotes.join() +\n      sortedVotes.map(voter => selectedContributors[voter]).join();\n\n    const signature = await userSigner.signMessage(message);\n\n    setIsSendingTx(true);\n\n    axios\n      .post(serverUrl + \"distributions/\" + currentDistribution.id + \"/vote\", {\n        address: address,\n        votes: selectedContributors,\n        signature: signature,\n      })\n      .then(response => {\n        console.log(response);\n        setIsSendingTx(false);\n        setSpentVoteTokens(0);\n        setCurrentStep(2);\n      })\n      .catch(e => {\n        console.log(\"Error on vote\");\n        setIsSendingTx(false);\n      });\n  };\n\n  if (!currentDistribution.id) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>No Current Distribution</Title>\n      </div>\n    );\n  }\n\n  if (currentDistribution.id && currentStep != 2 && currentDistribution.votes && currentDistribution.votes[address]) {\n    setSelectedContributors(currentDistribution.votes[address]);\n    setCurrentStep(2);\n  }\n\n  return (\n    <div style={{ border: \"1px solid\", padding: \"40px\", width: 800, margin: \"auto\", marginTop: 64, textAlign: \"left\" }}>\n      <Title level={3}>Distribution {currentDistribution.id}</Title>\n      <Divider />\n      {currentStep === 1 ? (\n        <List\n          size=\"large\"\n          itemLayout=\"horizontal\"\n          style={{ width: \"600px\", margin: \"0 auto\" }}\n          header={\n            <Space direction=\"vertical\">\n              <Title level={4} style={{ fontFamily: \"Space Mono\" }}>\n                Allocate votes\n              </Title>\n              <Title level={5}>\n                Remaining vote tokens:&nbsp;&nbsp;\n                <Badge\n                  showZero\n                  overflowCount={1000}\n                  count={remainingVoteTokens}\n                  style={{ backgroundColor: \"#52c41a\" }}\n                />\n              </Title>\n            </Space>\n          }\n          footer={\n            <Row justify=\"end\">\n              {!isSendingTx ? (\n                <>\n                  <Button className=\"btn-bvs\" onClick={handleSubmitVotes}>\n                    Commit votes\n                  </Button>\n                </>\n              ) : (\n                <Spin size=\"small\" />\n              )}\n            </Row>\n          }\n          dataSource={Object.entries(selectedContributors)}\n          renderItem={([contributorAddress, contributor]) => (\n            <>\n              <Badge.Ribbon\n                showZero\n                overflowCount={1000}\n                text={<Title level={5}>{contributor} </Title>}\n                style={{\n                  backgroundColor: contributor ? \"#eb2f96\" : \"grey\",\n                  height: 24,\n                  width: 30,\n                  marginRight: -5,\n                }}\n              />\n              <List.Item\n                key={contributorAddress}\n                extra={\n                  <Button.Group>\n                    <Button\n                      danger\n                      ghost\n                      onClick={e => handleContributorVote(e, \"remove\", contributorAddress)}\n                      disabled={!contributor}\n                    >\n                      <MinusOutlined />\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      ghost\n                      onClick={e => handleContributorVote(e, \"add\", contributorAddress)}\n                      disabled={!remainingVoteTokens}\n                    >\n                      <PlusOutlined />\n                    </Button>\n                  </Button.Group>\n                }\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Address address={contributorAddress} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />\n                  }\n                />\n              </List.Item>\n            </>\n          )}\n        />\n      ) : (\n        currentStep === 2 && (\n          <>\n            <Title level={3} style={{ fontFamily: \"Space Mono\" }}>\n              Thank you for voting.\n            </Title>\n            <p>The allocation to this workstream will be informed by your votes.</p>\n            <Title level={5} style={{ marginTop: \"24px\" }}>\n              Your votes:\n            </Title>\n            {Object.entries(selectedContributors).map(([contributorAddress, voteTokens]) => (\n              <div key={contributorAddress}>\n                <Address address={contributorAddress} fontSize={16} size=\"short\" ensProvider={mainnetProvider} /> (\n                <Text>{voteTokens}</Text>)\n              </div>\n            ))}\n          </>\n        )\n      )}\n    </div>\n  );\n}\n","import React, { useState, useMemo } from \"react\";\nimport { Alert, Input, Button, Divider, Space, Typography, Table, Tag, Select, notification, Spin } from \"antd\";\nimport { CheckCircleTwoTone, CloseCircleTwoTone } from \"@ant-design/icons\";\nimport { Address } from \"../components\";\nconst { Text, Title } = Typography;\nconst { ethers } = require(\"ethers\");\nconst axios = require(\"axios\");\n\nconst TOKENS = [\"ETH\", \"GTC\", \"DAI\"];\nconst REWARD_STATUS = {\n  PENDING: \"reward_status.pending\",\n  COMPLETED: \"reward_status.completed\",\n  FAILED: \"reward_status.failed\",\n};\nconst VOTING_TYPES = [\"Quadratic\", \"Common\"];\n\nexport default function QuadraticDiplomacyReward({\n  tx,\n  writeContracts,\n  userSigner,\n  isAdmin,\n  mainnetProvider,\n  currentDistribution,\n  serverUrl,\n  address,\n}) {\n  const [totalRewardAmount, setTotalRewardAmount] = useState(0);\n  const [rewardStatus, setRewardStatus] = useState(REWARD_STATUS.PENDING);\n  const [selectedToken, setSelectedToken] = useState(\"\");\n  const [isSendingTx, setIsSendingTx] = useState(false);\n  const [votingType, setVotingType] = useState(\"Quadratic\");\n\n  const [voteResults, totalVotes, totalSqrtVotes, totalSquare] = useMemo(() => {\n    const votes = {};\n    let voteCount = 0;\n    let sqrts = 0;\n    let total = 0;\n\n    if (!currentDistribution.id) {\n      return [0, 0, 0, 0];\n    }\n\n    Object.entries(currentDistribution.votes).forEach(memberVotes => {\n      const votingAddress = memberVotes[0];\n      const selectedContributors = memberVotes[1];\n\n      Object.entries(selectedContributors).forEach(voteInfo => {\n        const contributor = voteInfo[0];\n        const vote = voteInfo[1];\n        let sqrtVote = Math.sqrt(vote);\n        if (votingType === \"Common\") {\n          sqrtVote = vote;\n        }\n\n        if (!votes[contributor]) {\n          votes[contributor] = {\n            vote: 0,\n            // Sum of the square root of the votes for each member.\n            sqrtVote: 0,\n          };\n        }\n\n        votes[contributor].sqrtVote += sqrtVote;\n        votes[contributor].vote += vote;\n\n        voteCount += vote;\n        // Total sum of the sum of the square roots of the votes for all members.\n        sqrts += sqrtVote;\n      });\n    });\n\n    Object.entries(votes).forEach(([wallet, { sqrtVote }]) => {\n      if (votingType === \"Common\") {\n        total += sqrtVote;\n      } else {\n        total += Math.pow(sqrtVote, 2);\n      }\n    });\n\n    return [votes, voteCount, sqrts, total];\n  }, [\n    currentDistribution.id,\n    currentDistribution.id && Object.keys(currentDistribution.votes).sort().join(),\n    votingType,\n  ]);\n\n  const votersInfo = useMemo(() => {\n    const voters = [];\n\n    if (!currentDistribution.id) {\n      return voters;\n    }\n\n    currentDistribution.members.forEach(member => {\n      const hasVoted = Object.keys(currentDistribution.votes).includes(member);\n      let totalVotes = 0;\n      let verifiedSignature = false;\n\n      if (hasVoted) {\n        const selectedContributors = currentDistribution.votes[member];\n\n        const sortedVotes = Object.keys(selectedContributors).sort();\n\n        const message =\n          \"qdip-vote-\" +\n          currentDistribution.id +\n          member +\n          sortedVotes.join() +\n          sortedVotes.map(voter => selectedContributors[voter]).join();\n\n        const recovered = ethers.utils.verifyMessage(message, currentDistribution.votesSignatures[member]);\n        verifiedSignature = recovered === member;\n\n        Object.entries(selectedContributors).forEach(voteInfo => {\n          totalVotes += voteInfo[1];\n        });\n      }\n\n      voters.push({\n        address: member,\n        vote: totalVotes,\n        hasVoted: hasVoted,\n        verifiedSignature: verifiedSignature,\n      });\n    });\n\n    return voters;\n  }, [currentDistribution.id, currentDistribution.id && Object.keys(currentDistribution.votes).sort().join()]);\n\n  const columns = useMemo(\n    () => [\n      {\n        title: \"Address\",\n        dataIndex: \"address\",\n        render: address => <Address address={address} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />,\n      },\n      {\n        title: \"No. of votes\",\n        dataIndex: \"vote\",\n        defaultSortOrder: \"descend\",\n        align: \"center\",\n        sorter: (a, b) => a.vote - b.vote,\n      },\n    ],\n    [mainnetProvider, selectedToken],\n  );\n\n  const columnsVoters = useMemo(\n    () => [\n      {\n        title: \"Address\",\n        dataIndex: \"address\",\n        render: address => <Address address={address} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />,\n      },\n      {\n        title: \"Nº of votes\",\n        dataIndex: \"vote\",\n        defaultSortOrder: \"descend\",\n        align: \"center\",\n        sorter: (a, b) => a.vote - b.vote,\n      },\n      {\n        title: \"Has Voted\",\n        dataIndex: \"hasVoted\",\n        align: \"center\",\n        filters: [\n          { text: \"Yes\", value: true },\n          { text: \"No\", value: false },\n        ],\n        onFilter: (value, record) => record.hasVoted === value,\n        render: hasVoted =>\n          hasVoted ? <CheckCircleTwoTone twoToneColor=\"#52c41a\" /> : <CloseCircleTwoTone twoToneColor=\"red\" />,\n      },\n      {\n        title: \"Verified\",\n        dataIndex: \"verifiedSignature\",\n        align: \"center\",\n        filters: [\n          { text: \"Yes\", value: true },\n          { text: \"No\", value: false },\n        ],\n        onFilter: (value, record) => record.verifiedSignature === value,\n        render: verifiedSignature =>\n          verifiedSignature ? <CheckCircleTwoTone twoToneColor=\"#52c41a\" /> : <CloseCircleTwoTone twoToneColor=\"red\" />,\n      },\n    ],\n    [mainnetProvider],\n  );\n\n  const dataSource = useMemo(\n    () =>\n      Object.entries(voteResults).map(([address, contributor]) => ({\n        key: address,\n        address: address,\n        vote: contributor?.vote,\n        votesSqrt: contributor?.sqrtVote,\n        votesShare:\n          votingType === \"Quadratic\" ? contributor?.sqrtVote / totalSqrtVotes : contributor?.sqrtVote / totalSquare,\n        rewardAmount:\n          votingType === \"Quadratic\"\n            ? (contributor?.sqrtVote / totalSqrtVotes) * totalRewardAmount\n            : (contributor?.sqrtVote / totalSquare) * totalRewardAmount,\n        hasVoted: contributor?.hasVoted,\n        verifiedSignature: contributor?.verifiedSignature,\n      })),\n    [voteResults, totalSquare, totalRewardAmount],\n  );\n\n  const missingVotingMembers = votersInfo.filter(voter => !voter.hasVoted);\n\n  const handleFinishDistribution = async finishDistribution => {\n    const message = \"qdip-finish-\" + currentDistribution.id + address;\n    const signature = await userSigner.signMessage(message);\n\n    setIsSendingTx(true);\n\n    axios\n      .post(serverUrl + \"distributions/\" + currentDistribution.id + \"/finish\", {\n        address: address,\n        signature: signature,\n      })\n      .then(response => {\n        setIsSendingTx(false);\n        setRewardStatus(REWARD_STATUS.COMPLETED);\n      })\n      .catch(e => {\n        console.log(\"Error finishing the distribution\");\n        setIsSendingTx(false);\n      });\n  };\n\n  const handlePayment = async function payFromSelf(close) {\n    // ToDo. Do some validation (non-empty elements, etc.)\n    const wallets = [];\n    const amounts = [];\n\n    setIsSendingTx(true);\n    // choose appropriate function from contract\n    let func;\n    if (selectedToken === \"ETH\") {\n      dataSource.forEach(({ address, rewardAmount }) => {\n        wallets.push(address);\n        // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\n        amounts.push(ethers.utils.parseEther((Math.floor(rewardAmount * 10000) / 10000).toString()));\n      });\n\n      func = payFromSelf\n        ? // payable functions need an `overrides` param.\n          // relevant docs: https://docs.ethers.io/v5/api/contract/contract/#Contract-functionsCall\n          writeContracts.QuadraticDiplomacyContract.sharePayedETH(wallets, amounts, {\n            value: ethers.utils.parseEther(totalRewardAmount.toString()),\n          })\n        : writeContracts.QuadraticDiplomacyContract.shareETH(wallets, amounts);\n    } else {\n      const tokenAddress = writeContracts[selectedToken].address;\n      const userAddress = await userSigner.getAddress();\n      const tokenContract = writeContracts[selectedToken].connect(userSigner);\n      // approve only if have to pay from self wallet\n      if (payFromSelf) {\n        await tx(\n          tokenContract.approve(\n            writeContracts.QuadraticDiplomacyContract.address,\n            ethers.utils.parseUnits(totalRewardAmount.toString(), 18),\n          ),\n        );\n      }\n\n      dataSource.forEach(({ address, rewardAmount }) => {\n        wallets.push(address);\n        // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\n        amounts.push(ethers.utils.parseUnits((Math.floor(rewardAmount * 10000) / 10000).toString()));\n      });\n      func = payFromSelf\n        ? writeContracts.QuadraticDiplomacyContract.sharePayedToken(wallets, amounts, tokenAddress, userAddress)\n        : writeContracts.QuadraticDiplomacyContract.shareToken(wallets, amounts, tokenAddress);\n    }\n\n    await tx(func, update => {\n      // ToDo. Handle errors.\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n        notification.success({\n          message: \"Payment sent!\",\n        });\n\n        if (close) {\n          handleFinishDistribution();\n        } else {\n          setIsSendingTx(false);\n        }\n      } else if (update.error) {\n        setIsSendingTx(false);\n      }\n    });\n  };\n\n  if (!isAdmin) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>Access denied</Title>\n        <p>Only admins can send rewards.</p>\n      </div>\n    );\n  }\n\n  if (!currentDistribution.id) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>No Current Distribution</Title>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 1000, margin: \"auto\", marginTop: 64 }}>\n      <Title level={3}>Election Results of {currentDistribution.id}</Title>\n      <Title level={5}>\n        Total votes:&nbsp;&nbsp;\n        <Tag color=\"#000000\">{totalVotes}</Tag>\n      </Title>\n\n      <Divider />\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <Title level={4}>Voters</Title>\n        {missingVotingMembers?.length > 0 && (\n          <Alert\n            showIcon\n            type=\"warning\"\n            message={<Title level={5}>{missingVotingMembers.length} members has not voted yet.</Title>}\n          />\n        )}\n        <Table\n          bordered\n          dataSource={votersInfo}\n          columns={columnsVoters}\n          pagination={{ pageSize: 100, hideOnSinglePage: true }}\n        />\n        <Divider />\n        <Title level={4}>Candidates</Title>\n        <Table\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n          pagination={{ pageSize: 100, hideOnSinglePage: true }}\n          footer={() =>\n            !isSendingTx ? (\n              <Space>\n                <Button\n                  onClick={() => {\n                    if (\n                      confirm(\n                        \"Are you sure you want to close the distribution? You can't send payments after a distribution is closed.\",\n                      )\n                    ) {\n                      handleFinishDistribution();\n                    }\n                  }}\n                  size=\"large\"\n                >\n                  Close Election\n                </Button>\n              </Space>\n            ) : (\n              <Spin size=\"small\" />\n            )\n          }\n        />\n      </Space>\n      <Divider />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Form, Input, Divider, Button, Typography, Row, Col, Spin } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { AddressInput } from \"../components\";\nconst { Title } = Typography;\nconst axios = require(\"axios\");\n\nexport default function QuadraticDiplomacyCreate({\n  mainnetProvider,\n  serverUrl,\n  address,\n  userSigner,\n  currentDistribution,\n  setCurrentDistribution,\n  isAdmin,\n}) {\n  const [voters, setVoters] = useState([\"\"]);\n  const [candidates, setCandidates] = useState([\"\"]);\n  const [voteAllocation, setVoteAllocation] = useState(0);\n  const [isSendingTx, setIsSendingTx] = useState(false);\n  const [form] = Form.useForm();\n\n  const handleSubmit = async () => {\n    setIsSendingTx(true);\n    const filteredVoters = voters.filter(voter => voter);\n    const filteredCandidates = candidates.filter(voter => voter);\n\n    let message = \"qdip-creation-\" + address;\n    console.log(\"Message:\" + message);\n\n    const signature = await userSigner.signMessage(message);\n\n    axios\n      .post(serverUrl + \"distributions\", {\n        address: address,\n        voteAllocation: voteAllocation,\n        members: filteredVoters,\n        candidates: filteredCandidates,\n        signature: signature,\n      })\n      .then(response => {\n        console.log(response);\n        setCurrentDistribution(response);\n        setVoters([\"\"]);\n        setVoteAllocation(0);\n        form.resetFields();\n        setIsSendingTx(false);\n      })\n      .catch(() => {\n        console.log(\"Error on distributions post\");\n      });\n  };\n\n  if (!isAdmin) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>Access denied</Title>\n        <p>Only admins can create distributions.</p>\n      </div>\n    );\n  }\n\n  if (currentDistribution.id) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>Distribution {currentDistribution.id} in progress</Title>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{ border: \"1px solid\", padding: \"40px\", width: \"800px\", margin: \"64px auto 0px auto\", textAlign: \"left\" }}\n    >\n      <Title level={3} style={{ fontFamily: \"Space Mono\" }}>\n        Add members\n      </Title>\n      <Divider />\n      <Form\n        form={form}\n        name=\"basic\"\n        onFinish={handleSubmit}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        layout=\"horizontal\"\n      >\n        <Form.Item\n          label=\"Vote Allocation\"\n          name=\"voteCredit\"\n          style={{ textAlign: \"left\" }}\n          tooltip=\"Number of votes each voter will have\"\n        >\n          <Input\n            type=\"number\"\n            placeholder=\"100\"\n            style={{ width: \"30%\" }}\n            onChange={event => setVoteAllocation(event.target.value)}\n          />\n        </Form.Item>\n        <Divider />\n\n        {voters.map((_, index) => (\n          <VoterInput\n            key={index}\n            index={index}\n            setVoters={setVoters}\n            voters={voters}\n            mainnetProvider={mainnetProvider}\n          />\n        ))}\n        <Form.Item style={{ justifyContent: \"center\", marginTop: 24 }}>\n          <Button\n            type=\"dashed\"\n            block\n            icon={<PlusOutlined />}\n            onClick={() => setVoters(prevVoters => [...prevVoters, \"\"])}\n          >\n            Add Voter\n          </Button>\n        </Form.Item>\n        <Divider />\n\n        {candidates.map((_, index) => (\n          <VoterInput\n            key={index}\n            index={index}\n            setVoters={setCandidates}\n            voters={candidates}\n            mainnetProvider={mainnetProvider}\n          />\n        ))}\n        <Form.Item style={{ justifyContent: \"center\", marginTop: 24 }}>\n          <Button\n            type=\"dashed\"\n            block\n            icon={<PlusOutlined />}\n            onClick={() => setCandidates(prevCandidates => [...prevCandidates, \"\"])}\n          >\n            Add Candidate\n          </Button>\n        </Form.Item>\n        <Divider />\n        <Form.Item wrapperCol={{ offset: 16, span: 8 }}>\n          {!isSendingTx ? (\n            <Button className=\"btn-bvs\" htmlType=\"submit\" block disabled={!voteAllocation}>\n              Submit\n            </Button>\n          ) : (\n            <Spin size=\"small\" />\n          )}\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nconst VoterInput = ({ index, voters, setVoters, mainnetProvider }) => {\n  return (\n    <>\n      <Form.Item label={`Voter ${index + 1}`} name={`address[${index}]`} style={{ marginBottom: \"16px\" }}>\n        <Row gutter={8} align=\"middle\">\n          <Col span={16}>\n            <AddressInput\n              autoFocus\n              ensProvider={mainnetProvider}\n              placeholder=\"Enter address\"\n              value={voters[index]}\n              onChange={address => {\n                setVoters(prevVoters => {\n                  const nextVoters = [...prevVoters];\n                  nextVoters[index] = address;\n                  return nextVoters;\n                });\n              }}\n            />\n          </Col>\n          <Col span={8}>\n            <DeleteOutlined\n              style={{ cursor: \"pointer\", color: \"#ff6666\" }}\n              onClick={() => {\n                setVoters(prevVoters => {\n                  const nextVoters = [...prevVoters];\n                  return nextVoters.filter((_, i) => i !== index);\n                });\n              }}\n            />\n          </Col>\n        </Row>\n      </Form.Item>\n    </>\n  );\n};\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row, Spin, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useExchangePrice,\n  useGasPrice,\n  useUserSigner,\n  useCurrentDistribution,\n} from \"./hooks\";\nimport QuadraticDiplomacyVote from \"./views/QuadraticDiplomacyVote\";\nimport QuadraticDiplomacyReward from \"./views/QuadraticDiplomacyReward\";\nimport QuadraticDiplomacyCreate from \"./views/QuadraticDiplomacyCreate\";\n\nconst { ethers } = require(\"ethers\");\nconst { Title } = Typography;\n\nconst targetNetwork = NETWORKS.ropsten;\n\nconst serverUrl = \"https://ibc-voting.herokuapp.com/\";\n\nconst DEBUG = false;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n\nconst localProviderUrl = targetNetwork.rpcUrl;\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\nconst blockExplorer = targetNetwork.blockExplorer;\n\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          100: \"https://dai.poa.network\", // xDai\n        },\n      },\n    },\n    /*torus: {\n      package: Torus,\n    },*/\n    \"custom-walletlink\": {\n      display: {\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n        name: \"Coinbase\",\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n  },\n});\n\nfunction App() {\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserSigner(injectedProvider, localProvider);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  const [currentDistribution, setCurrentDistribution] = useCurrentDistribution(serverUrl);\n  const isVoter =\n    address && currentDistribution && currentDistribution.members && currentDistribution.members.includes(address);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  const [adminRole, setAdminRole] = useState();\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  useEffect(() => {\n    const updateRoleAdmin = async () => {\n      if (DEBUG) console.log(\"Updating admin role...\");\n      if (readContracts && readContracts.QuadraticDiplomacyContract) {\n        const adminRoleFromContract = await readContracts.QuadraticDiplomacyContract.DEFAULT_ADMIN_ROLE();\n        setAdminRole(adminRoleFromContract);\n        if (DEBUG) console.log(\"Admin role updated!\");\n      }\n    };\n    updateRoleAdmin();\n  }, [address, readContracts]);\n\n  useEffect(() => {\n    const updateAdmin = async () => {\n      if (DEBUG) console.log(\"Updating admin...\");\n      if (readContracts && readContracts.QuadraticDiplomacyContract && adminRole) {\n        const isAdminFromContract = await readContracts.QuadraticDiplomacyContract.hasRole(adminRole, address);\n        setIsAdmin(isAdminFromContract);\n        if (DEBUG) console.log(\"Admin updated!\");\n      }\n    };\n    updateAdmin();\n  }, [address, readContracts, adminRole]);\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [mainnetProvider, address, selectedChainId, yourLocalBalance, yourMainnetBalance, readContracts, writeContracts]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  function pageContentForAdmin() {\n    return (\n      <div>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              Create\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/quadratic-diplomacy-vote\">\n            <Link\n              onClick={() => {\n                setRoute(\"/quadratic-diplomacy-vote\");\n              }}\n              to=\"/quadratic-diplomacy-vote\"\n            >\n              Vote\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/quadratic-diplomacy-reward\">\n            <Link\n              onClick={() => {\n                setRoute(\"/quadratic-diplomacy-reward\");\n              }}\n              to=\"/quadratic-diplomacy-reward\"\n            >\n              Result\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/contract\">\n            <Link\n              onClick={() => {\n                setRoute(\"/contract\");\n              }}\n              to=\"/contract\"\n            >\n              Settings\n            </Link>\n          </Menu.Item>\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <QuadraticDiplomacyCreate\n              mainnetProvider={mainnetProvider}\n              serverUrl={serverUrl}\n              address={address}\n              userSigner={userSigner}\n              currentDistribution={currentDistribution}\n              setCurrentDistribution={setCurrentDistribution}\n              isAdmin={isAdmin}\n            />\n          </Route>\n          <Route path=\"/quadratic-diplomacy-vote\">\n            <QuadraticDiplomacyVote\n              isVoter={isVoter}\n              mainnetProvider={mainnetProvider}\n              currentDistribution={currentDistribution}\n              address={address}\n              userSigner={userSigner}\n              serverUrl={serverUrl}\n            />\n          </Route>\n          <Route path=\"/quadratic-diplomacy-reward\">\n            <QuadraticDiplomacyReward\n              tx={tx}\n              writeContracts={writeContracts}\n              userSigner={userSigner}\n              price={price}\n              isAdmin={isAdmin}\n              mainnetProvider={mainnetProvider}\n              currentDistribution={currentDistribution}\n              serverUrl={serverUrl}\n              address={address}\n            />\n          </Route>\n          <Route exact path=\"/contract\">\n            <Contract\n              name=\"QuadraticDiplomacyContract\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n\n  function pageContentForVoter() {\n    return (\n      <div>\n        <QuadraticDiplomacyVote\n          isVoter={isVoter}\n          mainnetProvider={mainnetProvider}\n          currentDistribution={currentDistribution}\n          address={address}\n          userSigner={userSigner}\n          serverUrl={serverUrl}\n        />\n      </div>\n    );\n  }\n\n  function pageContentForOthers() {\n    if (currentDistribution.id) {\n      return (\n        <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n          <Title level={4}>Voting in progress</Title>\n        </div>\n      );\n    } else {\n      return (\n        <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n          <Title level={4}>No voting in progress</Title>\n        </div>\n      );\n    }\n  }\n\n  function pageContent() {\n    if (currentDistribution == null || isAdmin == null) {\n      return <Spin />;\n    }\n    if (isAdmin) {\n      return pageContentForAdmin();\n    }\n    if (currentDistribution && isVoter) {\n      return pageContentForVoter();\n    }\n    return pageContentForOthers();\n  }\n\n  return (\n    <div className=\"App text-center\">\n      <img src=\"/logo/logo.png\" width={300} height={80} className=\"my-3 mx-3\" />\n\n      {networkDisplay}\n      <div className=\"p-5\">\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n          isAdmin={isAdmin}\n          isVoter={isVoter}\n        />\n      </div>\n      <BrowserRouter>{pageContent()}</BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if (!mainnetProvider) return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    // getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if (navigator.onLine) {\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nexport default function useCurrentDistribution(serverUrl) {\n  const [currentDistribution, setCurrentDistribution] = useState({});\n\n  const loadCurrentDistribution = async () => {\n    axios\n      .get(serverUrl + \"currentDistribution\")\n      .then(response => {\n        console.log(response);\n        setCurrentDistribution(response.data);\n      })\n      .catch(error => {\n        console.log(error);\n        setCurrentDistribution({});\n      });\n  };\n\n  usePoller(loadCurrentDistribution, 10000);\n\n  return [currentDistribution, setCurrentDistribution];\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"bootstrap/dist/css/bootstrap.min.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n      GTC: {\n        address: \"0xde30da39c46104798bb5aa3fe8b9e0e1f348163f\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      DAI: {\n        address: \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\",\n        abi: DAIABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}