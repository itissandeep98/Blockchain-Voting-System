{"version":3,"sources":["hooks/OnBlock.js","hooks/Poller.js","hooks/Balance.js","hooks/ContractExistsAtAddress.js","hooks/ContractLoader.js","hooks/LookupAddress.js","hooks/ResolveName.js","hooks/BurnerSigner.js","hooks/UserSigner.js","components/Address.jsx","components/Balance.jsx","constants.js","helpers/Transactor.js","components/Blockie.jsx","components/AddressInput.jsx","components/EtherInput.jsx","components/Wallet.jsx","components/Account.jsx","components/BytesStringInput.jsx","components/Contract/utils.js","components/Contract/DisplayVariable.jsx","components/Contract/FunctionForm.jsx","components/Contract/index.jsx","components/Faucet.jsx","components/GasGauge.jsx","components/Header.jsx","components/Ramp.jsx","components/Swap.jsx","components/ThemeSwitch.jsx","components/Timeline.jsx","components/L2Bridge.jsx","views/QuadraticDiplomacyVote.jsx","views/QuadraticDiplomacyReward.jsx","views/QuadraticDiplomacyCreate.jsx","App.jsx","hooks/ExchangePrice.js","hooks/GasPrice.js","hooks/CurrentDistribution.js","index.jsx","contracts/external_contracts.js"],"names":["useOnBlock","provider","fn","args","savedCallback","useRef","useEffect","current","listener","blockNumber","length","on","off","usePoller","delay","extraWatch","id","setInterval","clearInterval","useBalance","address","pollTime","useState","balance","setBalance","pollBalance","useCallback","a","getBalance","newBalance","useContractExistsAtAddress","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","utils","isAddress","getCode","bytecode","ethers","require","useContractLoader","providerOrSigner","config","contracts","setContracts","customAddressKeys","customAddresses","Object","keys","join","customAddressValues","values","active","console","log","listAccounts","accounts","Signer","isSigner","signer","getSigner","getNetwork","providerNetwork","_chainId","chainId","contractList","externalContractList","hardhatContracts","e","externalContracts","combinedContracts","hardhatNetwork","prototype","hasOwnProperty","call","hardhatNetworkName","newContracts","reduce","accumulator","contractName","_address","includes","Contract","abi","loadContracts","lookupAddress","reportedName","resolveName","resolvedAddress","getAddress","useLookupAddress","ensName","setEnsName","cache","window","localStorage","getItem","JSON","parse","timestamp","Date","now","name","then","setItem","stringify","useUserSigner","injectedProvider","localProvider","setSigner","burnerSigner","key","storedValue","setStoredValue","setValue","value","error","storedKey","_newKey","Wallet","createRandom","privateKey","_signer","connect","useBurnerSigner","useMemo","injectedSigner","_isProvider","location","pathname","indexOf","rawPK","incomingPK","hash","replace","history","pushState","currentPrivateKey","Text","Typography","Address","props","ens","ensProvider","currentTheme","useThemeSwitcher","avatar","paragraph","rows","displayAddress","substr","size","text","etherscanLink","blockExplorer","blockExplorerLink","minimized","style","verticalAlign","color","target","href","rel","seed","toLowerCase","scale","onChange","editable","copyable","fontSize","paddingLeft","Balance","dollarMode","setDollarMode","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","padding","cursor","onClick","INFURA_ID","NETWORKS","localhost","rpcUrl","hostname","mainnet","kovan","faucet","rinkeby","ropsten","goerli","xdai","gasPrice","matic","mumbai","localArbitrum","localArbitrumL1","rinkebyArbitrum","arbitrum","localOptimismL1","localOptimism","kovanOptimism","optimism","NETWORK","n","callbacks","Transactor","etherscan","tx","callback","network","options","notify","navigator","onLine","dappId","system","networkId","transactionHandler","txInformation","possibleFunction","transaction","Notify","etherscanNetwork","etherscanTxUrl","Promise","result","parseUnits","gasLimit","hexlify","sendTransaction","emitter","onclick","open","notification","info","message","description","placement","txResult","listeningInterval","getTransactionReceipt","currentTransactionReceipt","confirmations","wait","data","body","obj","errorObj","Blockie","AddressInput","scan","setScan","currentValue","scannerButton","marginTop","count","CameraOutlined","QrcodeOutlined","updateAddress","newValue","possibleAddress","scanner","zIndex","position","left","top","width","resolution","onError","onScan","possibleNewValue","lastIndexOf","autoComplete","autoFocus","placeholder","prefix","addonAfter","EtherInput","mode","setMode","display","setDisplay","option","title","usdValue","ethValue","Paragraph","signerAddress","setSignerAddress","newAddress","receiveButton","privateKeyButton","selectedAddress","setOpen","qr","setQr","amount","setAmount","toAddress","setToAddress","pk","setPK","providerSend","WalletOutlined","rotate","level","includeMargin","renderAs","imageSettings","excavate","KeyOutlined","wallet","extraPkDisplayAdded","extraPkDisplay","push","backgroundStyle","pastpk","pastwallet","_signingKey","reload","inputStyle","visible","float","paddingRight","onOk","onCancel","footer","type","disabled","loading","parseEther","to","SendOutlined","Account","userSigner","mainnetProvider","web3Modal","loadWeb3Modal","logoutOfWeb3Modal","isAdmin","isVoter","modalButtons","cachedProvider","marginLeft","shape","backgroundColor","constants","tryToDisplay","thing","toNumber","formatUnits","DisplayVariable","contractFunction","functionInfo","refreshRequired","triggerRefresh","variable","setVariable","refresh","funcResponse","span","textAlign","opacity","BigNumber","FunctionForm","form","setForm","txValue","setTxValue","returnValue","setReturnValue","inputIndex","inputs","map","input","buttons","isHexString","formUpdate","parseBytes32String","formatBytes32String","toUtf8String","toUtf8Bytes","trim","margin","event","suffix","txValueInput","floatValue","from","toHexString","payable","buttonIcon","defaultValue","bordered","height","innerIndex","baseType","stateMutability","returned","overrides","noContractDisplay","className","borderRadius","fontWeight","marginRight","role","contract","customContract","account","show","displayedContractFunctions","interface","functions","filter","contractDisplay","isQueryable","Faucet","blockie","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","_faucetAddress","icon","GasGauge","parseInt","Header","Ramp","modalUp","setModalUp","allFaucets","networks","DollarCircleOutlined","RampInstantSDK","hostAppName","hostLogoUrl","swapAmount","swapAsset","userAddress","Select","Option","Swap","ThemeSwitcher","theme","isDarkMode","setIsDarkMode","switcher","themes","status","right","bottom","checked","isChecked","dark","light","Title","axios","QuadraticDiplomacyVote","contributorEntries","currentDistribution","serverUrl","selectedContributors","setSelectedContributors","currentStep","setCurrentStep","spentVoteTokens","setSpentVoteTokens","isSendingTx","setIsSendingTx","candidates","entries","remainingVoteTokens","voteAllocation","border","fontFamily","handleContributorVote","op","clickedContributorAddress","prevSpentVoteTokens","prevSelectedContributors","Math","min","max","handleSubmitVotes","sortedVotes","sort","voter","signMessage","signature","post","votes","response","catch","itemLayout","header","direction","showZero","overflowCount","justify","dataSource","renderItem","contributorAddress","contributor","Ribbon","Item","extra","Group","danger","ghost","MinusOutlined","PlusOutlined","Meta","voteTokens","TOKENS","REWARD_STATUS","VOTING_TYPES","QuadraticDiplomacyReward","writeContracts","totalRewardAmount","setTotalRewardAmount","rewardStatus","setRewardStatus","selectedToken","setSelectedToken","votingType","setVotingType","voteCount","sqrts","total","forEach","memberVotes","voteInfo","vote","sqrtVote","sqrt","pow","voteResults","totalVotes","totalSqrtVotes","totalSquare","votersInfo","voters","members","member","hasVoted","verifiedSignature","verifyMessage","votesSignatures","columns","dataIndex","render","defaultSortOrder","align","sorter","b","votesSqrt","record","votesShare","rewardAmount","toUpperCase","columnsVoters","filters","onFilter","CheckCircleTwoTone","twoToneColor","CloseCircleTwoTone","missingVotingMembers","handleFinishDistribution","finishDistribution","handlePayment","close","wallets","amounts","floor","toString","func","payFromSelf","QuadraticDiplomacyContract","sharePayedETH","shareETH","tokenAddress","tokenContract","approve","sharePayedToken","shareToken","update","success","vType","split","addonBefore","tokenName","showIcon","pagination","pageSize","hideOnSinglePage","confirm","QuadraticDiplomacyCreate","setCurrentDistribution","setVoters","setCandidates","setVoteAllocation","Form","useForm","handleAddVoters","clipboard","readText","addresses","voteAddress","voteAddressWithChecksum","prevVoters","handleAddCandidates","candidateAddress","candidateAddressWithChecksum","prevCandidates","handleSubmit","filteredVoters","filteredCandidates","resetFields","onFinish","labelCol","wrapperCol","layout","label","tooltip","block","_","index","justifyContent","offset","htmlType","VoterInput","marginBottom","gutter","nextVoters","DeleteOutlined","i","targetNetwork","scaffoldEthProvider","providers","StaticJsonRpcProvider","mainnetInfura","localProviderUrl","localProviderUrlFromEnv","process","REACT_APP_PROVIDER","walletLinkProvider","WalletLink","appName","makeWeb3Provider","Web3Modal","cacheProvider","providerOptions","walletconnect","package","WalletConnectProvider","bridge","infuraId","rpc","logo","connector","enable","App","_network","setInjectedProvider","clearCachedProvider","disconnect","setTimeout","useExchangePrice","speed","setGasPrice","loadGasPrice","get","newGasPrice","useGasPrice","loadCurrentDistribution","useCurrentDistribution","localChainId","selectedChainId","faucetTx","yourLocalBalance","yourMainnetBalance","readContracts","adminRole","setAdminRole","setIsAdmin","updateRoleAdmin","DEFAULT_ADMIN_ROLE","adminRoleFromContract","updateAdmin","hasRole","isAdminFromContract","networkDisplay","networkSelected","networkLocal","closable","ethereum","chainName","nativeCurrency","rpcUrls","blockExplorerUrls","request","method","params","switchTx","Web3Provider","code","reason","route","setRoute","faucetHint","faucetAvailable","connection","faucetClicked","setFaucetClicked","selectedKeys","exact","path","prevTheme","subgraphUri","client","ApolloClient","uri","InMemoryCache","ReactDOM","ApolloProvider","themeMap","defaultTheme","document","getElementById","ERC20ABI","constant","outputs","anonymous","indexed","DAIABI","internalType","module","exports","DAI","UNI","GTC"],"mappings":"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","file":"static/js/main.bc7a13bf.chunk.js","sourcesContent":["import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\nconst DEBUG = false;\n\nexport default function useOnBlock(provider, fn, args) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n\n  // Turn on the listener if we have a function & a provider\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n","import { useEffect, useRef } from \"react\";\n\n// helper hook to call a function regularly in time intervals\n\nexport default function usePoller(fn, delay, extraWatch) {\n  const savedCallback = useRef();\n  // Remember the latest fn.\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]);\n  // Set up the interval.\n  // eslint-disable-next-line consistent-return\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      const id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n  // run at start too\n  useEffect(() => {\n    fn();\n  }, [extraWatch]);\n}\n","import { useCallback, useState, useEffect } from \"react\";\nimport useOnBlock from \"./OnBlock\";\nimport usePoller from \"./Poller\";\n\n/*\n  ~ What it does? ~\n\n  Gets your balance in ETH from given address and provider\n\n  ~ How can I use? ~\n\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get balance corresponding to given address\n  - Change provider to access balance on different chains (ex. mainnetProvider)\n  - If no pollTime is passed, the balance will update on every new block\n*/\n\nconst DEBUG = false;\n\nexport default function useBalance(provider, address, pollTime = 0) {\n  const [balance, setBalance] = useState();\n\n  const pollBalance = useCallback(\n    async (provider, address) => {\n      if (provider && address) {\n        const newBalance = await provider.getBalance(address);\n        if (newBalance !== balance) {\n          setBalance(newBalance);\n        }\n      }\n    },\n    [provider, address],\n  );\n\n  // Only pass a provider to watch on a block if there is no pollTime\n  useOnBlock(pollTime === 0 && provider, () => {\n    if (provider && address && pollTime === 0) {\n      pollBalance(provider, address);\n    }\n  });\n\n  // Update balance when the address or provider changes\n  useEffect(() => {\n    if (address && provider) pollBalance(provider, address);\n  }, [address, provider, pollBalance]);\n\n  // Use a poller if a pollTime is provided\n  usePoller(\n    async () => {\n      if (provider && address && pollTime > 0) {\n        if (DEBUG) console.log(\"polling!\", address);\n        pollBalance();\n      }\n    },\n    pollTime,\n    provider && address,\n  );\n\n  return balance;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\n\n  ~ How can I use? ~\n\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\n\n  ~ Features ~\n\n  - Provide contractAddress to check if the contract is deployed\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\n*/\n\nconst useContractExistsAtAddress = (provider, contractAddress) => {\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\n\n  // We can look at the blockchain and see what's stored at `contractAddress`\n  // If we find code then we know that a contract exists there.\n  // If we find nothing (0x0) then there is no contract deployed to that address\n  useEffect(() => {\n    // eslint-disable-next-line consistent-return\n    const checkDeployment = async () => {\n      if (!utils.isAddress(contractAddress)) return false;\n      const bytecode = await provider.getCode(contractAddress);\n      setContractIsDeployed(bytecode !== \"0x0\");\n    };\n    if (provider) checkDeployment();\n  }, [provider, contractAddress]);\n\n  return contractIsDeployed;\n};\n\nexport default useContractExistsAtAddress;\n","/* eslint-disable global-require */\nimport { useEffect, useState } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Loads your local contracts and gives options to read values from contracts\n  or write transactions into them\n\n  ~ How can I use? ~\n\n  const readContracts = useContractLoader(localProvider) // or\n  const writeContracts = useContractLoader(userProvider)\n\n  ~ Features ~\n\n  - localProvider enables reading values from contracts\n  - userProvider enables writing transactions into contracts\n  - Example of keeping track of \"purpose\" variable by loading contracts into readContracts\n    and using ContractReader.js hook:\n    const purpose = useContractReader(readContracts,\"YourContract\", \"purpose\")\n  - Example of using setPurpose function from our contract and writing transactions by Transactor.js helper:\n    tx( writeContracts.YourContract.setPurpose(newPurpose) )\n\n  config can include:\n  - chainId - to hardcode the chainId, irrespective of the providerOrSigner chainId\n  - hardhatNetworkName - to hardcode the hardhat network of interest\n  - customAddresses: { contractName: 0xCustomAddress } to hardcode the address for a given named contract\n  - hardhatContracts: object following the hardhat deploy export format (Json with chainIds as keys, which have hardhat network names as keys, which contain arrays of contracts for each)\n  - externalContracts: object with chainIds as keys, with an array of contracts for each\n*/\n\nexport default function useContractLoader(providerOrSigner, config = {}) {\n  const [contracts, setContracts] = useState();\n\n  const customAddressKeys = config.customAddresses && Object.keys(config.customAddresses).join();\n  const customAddressValues = config.customAddresses && Object.values(config.customAddresses).join();\n\n  useEffect(() => {\n    let active = true;\n\n    async function loadContracts() {\n      if (providerOrSigner && typeof providerOrSigner !== \"undefined\") {\n        console.log(`loading contracts`);\n        try {\n          // we need to check to see if this providerOrSigner has a signer or not\n          let signer;\n          let provider;\n          let accounts;\n\n          if (providerOrSigner && typeof providerOrSigner.listAccounts === \"function\") {\n            accounts = await providerOrSigner.listAccounts();\n          }\n\n          if (ethers.Signer.isSigner(providerOrSigner)) {\n            signer = providerOrSigner;\n            provider = signer.provider;\n          } else if (accounts && accounts.length > 0) {\n            signer = providerOrSigner.getSigner();\n            provider = providerOrSigner;\n          } else {\n            signer = providerOrSigner;\n            provider = providerOrSigner;\n          }\n\n          const providerNetwork = await provider.getNetwork();\n\n          const _chainId = config.chainId || providerNetwork.chainId;\n\n          let contractList = {};\n          let externalContractList = {};\n          try {\n            contractList = config.hardhatContracts || require(\"../contracts/hardhat_contracts.json\");\n          } catch (e) {\n            console.log(e);\n          }\n          try {\n            externalContractList = config.externalContracts || require(\"../contracts/external_contracts.js\");\n          } catch (e) {\n            console.log(e);\n          }\n\n          let combinedContracts = {};\n\n          if (contractList[_chainId]) {\n            for (const hardhatNetwork in contractList[_chainId]) {\n              if (Object.prototype.hasOwnProperty.call(contractList[_chainId], hardhatNetwork)) {\n                if (!config.hardhatNetworkName || hardhatNetwork === config.hardhatNetworkName) {\n                  combinedContracts = {\n                    ...combinedContracts,\n                    ...contractList[_chainId][hardhatNetwork].contracts,\n                  };\n                }\n              }\n            }\n          }\n\n          if (externalContractList[_chainId]) {\n            combinedContracts = { ...combinedContracts, ...externalContractList[_chainId].contracts };\n          }\n\n          const newContracts = Object.keys(combinedContracts).reduce((accumulator, contractName) => {\n            const _address =\n              config.customAddresses && Object.keys(config.customAddresses).includes(contractName)\n                ? config.customAddresses[contractName]\n                : combinedContracts[contractName].address;\n            accumulator[contractName] = new ethers.Contract(_address, combinedContracts[contractName].abi, signer);\n            return accumulator;\n          }, {});\n          if (active) setContracts(newContracts);\n        } catch (e) {\n          console.log(\"ERROR LOADING CONTRACTS!!\", e);\n        }\n      }\n    }\n    loadContracts();\n\n    return () => {\n      active = false;\n    };\n  }, [providerOrSigner, config.chainId, config.hardhatNetworkName, customAddressKeys, customAddressValues]);\n\n  return contracts;\n}\n","import { utils } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n// resolved if(name){} to not save \"\" into cache\n\n/*\n  ~ What it does? ~\n\n  Gets ENS name from given address and provider\n\n  ~ How can I use? ~\n\n  const ensName = useLookupAddress(mainnetProvider, address);\n\n  ~ Features ~\n\n  - Provide address and get ENS name corresponding to given address\n*/\n\nconst lookupAddress = async (provider, address) => {\n  if (address && utils.isAddress(address)) {\n    // console.log(`looking up ${address}`)\n    try {\n      // Accuracy of reverse resolution is not enforced.\n      // We then manually ensure that the reported ens name resolves to address\n      const reportedName = await provider.lookupAddress(address);\n\n      const resolvedAddress = await provider.resolveName(reportedName);\n\n      if (address && utils.getAddress(address) === utils.getAddress(resolvedAddress)) {\n        return reportedName;\n      }\n      return utils.getAddress(address);\n    } catch (e) {\n      return utils.getAddress(address);\n    }\n  }\n  return 0;\n};\n\nconst useLookupAddress = (provider, address) => {\n  const [ensName, setEnsName] = useState(address);\n  // const [ensCache, setEnsCache] = useLocalStorage('ensCache_'+address); Writing directly due to sync issues\n\n  useEffect(() => {\n    let cache = window.localStorage.getItem(\"ensCache_\" + address);\n    cache = cache && JSON.parse(cache);\n\n    if (cache && cache.timestamp > Date.now()) {\n      setEnsName(cache.name);\n    } else if (provider) {\n      lookupAddress(provider, address).then(name => {\n        if (name) {\n          setEnsName(name);\n          window.localStorage.setItem(\n            \"ensCache_\" + address,\n            JSON.stringify({\n              timestamp: Date.now() + 360000,\n              name,\n            }),\n          );\n        }\n      });\n    }\n  }, [provider, address, setEnsName]);\n\n  return ensName;\n};\n\nexport default useLookupAddress;\n","import { constants } from \"ethers\";\nimport { useEffect, useState } from \"react\";\n\n/*\n  ~ What it does? ~\n\n  Gets address from given ENS name and provider\n\n  ~ How can I use? ~\n\n  const addressFromENS = useResolveName(mainnetProvider, \"austingriffith.eth\");\n\n  ~ Features ~\n\n  - Specify mainnetProvider\n  - Provide ENS name and get address corresponding to given ENS name\n*/\n\nconst useResolveName = (provider, ensName) => {\n  const [address, setAddress] = useState(constants.AddressZero);\n\n  useEffect(() => {\n    if (provider) {\n      provider.resolveName(ensName).then(resolvedAddress => setAddress(resolvedAddress));\n    }\n  }, [provider, ensName]);\n\n  return address;\n};\n\nexport default useResolveName;\n","import { useState, useEffect } from \"react\";\n\nconst { ethers } = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n      const _newWallet = ethers.Wallet.createRandom();\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n      const _signer = wallet.connect(provider);\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n\n  return signer;\n}\n","import { useMemo, useState } from \"react\";\nimport useBurnerSigner from \"./BurnerSigner\";\n\n/*\n  ~ What it does? ~\n\n  Gets user provider\n\n  ~ How can I use? ~\n\n  const userProvider = useUserProvider(injectedProvider, localProvider);\n\n  ~ Features ~\n\n  - Specify the injected provider from Metamask\n  - Specify the local provider\n  - Usage examples:\n    const tx = Transactor(userSigner, gasPrice)\n*/\n\nconst useUserSigner = (injectedProvider, localProvider) => {\n  const [signer, setSigner] = useState();\n  const burnerSigner = useBurnerSigner(localProvider);\n\n  useMemo(() => {\n    if (injectedProvider) {\n      console.log(\"🦊 Using injected provider\");\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\n      setSigner(injectedSigner);\n    } else if (!localProvider) setSigner();\n    else {\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\n        let rawPK;\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\n          console.log(\"🔑 Incoming Private Key...\");\n          rawPK = incomingPK;\n          window.history.pushState({}, \"\", \"/\");\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n          }\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\n        }\n      }\n\n      console.log(\"🔥 Using burner signer\", burnerSigner);\n      setSigner(burnerSigner);\n    }\n  }, [injectedProvider, localProvider, burnerSigner]);\n\n  return signer;\n};\n\nexport default useUserSigner;\n","import { Skeleton, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport { useLookupAddress } from \"../hooks\";\n\n// changed value={address} to address={address}\n\n/*\n  ~ What it does? ~\n\n  Displays an address with a blockie image and option to copy address\n\n  ~ How can I use? ~\n\n  <Address\n    address={address}\n    ensProvider={mainnetProvider}\n    blockExplorer={blockExplorer}\n    fontSize={fontSize}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n  - Provide fontSize={fontSize} to change the size of address text\n*/\n\nconst { Text } = Typography;\n\nconst blockExplorerLink = (address, blockExplorer) =>\n  `${blockExplorer || \"https://etherscan.io/\"}${\"address/\"}${address}`;\n\nexport default function Address(props) {\n  const address = props.value || props.address;\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const { currentTheme } = useThemeSwitcher();\n\n  if (!address) {\n    return (\n      <span>\n        <Skeleton avatar paragraph={{ rows: 1 }} />\n      </span>\n    );\n  }\n\n  let displayAddress = address.substr(0, 6);\n\n  if (ens && ens.indexOf(\"0x\") < 0) {\n    displayAddress = ens;\n  } else if (props.size === \"short\") {\n    displayAddress += \"...\" + address.substr(-4);\n  } else if (props.size === \"long\") {\n    displayAddress = address;\n  }\n\n  const etherscanLink = blockExplorerLink(address, props.blockExplorer);\n  if (props.minimized) {\n    return (\n      <span style={{ verticalAlign: \"middle\" }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#C9B8FF\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          <Blockies seed={address.toLowerCase()} size={8} scale={2} />\n        </a>\n      </span>\n    );\n  }\n\n  let text;\n  if (props.onChange) {\n    text = (\n      <Text editable={{ onChange: props.onChange }} copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#C9B8FF\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  } else {\n    text = (\n      <Text copyable={{ text: address }}>\n        <a\n          style={{ color: currentTheme === \"light\" ? \"#222222\" : \"#C9B8FF\" }}\n          target=\"_blank\"\n          href={etherscanLink}\n          rel=\"noopener noreferrer\"\n        >\n          {displayAddress}\n        </a>\n      </Text>\n    );\n  }\n\n  return (\n    <span>\n      <span style={{ verticalAlign: \"middle\" }}>\n        <Blockies seed={address.toLowerCase()} size={8} scale={props.fontSize ? props.fontSize / 7 : 4} />\n      </span>\n      <span style={{ verticalAlign: \"middle\", paddingLeft: 5, fontSize: props.fontSize ? props.fontSize : 28 }}>\n        {text}\n      </span>\n    </span>\n  );\n}\n","import React, { useState } from \"react\";\nimport { useBalance } from \"../hooks\";\n\nconst { utils } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays a balance of given address in ether & dollar\n\n  ~ How can I use? ~\n\n  <Balance\n    address={address}\n    provider={mainnetProvider}\n    price={price}\n  />\n\n  ~ If you already have the balance as a bignumber ~\n  <Balance\n    balance={balance}\n    price={price}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to given address\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\n  - Provide price={price} of ether and get your balance converted to dollars\n*/\n\nexport default function Balance(props) {\n  const [dollarMode, setDollarMode] = useState(true);\n\n  // const [listening, setListening] = useState(false);\n\n  const balance = useBalance(props.provider, props.address);\n\n  let floatBalance = parseFloat(\"0.00\");\n\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n  if (typeof props.value !== \"undefined\") {\n    usingBalance = props.value;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  const price = props.price || props.dollarMultiplier;\n\n  if (price && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\n  }\n\n  return (\n    <span\n      style={{\n        verticalAlign: \"middle\",\n        fontSize: props.size ? props.size : 24,\n        padding: 8,\n        cursor: \"pointer\",\n      }}\n      onClick={() => {\n        setDollarMode(!dollarMode);\n      }}\n    >\n      {displayBalance}\n    </span>\n  );\n}\n","// MY INFURA_ID, SWAP IN YOURS FROM https://infura.io/dashboard/ethereum\n// export const INFURA_ID = \"460f40a260564ac4a4f4b3fffb032dad\";\nexport const INFURA_ID = \"d971555e2f2c49fa99370839ea3466f5\";\n\n// MY ETHERSCAN_ID, SWAP IN YOURS FROM https://etherscan.io/myapikey\nexport const ETHERSCAN_KEY = \"PSW8C433Q667DVEX5BCRMGNAH9FSGFZ7Q8\";\n\n// BLOCKNATIVE ID FOR Notify.js:\nexport const BLOCKNATIVE_DAPPID = \"0b58206a-f3c0-4701-a62f-73c7243e8c77\";\n\nexport const NETWORKS = {\n  localhost: {\n    name: \"localhost\",\n    color: \"#666666\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n  },\n  mainnet: {\n    name: \"mainnet\",\n    color: \"#ff8b9e\",\n    chainId: 1,\n    rpcUrl: `https://mainnet.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://etherscan.io/\",\n  },\n  kovan: {\n    name: \"kovan\",\n    color: \"#7003DD\",\n    chainId: 42,\n    rpcUrl: `https://kovan.infura.io/v3/${INFURA_ID}`,\n    blockExplorer: \"https://kovan.etherscan.io/\",\n    faucet: \"https://gitter.im/kovan-testnet/faucet\", // https://faucet.kovan.network/\n  },\n  rinkeby: {\n    name: \"rinkeby\",\n    color: \"#e0d068\",\n    chainId: 4,\n    rpcUrl: `https://rinkeby.infura.io/v3/${INFURA_ID}`,\n    faucet: \"https://faucet.rinkeby.io/\",\n    blockExplorer: \"https://rinkeby.etherscan.io/\",\n  },\n  ropsten: {\n    name: \"ropsten\",\n    color: \"#F60D09\",\n    chainId: 3,\n    faucet: \"https://faucet.ropsten.be/\",\n    blockExplorer: \"https://ropsten.etherscan.io/\",\n    rpcUrl: `https://ropsten.infura.io/v3/${INFURA_ID}`,\n  },\n  goerli: {\n    name: \"goerli\",\n    color: \"#0975F6\",\n    chainId: 5,\n    faucet: \"https://goerli-faucet.slock.it/\",\n    blockExplorer: \"https://goerli.etherscan.io/\",\n    rpcUrl: `https://goerli.infura.io/v3/${INFURA_ID}`,\n  },\n  xdai: {\n    name: \"xdai\",\n    color: \"#48a9a6\",\n    chainId: 100,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://dai.poa.network\",\n    faucet: \"https://xdai-faucet.top/\",\n    blockExplorer: \"https://blockscout.com/poa/xdai/\",\n  },\n  matic: {\n    name: \"matic\",\n    color: \"#2bbdf7\",\n    chainId: 137,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mainnet.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://explorer-mainnet.maticvigil.com//\",\n  },\n  mumbai: {\n    name: \"mumbai\",\n    color: \"#92D9FA\",\n    chainId: 80001,\n    price: 1,\n    gasPrice: 1000000000,\n    rpcUrl: \"https://rpc-mumbai.maticvigil.com\",\n    faucet: \"https://faucet.matic.network/\",\n    blockExplorer: \"https://mumbai-explorer.matic.today/\",\n  },\n  localArbitrum: {\n    name: \"localArbitrum\",\n    color: \"#50a0ea\",\n    chainId: 153869338190755,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:8547`,\n  },\n  localArbitrumL1: {\n    name: \"localArbitrumL1\",\n    color: \"#50a0ea\",\n    chainId: 44010,\n    blockExplorer: \"\",\n    rpcUrl: `http://localhost:7545`,\n  },\n  rinkebyArbitrum: {\n    name: \"Arbitrum Testnet\",\n    color: \"#50a0ea\",\n    chainId: 421611,\n    blockExplorer: \"https://rinkeby-explorer.arbitrum.io/#/\",\n    rpcUrl: `https://rinkeby.arbitrum.io/rpc`,\n  },\n  arbitrum: {\n    name: \"Arbitrum\",\n    color: \"#50a0ea\",\n    chainId: 42161,\n    blockExplorer: \"https://explorer.arbitrum.io/#/\",\n    rpcUrl: `https://arb1.arbitrum.io/rpc`,\n    gasPrice: 0,\n  },\n  localOptimismL1: {\n    name: \"localOptimismL1\",\n    color: \"#f01a37\",\n    chainId: 31337,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":9545\",\n  },\n  localOptimism: {\n    name: \"localOptimism\",\n    color: \"#f01a37\",\n    chainId: 420,\n    blockExplorer: \"\",\n    rpcUrl: \"http://\" + window.location.hostname + \":8545\",\n    gasPrice: 0,\n  },\n  kovanOptimism: {\n    name: \"kovanOptimism\",\n    color: \"#f01a37\",\n    chainId: 69,\n    blockExplorer: \"https://kovan-optimistic.etherscan.io/\",\n    rpcUrl: `https://kovan.optimism.io`,\n    gasPrice: 0,\n  },\n  optimism: {\n    name: \"optimism\",\n    color: \"#f01a37\",\n    chainId: 10,\n    blockExplorer: \"https://optimistic.etherscan.io/\",\n    rpcUrl: `https://mainnet.optimism.io`,\n  },\n};\n\nexport const NETWORK = chainId => {\n  for (const n in NETWORKS) {\n    if (NETWORKS[n].chainId === chainId) {\n      return NETWORKS[n];\n    }\n  }\n};\n","import { notification } from \"antd\";\nimport Notify from \"bnc-notify\";\nimport { BLOCKNATIVE_DAPPID } from \"../constants\";\n\nconst { ethers } = require(\"ethers\");\n\n// this should probably just be renamed to \"notifier\"\n// it is basically just a wrapper around BlockNative's wonderful Notify.js\n// https://docs.blocknative.com/notify\nconst callbacks = {};\n\nconst DEBUG = true;\n\nexport default function Transactor(providerOrSigner, gasPrice, etherscan) {\n  if (typeof providerOrSigner !== \"undefined\") {\n    // eslint-disable-next-line consistent-return\n    return async (tx, callback) => {\n      let signer;\n      let network;\n      let provider;\n      if (ethers.Signer.isSigner(providerOrSigner) === true) {\n        provider = providerOrSigner.provider;\n        signer = providerOrSigner;\n        network = providerOrSigner.provider && (await providerOrSigner.provider.getNetwork());\n      } else if (providerOrSigner._isProvider) {\n        provider = providerOrSigner;\n        signer = providerOrSigner.getSigner();\n        network = await providerOrSigner.getNetwork();\n      }\n\n      console.log(\"network\", network);\n\n      var options = null;\n      var notify = null;\n      if (navigator.onLine) {\n        options = {\n          dappId: BLOCKNATIVE_DAPPID, // GET YOUR OWN KEY AT https://account.blocknative.com\n          system: \"ethereum\",\n          networkId: network.chainId,\n          // darkMode: Boolean, // (default: false)\n          transactionHandler: txInformation => {\n            if (DEBUG) console.log(\"HANDLE TX\", txInformation);\n            const possibleFunction = callbacks[txInformation.transaction.hash];\n            if (typeof possibleFunction === \"function\") {\n              possibleFunction(txInformation.transaction);\n            }\n          },\n        };\n\n        notify = Notify(options);\n      }\n\n      let etherscanNetwork = \"\";\n      if (network.name && network.chainId > 1) {\n        etherscanNetwork = network.name + \".\";\n      }\n\n      let etherscanTxUrl = \"https://\" + etherscanNetwork + \"etherscan.io/tx/\";\n      if (network.chainId === 100) {\n        etherscanTxUrl = \"https://blockscout.com/poa/xdai/tx/\";\n      }\n\n      try {\n        let result;\n        if (tx instanceof Promise) {\n          if (DEBUG) console.log(\"AWAITING TX\", tx);\n          result = await tx;\n        } else {\n          if (!tx.gasPrice) {\n            tx.gasPrice = gasPrice || ethers.utils.parseUnits(\"4.1\", \"gwei\");\n          }\n          if (!tx.gasLimit) {\n            tx.gasLimit = ethers.utils.hexlify(120000);\n          }\n          if (DEBUG) console.log(\"RUNNING TX\", tx);\n          result = await signer.sendTransaction(tx);\n        }\n        if (DEBUG) console.log(\"RESULT:\", result);\n        // console.log(\"Notify\", notify);\n\n        if (callback) {\n          callbacks[result.hash] = callback;\n        }\n\n        // if it is a valid Notify.js network, use that, if not, just send a default notification\n        if (notify && [1, 3, 4, 5, 42, 100].indexOf(network.chainId) >= 0) {\n          const { emitter } = notify.hash(result.hash);\n          emitter.on(\"all\", transaction => {\n            return {\n              onclick: () => window.open((etherscan || etherscanTxUrl) + transaction.hash),\n            };\n          });\n        } else {\n          notification.info({\n            message: \"Local Transaction Sent\",\n            description: result.hash,\n            placement: \"bottomRight\",\n          });\n          // on most networks BlockNative will update a transaction handler,\n          // but locally we will set an interval to listen...\n          if (callback) {\n            const txResult = await tx;\n            const listeningInterval = setInterval(async () => {\n              console.log(\"CHECK IN ON THE TX\", txResult, provider);\n              const currentTransactionReceipt = await provider.getTransactionReceipt(txResult.hash);\n              if (currentTransactionReceipt && currentTransactionReceipt.confirmations) {\n                callback({ ...txResult, ...currentTransactionReceipt });\n                clearInterval(listeningInterval);\n              }\n            }, 500);\n          }\n        }\n\n        if (typeof result.wait === \"function\") {\n          await result.wait();\n        }\n\n        return result;\n      } catch (e) {\n        if (DEBUG) console.log(e);\n        // Accounts for Metamask and default signer on all networks\n        let message =\n          e.data && e.data.message\n            ? e.data.message\n            : e.error && JSON.parse(JSON.stringify(e.error)).body\n            ? JSON.parse(JSON.parse(JSON.stringify(e.error)).body).error.message\n            : e.data\n            ? e.data\n            : JSON.stringify(e);\n        if (!e.error && e.message) {\n          message = e.message;\n        }\n\n        console.log(\"Attempt to clean up:\", message);\n        try {\n          let obj = JSON.parse(message);\n          if (obj && obj.body) {\n            let errorObj = JSON.parse(obj.body);\n            if (errorObj && errorObj.error && errorObj.error.message) {\n              message = errorObj.error.message;\n            }\n          }\n        } catch (e) {\n          //ignore\n        }\n\n        notification.error({\n          message: \"Transaction Error\",\n          description: message,\n        });\n        if (callback && typeof callback === \"function\") {\n          callback({ ...e, error: true });\n        }\n      }\n    };\n  }\n}\n","import React from \"react\";\nimport Blockies from \"react-blockies\";\n\n// provides a blockie image for the address using \"react-blockies\" library\n\nexport default function Blockie(props) {\n  if (!props.address || typeof props.address.toLowerCase !== \"function\") {\n    return <span />;\n  }\n  // eslint-disable-next-line react/jsx-props-no-spreading\n  return <Blockies seed={props.address.toLowerCase()} {...props} />;\n}\n","import { CameraOutlined, QrcodeOutlined } from \"@ant-design/icons\";\nimport { Badge, Input } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState } from \"react\";\nimport QrReader from \"react-qr-reader\";\nimport Blockie from \"./Blockie\";\n\n// probably we need to change value={toAddress} to address={toAddress}\n\n/*\n  ~ What it does? ~\n\n  Displays an address input with QR scan option\n\n  ~ How can I use? ~\n\n  <AddressInput\n    autoFocus\n    ensProvider={mainnetProvider}\n    placeholder=\"Enter address\"\n    value={toAddress}\n    onChange={setToAddress}\n  />\n\n  ~ Features ~\n\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide placeholder=\"Enter address\" value for the input\n  - Value of the address input is stored in value={toAddress}\n  - Control input change by onChange={setToAddress}\n                          or onChange={address => { setToAddress(address);}}\n*/\n\nexport default function AddressInput(props) {\n  const [value, setValue] = useState(props.value);\n  const [scan, setScan] = useState(false);\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n  const ens = useLookupAddress(props.ensProvider, currentValue);\n\n  const scannerButton = (\n    <div\n      style={{ marginTop: 4, cursor: \"pointer\" }}\n      onClick={() => {\n        setScan(!scan);\n      }}\n    >\n      <Badge count={<CameraOutlined style={{ fontSize: 9 }} />}>\n        <QrcodeOutlined style={{ fontSize: 18 }} />\n      </Badge>{\" \"}\n      Scan\n    </div>\n  );\n\n  const { ensProvider, onChange } = props;\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setValue(address);\n        if (typeof onChange === \"function\") {\n          onChange(address);\n        }\n      }\n    },\n    [ensProvider, onChange],\n  );\n\n  const scanner = scan ? (\n    <div\n      style={{\n        zIndex: 256,\n        position: \"absolute\",\n        left: 0,\n        top: 0,\n        width: \"100%\",\n      }}\n      onClick={() => {\n        setScan(false);\n      }}\n    >\n      <QrReader\n        delay={250}\n        resolution={1200}\n        onError={e => {\n          console.log(\"SCAN ERROR\", e);\n          setScan(false);\n        }}\n        onScan={newValue => {\n          if (newValue) {\n            console.log(\"SCAN VALUE\", newValue);\n            let possibleNewValue = newValue;\n            if (possibleNewValue.indexOf(\"/\") >= 0) {\n              possibleNewValue = possibleNewValue.substr(possibleNewValue.lastIndexOf(\"0x\"));\n              console.log(\"CLEANED VALUE\", possibleNewValue);\n            }\n            setScan(false);\n            updateAddress(possibleNewValue);\n          }\n        }}\n        style={{ width: \"100%\" }}\n      />\n    </div>\n  ) : (\n    \"\"\n  );\n\n  return (\n    <div>\n      {scanner}\n      <Input\n        id=\"0xAddress\" // name it something other than address for auto fill doxxing\n        name=\"0xAddress\" // name it something other than address for auto fill doxxing\n        autoComplete=\"off\"\n        autoFocus={props.autoFocus}\n        placeholder={props.placeholder ? props.placeholder : \"address\"}\n        prefix={<Blockie address={currentValue} size={8} scale={3} />}\n        value={ens || currentValue}\n        addonAfter={scannerButton}\n        onChange={e => {\n          updateAddress(e.target.value);\n        }}\n      />\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\n// small change in useEffect, display currentValue if it's provided by user\n\n/*\n  ~ What it does? ~\n\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\n\n  ~ How can I use? ~\n\n  <EtherInput\n    autofocus\n    price={price}\n    value=100\n    placeholder=\"Enter amount\"\n    onChange={value => {\n      setAmount(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide value={value} to specify initial amount of ether\n  - Provide placeholder=\"Enter amount\" value for the input\n  - Control input change by onChange={value => { setAmount(value);}}\n*/\n\nexport default function EtherInput(props) {\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"USD\") {\n            setMode(\"ETH\");\n            setDisplay(currentValue);\n          } else {\n            setMode(\"USD\");\n            if (currentValue) {\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n              setDisplay(usdValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let prefix;\n  let addonAfter;\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD 🔀\");\n  } else {\n    prefix = \"Ξ\";\n    addonAfter = option(\"ETH 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\n      autoFocus={props.autoFocus}\n      prefix={prefix}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"USD\") {\n          const possibleNewValue = parseFloat(newValue);\n          if (possibleNewValue) {\n            const ethValue = possibleNewValue / props.price;\n            setValue(ethValue);\n            if (typeof props.onChange === \"function\") {\n              props.onChange(ethValue);\n            }\n            setDisplay(newValue);\n          } else {\n            setDisplay(newValue);\n          }\n        } else {\n          setValue(newValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import { KeyOutlined, QrcodeOutlined, SendOutlined, WalletOutlined } from \"@ant-design/icons\";\nimport { Button, Modal, Spin, Tooltip, Typography } from \"antd\";\nimport { ethers } from \"ethers\";\nimport QR from \"qrcode.react\";\nimport React, { useState, useEffect } from \"react\";\nimport { Transactor } from \"../helpers\";\nimport Address from \"./Address\";\nimport AddressInput from \"./AddressInput\";\nimport Balance from \"./Balance\";\nimport EtherInput from \"./EtherInput\";\n\nconst { Text, Paragraph } = Typography;\n\n/*\n  ~ What it does? ~\n\n  Displays a wallet where you can specify address and send USD/ETH, with options to\n  scan address, to convert between USD and ETH, to see and generate private keys,\n  to send, receive and extract the burner wallet\n\n  ~ How can I use? ~\n\n  <Wallet\n    provider={userProvider}\n    address={address}\n    ensProvider={mainnetProvider}\n    price={price}\n    color='red'\n  />\n\n  ~ Features ~\n\n  - Provide provider={userProvider} to display a wallet\n  - Provide address={address} if you want to specify address, otherwise\n                                                    your default address will be used\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n  - Provide price={price} of ether and easily convert between USD and ETH\n  - Provide color to specify the color of wallet icon\n*/\n\nexport default function Wallet(props) {\n  const [signerAddress, setSignerAddress] = useState();\n  useEffect(() => {\n    async function getAddress() {\n      if (props.signer) {\n        const newAddress = await props.signer.getAddress();\n        setSignerAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [props.signer]);\n\n  const selectedAddress = props.address || signerAddress;\n\n  const [open, setOpen] = useState();\n  const [qr, setQr] = useState();\n  const [amount, setAmount] = useState();\n  const [toAddress, setToAddress] = useState();\n  const [pk, setPK] = useState();\n\n  const providerSend = props.provider ? (\n    <Tooltip title=\"Wallet\">\n      <WalletOutlined\n        onClick={() => {\n          setOpen(!open);\n        }}\n        rotate={-90}\n        style={{\n          padding: 7,\n          color: props.color ? props.color : \"\",\n          cursor: \"pointer\",\n          fontSize: 28,\n          verticalAlign: \"middle\",\n        }}\n      />\n    </Tooltip>\n  ) : (\n    \"\"\n  );\n\n  let display;\n  let receiveButton;\n  let privateKeyButton;\n  if (qr) {\n    display = (\n      <div>\n        <div>\n          <Text copyable>{selectedAddress}</Text>\n        </div>\n        <QR\n          value={selectedAddress}\n          size=\"450\"\n          level=\"H\"\n          includeMargin\n          renderAs=\"svg\"\n          imageSettings={{ excavate: false }}\n        />\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setQr(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Hide\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  } else if (pk) {\n    const pk = localStorage.getItem(\"metaPrivateKey\");\n    const wallet = new ethers.Wallet(pk);\n\n    if (wallet.address !== selectedAddress) {\n      display = (\n        <div>\n          <b>*injected account*, private key unknown</b>\n        </div>\n      );\n    } else {\n      const extraPkDisplayAdded = {};\n      const extraPkDisplay = [];\n      extraPkDisplayAdded[wallet.address] = true;\n      extraPkDisplay.push(\n        <div style={{ fontSize: 16, padding: 2, backgroundStyle: \"#89e789\" }}>\n          <a href={\"/pk#\" + pk}>\n            <Address minimized address={wallet.address} ensProvider={props.ensProvider} /> {wallet.address.substr(0, 6)}\n          </a>\n        </div>,\n      );\n      for (const key in localStorage) {\n        if (key.indexOf(\"metaPrivateKey_backup\") >= 0) {\n          console.log(key);\n          const pastpk = localStorage.getItem(key);\n          const pastwallet = new ethers.Wallet(pastpk);\n          if (!extraPkDisplayAdded[pastwallet.address] /* && selectedAddress!=pastwallet.address */) {\n            extraPkDisplayAdded[pastwallet.address] = true;\n            extraPkDisplay.push(\n              <div style={{ fontSize: 16 }}>\n                <a href={\"/pk#\" + pastpk}>\n                  <Address minimized address={pastwallet.address} ensProvider={props.ensProvider} />{\" \"}\n                  {pastwallet.address.substr(0, 6)}\n                </a>\n              </div>,\n            );\n          }\n        }\n      }\n\n      display = (\n        <div>\n          <b>Private Key:</b>\n\n          <div>\n            <Text copyable>{pk}</Text>\n          </div>\n\n          <hr />\n\n          <i>\n            Point your camera phone at qr code to open in\n            <a target=\"_blank\" href={\"https://xdai.io/\" + pk} rel=\"noopener noreferrer\">\n              burner wallet\n            </a>\n            :\n          </i>\n          <QR\n            value={\"https://xdai.io/\" + pk}\n            size=\"450\"\n            level=\"H\"\n            includeMargin\n            renderAs=\"svg\"\n            imageSettings={{ excavate: false }}\n          />\n\n          <Paragraph style={{ fontSize: \"16\" }} copyable>\n            {\"https://xdai.io/\" + pk}\n          </Paragraph>\n\n          {extraPkDisplay ? (\n            <div>\n              <h3>Known Private Keys:</h3>\n              {extraPkDisplay}\n              <Button\n                onClick={() => {\n                  const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\n                  if (currentPrivateKey) {\n                    window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\n                  }\n                  const randomWallet = ethers.Wallet.createRandom();\n                  const privateKey = randomWallet._signingKey().privateKey;\n                  window.localStorage.setItem(\"metaPrivateKey\", privateKey);\n                  window.location.reload();\n                }}\n              >\n                Generate\n              </Button>\n            </div>\n          ) : (\n            \"\"\n          )}\n        </div>\n      );\n    }\n\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(\"\");\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Hide\n      </Button>\n    );\n  } else {\n    const inputStyle = {\n      padding: 10,\n    };\n\n    display = (\n      <div>\n        <div style={inputStyle}>\n          <AddressInput\n            autoFocus\n            ensProvider={props.ensProvider}\n            placeholder=\"to address\"\n            address={toAddress}\n            onChange={setToAddress}\n          />\n        </div>\n        <div style={inputStyle}>\n          <EtherInput\n            price={props.price}\n            value={amount}\n            onChange={value => {\n              setAmount(value);\n            }}\n          />\n        </div>\n      </div>\n    );\n    receiveButton = (\n      <Button\n        key=\"receive\"\n        onClick={() => {\n          setQr(selectedAddress);\n          setPK(\"\");\n        }}\n      >\n        <QrcodeOutlined /> Receive\n      </Button>\n    );\n    privateKeyButton = (\n      <Button\n        key=\"hide\"\n        onClick={() => {\n          setPK(selectedAddress);\n          setQr(\"\");\n        }}\n      >\n        <KeyOutlined /> Private Key\n      </Button>\n    );\n  }\n\n  return (\n    <span>\n      {providerSend}\n      <Modal\n        visible={open}\n        title={\n          <div>\n            {selectedAddress ? <Address address={selectedAddress} ensProvider={props.ensProvider} /> : <Spin />}\n            <div style={{ float: \"right\", paddingRight: 25 }}>\n              <Balance address={selectedAddress} provider={props.provider} dollarMultiplier={props.price} />\n            </div>\n          </div>\n        }\n        onOk={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        onCancel={() => {\n          setQr();\n          setPK();\n          setOpen(!open);\n        }}\n        footer={[\n          privateKeyButton,\n          receiveButton,\n          <Button\n            key=\"submit\"\n            type=\"primary\"\n            disabled={!amount || !toAddress || qr}\n            loading={false}\n            onClick={() => {\n              const tx = Transactor(props.signer || props.provider);\n\n              let value;\n              try {\n                value = ethers.utils.parseEther(\"\" + amount);\n              } catch (e) {\n                // failed to parseEther, try something else\n                value = ethers.utils.parseEther(\"\" + parseFloat(amount).toFixed(8));\n              }\n\n              tx({\n                to: toAddress,\n                value,\n              });\n              setOpen(!open);\n              setQr();\n            }}\n          >\n            <SendOutlined /> Send\n          </Button>,\n        ]}\n      >\n        {display}\n      </Modal>\n    </span>\n  );\n}\n","import { Badge, Button, Space } from \"antd\";\nimport React from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\nimport Address from \"./Address\";\nimport Balance from \"./Balance\";\nimport Wallet from \"./Wallet\";\n\n/*\n  ~ What it does? ~\n\n  Displays an Address, Balance, and Wallet as one Account component,\n  also allows users to log in to existing accounts and log out\n\n  ~ How can I use? ~\n\n  <Account\n    address={address}\n    localProvider={localProvider}\n    userProvider={userProvider}\n    mainnetProvider={mainnetProvider}\n    price={price}\n    web3Modal={web3Modal}\n    loadWeb3Modal={loadWeb3Modal}\n    logoutOfWeb3Modal={logoutOfWeb3Modal}\n    blockExplorer={blockExplorer}\n  />\n\n  ~ Features ~\n\n  - Provide address={address} and get balance corresponding to the given address\n  - Provide localProvider={localProvider} to access balance on local network\n  - Provide userProvider={userProvider} to display a wallet\n  - Provide mainnetProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\")\n  - Provide price={price} of ether and get your balance converted to dollars\n  - Provide web3Modal={web3Modal}, loadWeb3Modal={loadWeb3Modal}, logoutOfWeb3Modal={logoutOfWeb3Modal}\n              to be able to log in/log out to/from existing accounts\n  - Provide blockExplorer={blockExplorer}, click on address and get the link\n              (ex. by default \"https://etherscan.io/\" or for xdai \"https://blockscout.com/poa/xdai/\")\n*/\n\nexport default function Account({\n  address,\n  userSigner,\n  localProvider,\n  mainnetProvider,\n  price,\n  minimized,\n  web3Modal,\n  loadWeb3Modal,\n  logoutOfWeb3Modal,\n  blockExplorer,\n  isAdmin,\n  isVoter,\n}) {\n  const modalButtons = [];\n  if (web3Modal) {\n    if (web3Modal.cachedProvider) {\n      modalButtons.push(\n        <Button\n          key=\"logoutbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          onClick={logoutOfWeb3Modal}\n        >\n          logout\n        </Button>,\n      );\n    } else {\n      modalButtons.push(\n        <Button\n          key=\"loginbutton\"\n          style={{ verticalAlign: \"top\", marginLeft: 8, marginTop: 4 }}\n          shape=\"round\"\n          size=\"large\"\n          /* type={minimized ? \"default\" : \"primary\"}     too many people just defaulting to MM and having a bad time */\n          onClick={loadWeb3Modal}\n        >\n          connect\n        </Button>,\n      );\n    }\n  }\n\n  const { currentTheme } = useThemeSwitcher();\n\n  const display = minimized ? (\n    \"\"\n  ) : (\n    <Space>\n      {isAdmin && <Badge count={\"admin\"} />}\n      {isVoter && <Badge count={\"voter\"} style={{ backgroundColor: \"#52c41a\" }} />}\n      {address ? (\n        <Address address={address} ensProvider={mainnetProvider} blockExplorer={blockExplorer} />\n      ) : (\n        \"Connecting...\"\n      )}\n      <Balance address={address} provider={localProvider} price={price} />\n      <Wallet\n        address={address}\n        provider={localProvider}\n        signer={userSigner}\n        ensProvider={mainnetProvider}\n        price={price}\n        color={currentTheme === \"light\" ? \"#1890ff\" : \"#2caad9\"}\n      />\n    </Space>\n  );\n\n  return (\n    <div>\n      {display}\n      {modalButtons}\n    </div>\n  );\n}\n","import { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\n\nconst { utils, constants } = require(\"ethers\");\n\n/*\n  ~ What it does? ~\n\n  Displays input field with options to convert between STRING and BYTES32\n\n  ~ How can I use? ~\n\n  <BytesStringInput\n    autofocus\n    value={\"scaffold-eth\"}\n    placeholder=\"Enter value...\"\n    onChange={value => {\n      setValue(value);\n    }}\n  />\n\n  ~ Features ~\n\n  - Provide value={value} to specify initial string\n  - Provide placeholder=\"Enter value...\" value for the input\n  - Control input change by onChange={value => { setValue(value);}}\n\n*/\n\nexport default function BytesStringInput(props) {\n  const [mode, setMode] = useState(\"STRING\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState(constants.HashZero);\n\n  // current value is the value in bytes32\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    return (\n      <div\n        style={{ cursor: \"pointer\" }}\n        onClick={() => {\n          if (mode === \"STRING\") {\n            setMode(\"BYTES32\");\n            if (!utils.isHexString(currentValue)) {\n              /* in case user enters invalid bytes32 number,\n                   it considers it as string and converts to bytes32 */\n              const changedValue = utils.formatBytes32String(currentValue);\n              setDisplay(changedValue);\n            } else {\n              setDisplay(currentValue);\n            }\n          } else {\n            setMode(\"STRING\");\n            if (currentValue && utils.isHexString(currentValue)) {\n              setDisplay(utils.parseBytes32String(currentValue));\n            } else {\n              setDisplay(currentValue);\n            }\n          }\n        }}\n      >\n        {title}\n      </div>\n    );\n  };\n\n  let addonAfter;\n  if (mode === \"STRING\") {\n    addonAfter = option(\"STRING 🔀\");\n  } else {\n    addonAfter = option(\"BYTES32 🔀\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n\n  return (\n    <Input\n      placeholder={props.placeholder ? props.placeholder : \"Enter value in \" + mode}\n      autoFocus={props.autoFocus}\n      value={display}\n      addonAfter={addonAfter}\n      onChange={async e => {\n        const newValue = e.target.value;\n        if (mode === \"STRING\") {\n          // const ethValue = parseFloat(newValue) / props.price;\n          // setValue(ethValue);\n          if (typeof props.onChange === \"function\") {\n            props.onChange(utils.formatBytes32String(newValue));\n          }\n          setValue(utils.formatBytes32String(newValue));\n          setDisplay(newValue);\n        } else {\n          if (typeof props.onChange === \"function\") {\n            props.onChange(newValue);\n          }\n          setValue(newValue);\n          setDisplay(newValue);\n        }\n      }}\n    />\n  );\n}\n","import React from \"react\";\nimport { Address } from \"..\";\nconst { utils } = require(\"ethers\");\n\nconst tryToDisplay = thing => {\n  if (thing && thing.toNumber) {\n    try {\n      return thing.toNumber();\n    } catch (e) {\n      return \"Ξ\" + utils.formatUnits(thing, \"ether\");\n    }\n  }\n  if (thing && thing.indexOf && thing.indexOf(\"0x\") === 0 && thing.length === 42) {\n    return <Address address={thing} fontSize={22} />;\n  }\n  return JSON.stringify(thing);\n};\n\nexport default tryToDisplay;\n","import { Col, Divider, Row } from \"antd\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport tryToDisplay from \"./utils\";\n\nconst DisplayVariable = ({ contractFunction, functionInfo, refreshRequired, triggerRefresh }) => {\n  const [variable, setVariable] = useState(\"\");\n\n  const refresh = useCallback(async () => {\n    try {\n      const funcResponse = await contractFunction();\n      setVariable(funcResponse);\n      triggerRefresh(false);\n    } catch (e) {\n      console.log(e);\n    }\n  }, [setVariable, contractFunction, triggerRefresh]);\n\n  useEffect(() => {\n    refresh();\n  }, [refresh, refreshRequired, contractFunction]);\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={14}>\n          <h2>{tryToDisplay(variable)}</h2>\n        </Col>\n        <Col span={2}>\n          <h2>\n            <a href=\"#\" onClick={refresh}>\n              🔄\n            </a>\n          </h2>\n        </Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n};\n\nexport default DisplayVariable;\n","import { Button, Col, Divider, Input, Row, Tooltip } from \"antd\";\nimport React, { useState } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../../helpers\";\nimport tryToDisplay from \"./utils\";\n\nconst { utils, BigNumber } = require(\"ethers\");\n\nexport default function FunctionForm({ contractFunction, functionInfo, provider, gasPrice, triggerRefresh }) {\n  const [form, setForm] = useState({});\n  const [txValue, setTxValue] = useState();\n  const [returnValue, setReturnValue] = useState();\n\n  const tx = Transactor(provider, gasPrice);\n\n  let inputIndex = 0;\n  const inputs = functionInfo.inputs.map(input => {\n    const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + inputIndex++;\n\n    let buttons = \"\";\n    if (input.type === \"bytes32\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to bytes32\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.parseBytes32String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.formatBytes32String(form[key]);\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"bytes\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"to hex\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              if (utils.isHexString(form[key])) {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.toUtf8String(form[key]);\n                setForm(formUpdate);\n              } else {\n                const formUpdate = { ...form };\n                formUpdate[key] = utils.hexlify(utils.toUtf8Bytes(form[key]));\n                setForm(formUpdate);\n              }\n            }}\n          >\n            #️⃣\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"uint256\") {\n      buttons = (\n        <Tooltip placement=\"right\" title=\"* 10 ** 18\">\n          <div\n            type=\"dashed\"\n            style={{ cursor: \"pointer\" }}\n            onClick={async () => {\n              const formUpdate = { ...form };\n              formUpdate[key] = utils.parseEther(form[key]);\n              setForm(formUpdate);\n            }}\n          >\n            ✴️\n          </div>\n        </Tooltip>\n      );\n    } else if (input.type === \"address\") {\n      const possibleAddress = form[key] && form[key].toLowerCase && form[key].toLowerCase().trim();\n      if (possibleAddress && possibleAddress.length === 42) {\n        buttons = (\n          <Tooltip placement=\"right\" title=\"blockie\">\n            <Blockies seed={possibleAddress} scale={3} />\n          </Tooltip>\n        );\n      }\n    }\n\n    return (\n      <div style={{ margin: 2 }} key={key}>\n        <Input\n          size=\"large\"\n          placeholder={input.name ? input.type + \" \" + input.name : input.type}\n          autoComplete=\"off\"\n          value={form[key]}\n          name={key}\n          onChange={event => {\n            const formUpdate = { ...form };\n            formUpdate[event.target.name] = event.target.value;\n            setForm(formUpdate);\n          }}\n          suffix={buttons}\n        />\n      </div>\n    );\n  });\n\n  const txValueInput = (\n    <div style={{ margin: 2 }} key=\"txValueInput\">\n      <Input\n        placeholder=\"transaction value\"\n        onChange={e => setTxValue(e.target.value)}\n        value={txValue}\n        addonAfter={\n          <div>\n            <Row>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\" * 10^18 \">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      const floatValue = parseFloat(txValue);\n                      if (floatValue) setTxValue(\"\" + floatValue * 10 ** 18);\n                    }}\n                  >\n                    ✳️\n                  </div>\n                </Tooltip>\n              </Col>\n              <Col span={16}>\n                <Tooltip placement=\"right\" title=\"number to hex\">\n                  <div\n                    type=\"dashed\"\n                    style={{ cursor: \"pointer\" }}\n                    onClick={async () => {\n                      setTxValue(BigNumber.from(txValue).toHexString());\n                    }}\n                  >\n                    #️⃣\n                  </div>\n                </Tooltip>\n              </Col>\n            </Row>\n          </div>\n        }\n      />\n    </div>\n  );\n\n  if (functionInfo.payable) {\n    inputs.push(txValueInput);\n  }\n\n  const buttonIcon =\n    functionInfo.type === \"call\" ? (\n      <Button style={{ marginLeft: -32 }}>Read📡</Button>\n    ) : (\n      <Button style={{ marginLeft: -32 }}>Send💸</Button>\n    );\n  inputs.push(\n    <div style={{ cursor: \"pointer\", margin: 2 }} key=\"goButton\">\n      <Input\n        onChange={e => setReturnValue(e.target.value)}\n        defaultValue=\"\"\n        bordered={false}\n        disabled\n        value={returnValue}\n        suffix={\n          <div\n            style={{ width: 50, height: 30, margin: 0 }}\n            type=\"default\"\n            onClick={async () => {\n              let innerIndex = 0;\n              const args = functionInfo.inputs.map(input => {\n                const key = functionInfo.name + \"_\" + input.name + \"_\" + input.type + \"_\" + innerIndex++;\n                let value = form[key];\n                if (input.baseType === \"array\") {\n                  value = JSON.parse(value);\n                } else if (input.type === \"bool\") {\n                  if (value === \"true\" || value === \"1\" || value === \"0x1\" || value === \"0x01\" || value === \"0x0001\") {\n                    value = 1;\n                  } else {\n                    value = 0;\n                  }\n                }\n                return value;\n              });\n\n              let result;\n              if (functionInfo.stateMutability === \"view\" || functionInfo.stateMutability === \"pure\") {\n                const returned = await contractFunction(...args);\n                result = tryToDisplay(returned);\n              } else {\n                const overrides = {};\n                if (txValue) {\n                  overrides.value = txValue; // ethers.utils.parseEther()\n                }\n                if (gasPrice) {\n                  overrides.gasPrice = gasPrice;\n                }\n                // Uncomment this if you want to skip the gas estimation for each transaction\n                // overrides.gasLimit = hexlify(1200000);\n\n                // console.log(\"Running with extras\",extras)\n                const returned = await tx(contractFunction(...args, overrides));\n                result = tryToDisplay(returned);\n              }\n\n              console.log(\"SETTING RESULT:\", result);\n              setReturnValue(result);\n              triggerRefresh(true);\n            }}\n          >\n            {buttonIcon}\n          </div>\n        }\n      />\n    </div>,\n  );\n\n  return (\n    <div>\n      <Row>\n        <Col\n          span={8}\n          style={{\n            textAlign: \"right\",\n            opacity: 0.333,\n            paddingRight: 6,\n            fontSize: 24,\n          }}\n        >\n          {functionInfo.name}\n        </Col>\n        <Col span={16}>{inputs}</Col>\n      </Row>\n      <Divider />\n    </div>\n  );\n}\n","import { Card } from \"antd\";\nimport React, { useMemo, useState } from \"react\";\nimport { useContractExistsAtAddress, useContractLoader } from \"../../hooks\";\nimport Account from \"../Account\";\nimport DisplayVariable from \"./DisplayVariable\";\nimport FunctionForm from \"./FunctionForm\";\n\nconst noContractDisplay = (\n  <div>\n    Loading...{\" \"}\n    <div style={{ padding: 32 }}>\n      You need to run{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run chain\n      </span>{\" \"}\n      and{\" \"}\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      to see your contract here.\n    </div>\n    <div style={{ padding: 32 }}>\n      <span style={{ marginRight: 4 }} role=\"img\" aria-label=\"warning\">\n        ☢️\n      </span>\n      Warning: You might need to run\n      <span\n        className=\"highlight\"\n        style={{ marginLeft: 4, /* backgroundColor: \"#f1f1f1\", */ padding: 4, borderRadius: 4, fontWeight: \"bolder\" }}\n      >\n        yarn run deploy\n      </span>{\" \"}\n      <i>again</i> after the frontend comes up!\n    </div>\n  </div>\n);\n\nconst isQueryable = fn => (fn.stateMutability === \"view\" || fn.stateMutability === \"pure\") && fn.inputs.length === 0;\n\nexport default function Contract({\n  customContract,\n  account,\n  gasPrice,\n  signer,\n  provider,\n  name,\n  show,\n  price,\n  blockExplorer,\n  chainId,\n}) {\n  const contracts = useContractLoader(provider, { chainId });\n  let contract;\n  if (!customContract) {\n    contract = contracts ? contracts[name] : \"\";\n  } else {\n    contract = customContract;\n  }\n\n  const address = contract ? contract.address : \"\";\n  const contractIsDeployed = useContractExistsAtAddress(provider, address);\n\n  const displayedContractFunctions = useMemo(\n    () =>\n      contract\n        ? Object.values(contract.interface.functions).filter(\n            fn => fn.type === \"function\" && !(show && show.indexOf(fn.name) < 0),\n          )\n        : [],\n    [contract, show],\n  );\n\n  const [refreshRequired, triggerRefresh] = useState(false);\n  const contractDisplay = displayedContractFunctions.map(fn => {\n    if (isQueryable(fn)) {\n      // If there are no inputs, just display return value\n      return (\n        <DisplayVariable\n          key={fn.name}\n          contractFunction={contract[fn.name]}\n          functionInfo={fn}\n          refreshRequired={refreshRequired}\n          triggerRefresh={triggerRefresh}\n        />\n      );\n    }\n    // If there are inputs, display a form to allow users to provide these\n    return (\n      <FunctionForm\n        key={\"FF\" + fn.name}\n        contractFunction={\n          fn.stateMutability === \"view\" || fn.stateMutability === \"pure\"\n            ? contract[fn.name]\n            : contract.connect(signer)[fn.name]\n        }\n        functionInfo={fn}\n        provider={provider}\n        gasPrice={gasPrice}\n        triggerRefresh={triggerRefresh}\n      />\n    );\n  });\n\n  return (\n    <div style={{ margin: \"auto\", width: \"70vw\" }}>\n      <Card\n        title={\n          <div>\n            {name}\n            <div style={{ float: \"right\" }}>\n              <Account\n                address={address}\n                localProvider={provider}\n                injectedProvider={provider}\n                mainnetProvider={provider}\n                price={price}\n                blockExplorer={blockExplorer}\n              />\n              {account}\n            </div>\n          </div>\n        }\n        size=\"large\"\n        style={{ marginTop: 25, width: \"100%\" }}\n        loading={contractDisplay && contractDisplay.length <= 0}\n      >\n        {contractIsDeployed ? contractDisplay : noContractDisplay}\n      </Card>\n    </div>\n  );\n}\n","import { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\n\nconst { utils } = require(\"ethers\");\n\n// improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\n  ~ What it does? ~\n\n  Displays a local faucet to send ETH to given address, also wallet is provided\n\n  ~ How can I use? ~\n\n  <Faucet\n    price={price}\n    localProvider={localProvider}\n    ensProvider={mainnetProvider}\n    placeholder={\"Send local faucet\"}\n  />\n\n  ~ Features ~\n\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\n  - Provide localProvider={localProvider} to be able to send ETH to given address\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\n              works both in input field & wallet\n  - Provide placeholder=\"Send local faucet\" value for the input\n*/\n\nexport default function Faucet(props) {\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n    getFaucetAddress();\n  }, [props.localProvider]);\n\n  let blockie;\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\n  } else {\n    blockie = <div />;\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n\n  const updateAddress = useCallback(\n    async newValue => {\n      if (typeof newValue !== \"undefined\") {\n        let address = newValue;\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n          try {\n            const possibleAddress = await props.ensProvider.resolveName(address);\n            if (possibleAddress) {\n              address = possibleAddress;\n            }\n            // eslint-disable-next-line no-empty\n          } catch (e) {}\n        }\n        setAddress(address);\n      }\n    },\n    [props.ensProvider, props.onChange],\n  );\n\n  const tx = Transactor(props.localProvider);\n\n  return (\n    <span>\n      <Input\n        size=\"large\"\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\n        prefix={blockie}\n        // value={address}\n        value={ens || address}\n        onChange={e => {\n          // setAddress(e.target.value);\n          updateAddress(e.target.value);\n        }}\n        suffix={\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\n            <Button\n              onClick={() => {\n                tx({\n                  to: address,\n                  value: utils.parseEther(\"0.01\"),\n                });\n                setAddress(\"\");\n              }}\n              shape=\"circle\"\n              icon={<SendOutlined />}\n            />\n            <Wallet\n              color=\"#888888\"\n              provider={props.localProvider}\n              ensProvider={props.ensProvider}\n              price={props.price}\n              address={faucetAddress}\n            />\n          </Tooltip>\n        }\n      />\n    </span>\n  );\n}\n","import { Button } from \"antd\";\nimport React from \"react\";\n\n// added display of 0 instead of NaN if gas price is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays gas gauge\n\n  ~ How can I use? ~\n\n  <GasGauge\n    gasPrice={gasPrice}\n  />\n\n  ~ Features ~\n\n  - Provide gasPrice={gasPrice} and get current gas gauge\n*/\n\nexport default function GasGauge(props) {\n  return (\n    <Button\n      onClick={() => {\n        window.open(\"https://ethgasstation.info/\");\n      }}\n      size=\"large\"\n      shape=\"round\"\n    >\n      <span style={{ marginRight: 8 }}>\n        <span role=\"img\" aria-label=\"fuelpump\">\n          ⛽️\n        </span>\n      </span>\n      {typeof props.gasPrice === \"undefined\" ? 0 : parseInt(props.gasPrice, 10) / 10 ** 9}g\n    </Button>\n  );\n}\n","import { PageHeader } from \"antd\";\nimport React from \"react\";\n\n// displays a page header\n\nexport default function Header() {\n  return (\n    <a href=\"https://github.com/carletex/quadratic-diplomacy\" target=\"_blank\" rel=\"noopener noreferrer\">\n      <PageHeader title=\"🍗feast.buidlguidl.com\" style={{ cursor: \"pointer\" }} />\n    </a>\n  );\n}\n","import { DollarCircleOutlined } from \"@ant-design/icons\";\nimport { RampInstantSDK } from \"@ramp-network/ramp-instant-sdk\";\nimport { Button, Divider, Modal } from \"antd\";\nimport React, { useState } from \"react\";\n\n// added display of 0 if price={price} is not provided\n\n/*\n  ~ What it does? ~\n\n  Displays current ETH price and gives options to buy ETH through Wyre/Ramp/Coinbase\n                            or get through Rinkeby/Ropsten/Kovan/Goerli\n\n  ~ How can I use? ~\n\n  <Ramp\n    price={price}\n    address={address}\n  />\n\n  ~ Features ~\n\n  - Ramp opens directly in the application, component uses RampInstantSDK\n  - Provide price={price} and current ETH price will be displayed\n  - Provide address={address} and your address will be pasted into Wyre/Ramp instantly\n*/\n\nexport default function Ramp(props) {\n  const [modalUp, setModalUp] = useState(\"down\");\n\n  const type = \"default\";\n\n  const allFaucets = [];\n  for (const n in props.networks) {\n    if (props.networks[n].chainId !== 31337 && props.networks[n].chainId !== 1) {\n      allFaucets.push(\n        <p key={props.networks[n].chainId}>\n          <Button\n            style={{ color: props.networks[n].color }}\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(props.networks[n].faucet);\n            }}\n          >\n            {props.networks[n].name}\n          </Button>\n        </p>,\n      );\n    }\n  }\n\n  return (\n    <div>\n      <Button\n        size=\"large\"\n        shape=\"round\"\n        onClick={() => {\n          setModalUp(\"up\");\n        }}\n      >\n        <DollarCircleOutlined style={{ color: \"#52c41a\" }} />{\" \"}\n        {typeof props.price === \"undefined\" ? 0 : props.price.toFixed(2)}\n      </Button>\n      <Modal\n        title=\"Buy ETH\"\n        visible={modalUp === \"up\"}\n        onCancel={() => {\n          setModalUp(\"down\");\n        }}\n        footer={[\n          <Button\n            key=\"back\"\n            onClick={() => {\n              setModalUp(\"down\");\n            }}\n          >\n            cancel\n          </Button>,\n        ]}\n      >\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://pay.sendwyre.com/purchase?destCurrency=ETH&sourceAmount=25&dest=\" + props.address);\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-us\">\n                🇺🇸\n              </span>\n            </span>\n            Wyre\n          </Button>\n        </p>\n        <p>\n          {\" \"}\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              new RampInstantSDK({\n                hostAppName: \"scaffold-eth\",\n                hostLogoUrl: \"https://scaffoldeth.io/scaffold-eth.png\",\n                swapAmount: \"100000000000000000\", // 0.1 ETH in wei  ?\n                swapAsset: \"ETH\",\n                userAddress: props.address,\n              })\n                .on(\"*\", event => console.log(event))\n                .show();\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\">\n              <span role=\"img\" aria-label=\"flag-gb\">\n                🇬🇧\n              </span>\n            </span>\n            Ramp\n          </Button>\n        </p>\n\n        <p>\n          <Button\n            type={type}\n            size=\"large\"\n            shape=\"round\"\n            onClick={() => {\n              window.open(\"https://www.coinbase.com/buy-ethereum\");\n            }}\n          >\n            <span style={{ paddingRight: 15 }} role=\"img\" aria-label=\"bank\">\n              🏦\n            </span>\n            Coinbase\n          </Button>\n        </p>\n\n        <Divider />\n\n        <h2>Testnet ETH</h2>\n\n        {allFaucets}\n      </Modal>\n    </div>\n  );\n}\n","import { RetweetOutlined, SettingOutlined } from \"@ant-design/icons\";\nimport { ChainId, Fetcher, Percent, Token, TokenAmount, Trade, WETH } from \"@uniswap/sdk\";\nimport { abi as IUniswapV2Router02ABI } from \"@uniswap/v2-periphery/build/IUniswapV2Router02.json\";\nimport {\n  Button,\n  Card,\n  Descriptions,\n  Divider,\n  Drawer,\n  InputNumber,\n  Modal,\n  notification,\n  Row,\n  Select,\n  Space,\n  Tooltip,\n  Typography,\n} from \"antd\";\nimport { useBlockNumber, usePoller } from \"eth-hooks\";\nimport { ethers } from \"ethers\";\nimport React, { useEffect, useState } from \"react\";\nimport { useDebounce } from \"../hooks\";\n\nconst { Option } = Select;\nconst { Text } = Typography;\n\nexport const ROUTER_ADDRESS = \"0x7a250d5630B4cF539739dF2C5dAcb4c659F2488D\";\n\nexport const ZERO_ADDRESS = \"0x0000000000000000000000000000000000000000\";\n\nconst erc20Abi = [\n  \"function balanceOf(address owner) view returns (uint256)\",\n  \"function approve(address _spender, uint256 _value) public returns (bool success)\",\n  \"function allowance(address _owner, address _spender) public view returns (uint256 remaining)\",\n];\n\nconst makeCall = async (callName, contract, args, metadata = {}) => {\n  if (contract[callName]) {\n    let result;\n    if (args) {\n      result = await contract[callName](...args, metadata);\n    } else {\n      result = await contract[callName]();\n    }\n    return result;\n  }\n  console.log(\"no call of that name!\");\n};\n\nconst defaultToken = \"ETH\";\nconst defaultTokenOut = \"DAI\";\nconst defaultSlippage = \"0.5\";\nconst defaultTimeLimit = 60 * 10;\n\nconst tokenListToObject = array =>\n  array.reduce((obj, item) => {\n    obj[item.symbol] = new Token(item.chainId, item.address, item.decimals, item.symbol, item.name);\n    return obj;\n  }, {});\n\nfunction Swap({ selectedProvider, tokenListURI }) {\n  const [tokenIn, setTokenIn] = useState(defaultToken);\n  const [tokenOut, setTokenOut] = useState(defaultTokenOut);\n  const [exact, setExact] = useState();\n  const [amountIn, setAmountIn] = useState();\n  const [amountInMax, setAmountInMax] = useState();\n  const [amountOut, setAmountOut] = useState();\n  const [amountOutMin, setAmountOutMin] = useState();\n  const [trades, setTrades] = useState();\n  const [routerAllowance, setRouterAllowance] = useState();\n  const [balanceIn, setBalanceIn] = useState();\n  const [balanceOut, setBalanceOut] = useState();\n  const [slippageTolerance, setSlippageTolerance] = useState(\n    new Percent(Math.round(defaultSlippage * 100).toString(), \"10000\"),\n  );\n  const [timeLimit, setTimeLimit] = useState(defaultTimeLimit);\n  const [swapping, setSwapping] = useState(false);\n  const [approving, setApproving] = useState(false);\n  const [settingsVisible, setSettingsVisible] = useState(false);\n  const [swapModalVisible, setSwapModalVisible] = useState(false);\n\n  const [tokenList, setTokenList] = useState([]);\n\n  const [tokens, setTokens] = useState();\n\n  const [invertPrice, setInvertPrice] = useState(false);\n\n  const blockNumber = useBlockNumber(selectedProvider, 3000);\n\n  const signer = selectedProvider.getSigner();\n  const routerContract = new ethers.Contract(ROUTER_ADDRESS, IUniswapV2Router02ABI, signer);\n\n  const _tokenListUri = tokenListURI || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\n\n  const debouncedAmountIn = useDebounce(amountIn, 500);\n  const debouncedAmountOut = useDebounce(amountOut, 500);\n\n  const activeChainId = process.env.REACT_APP_NETWORK === \"kovan\" ? ChainId.KOVAN : ChainId.MAINNET;\n\n  useEffect(() => {\n    const getTokenList = async () => {\n      console.log(_tokenListUri);\n      try {\n        const tokenList = await fetch(_tokenListUri);\n        const tokenListJson = await tokenList.json();\n        const filteredTokens = tokenListJson.tokens.filter(function (t) {\n          return t.chainId === activeChainId;\n        });\n        const ethToken = WETH[activeChainId];\n        ethToken.name = \"Ethereum\";\n        ethToken.symbol = \"ETH\";\n        ethToken.logoURI =\n          \"https://raw.githubusercontent.com/trustwallet/assets/master/blockchains/ethereum/assets/0xC02aaA39b223FE8D0A0e5C4F27eAD9083C756Cc2/logo.png\";\n        const _tokenList = [ethToken, ...filteredTokens];\n        setTokenList(_tokenList);\n        const _tokens = tokenListToObject(_tokenList);\n        setTokens(_tokens);\n      } catch (e) {\n        console.log(e);\n      }\n    };\n    getTokenList();\n  }, [tokenListURI]);\n\n  const getTrades = async () => {\n    if (tokenIn && tokenOut && (amountIn || amountOut)) {\n      const pairs = arr => arr.map((v, i) => arr.slice(i + 1).map(w => [v, w])).flat();\n\n      const baseTokens = tokenList\n        .filter(function (t) {\n          return [\"DAI\", \"USDC\", \"USDT\", \"COMP\", \"ETH\", \"MKR\", \"LINK\", tokenIn, tokenOut].includes(t.symbol);\n        })\n        .map(el => {\n          return new Token(el.chainId, el.address, el.decimals, el.symbol, el.name);\n        });\n\n      const listOfPairwiseTokens = pairs(baseTokens);\n\n      const getPairs = async list => {\n        const listOfPromises = list.map(item => Fetcher.fetchPairData(item[0], item[1], selectedProvider));\n        return Promise.all(listOfPromises.map(p => p.catch(() => undefined)));\n      };\n\n      const listOfPairs = await getPairs(listOfPairwiseTokens);\n\n      let bestTrade;\n\n      if (exact === \"in\") {\n        setAmountInMax();\n        bestTrade = Trade.bestTradeExactIn(\n          listOfPairs.filter(item => item),\n          new TokenAmount(tokens[tokenIn], ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals)),\n          tokens[tokenOut],\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountOut(bestTrade[0].outputAmount.toSignificant(6));\n        } else {\n          setAmountOut();\n        }\n      } else if (exact === \"out\") {\n        setAmountOutMin();\n        bestTrade = Trade.bestTradeExactOut(\n          listOfPairs.filter(item => item),\n          tokens[tokenIn],\n          new TokenAmount(tokens[tokenOut], ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals)),\n          { maxNumResults: 3, maxHops: 1 },\n        );\n        if (bestTrade[0]) {\n          setAmountIn(bestTrade[0].inputAmount.toSignificant(6));\n        } else {\n          setAmountIn();\n        }\n      }\n\n      setTrades(bestTrade);\n\n      console.log(bestTrade);\n    }\n  };\n\n  useEffect(() => {\n    getTrades();\n  }, [tokenIn, tokenOut, debouncedAmountIn, debouncedAmountOut, slippageTolerance, selectedProvider]);\n\n  useEffect(() => {\n    if (trades && trades[0]) {\n      if (exact === \"in\") {\n        setAmountOutMin(trades[0].minimumAmountOut(slippageTolerance));\n      } else if (exact === \"out\") {\n        setAmountInMax(trades[0].maximumAmountIn(slippageTolerance));\n      }\n    }\n  }, [slippageTolerance, amountIn, amountOut, trades]);\n\n  const getBalance = async (_token, _account, _contract) => {\n    let newBalance;\n    if (_token === \"ETH\") {\n      newBalance = await selectedProvider.getBalance(_account);\n    } else {\n      newBalance = await makeCall(\"balanceOf\", _contract, [_account]);\n    }\n    return newBalance;\n  };\n\n  const getAccountInfo = async () => {\n    if (tokens) {\n      const accountList = await selectedProvider.listAccounts();\n\n      if (tokenIn) {\n        const tempContractIn = new ethers.Contract(tokens[tokenIn].address, erc20Abi, selectedProvider);\n        const newBalanceIn = await getBalance(tokenIn, accountList[0], tempContractIn);\n        setBalanceIn(newBalanceIn);\n\n        let allowance;\n\n        if (tokenIn === \"ETH\") {\n          setRouterAllowance();\n        } else {\n          allowance = await makeCall(\"allowance\", tempContractIn, [accountList[0], ROUTER_ADDRESS]);\n          setRouterAllowance(allowance);\n        }\n      }\n\n      if (tokenOut) {\n        const tempContractOut = new ethers.Contract(tokens[tokenOut].address, erc20Abi, selectedProvider);\n        const newBalanceOut = await getBalance(tokenOut, accountList[0], tempContractOut);\n        setBalanceOut(newBalanceOut);\n      }\n    }\n  };\n\n  usePoller(getAccountInfo, 6000);\n\n  const route = trades\n    ? trades.length > 0\n      ? trades[0].route.path.map(function (item) {\n          return item.symbol;\n        })\n      : []\n    : [];\n\n  const updateRouterAllowance = async newAllowance => {\n    setApproving(true);\n    try {\n      const tempContract = new ethers.Contract(tokens[tokenIn].address, erc20Abi, signer);\n      const result = await makeCall(\"approve\", tempContract, [ROUTER_ADDRESS, newAllowance]);\n      console.log(result);\n      setApproving(false);\n      return true;\n    } catch (e) {\n      notification.open({\n        message: \"Approval unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const approveRouter = async () => {\n    const approvalAmount =\n      exact === \"in\"\n        ? ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals))\n        : amountInMax.raw.toString();\n    console.log(approvalAmount);\n    const approval = updateRouterAllowance(approvalAmount);\n    if (approval) {\n      notification.open({\n        message: \"Token transfer approved\",\n        description: `You can now swap up to ${amountIn} ${tokenIn}`,\n      });\n    }\n  };\n\n  const removeRouterAllowance = async () => {\n    const approvalAmount = ethers.utils.hexlify(0);\n    console.log(approvalAmount);\n    const removal = updateRouterAllowance(approvalAmount);\n    if (removal) {\n      notification.open({\n        message: \"Token approval removed\",\n        description: `The router is no longer approved for ${tokenIn}`,\n      });\n    }\n  };\n\n  const executeSwap = async () => {\n    setSwapping(true);\n    try {\n      let args;\n      const metadata = {};\n\n      let call;\n      const deadline = Math.floor(Date.now() / 1000) + timeLimit;\n      const path = trades[0].route.path.map(function (item) {\n        return item.address;\n      });\n      console.log(path);\n      const accountList = await selectedProvider.listAccounts();\n      const address = accountList[0];\n\n      if (exact === \"in\") {\n        const _amountIn = ethers.utils.hexlify(ethers.utils.parseUnits(amountIn.toString(), tokens[tokenIn].decimals));\n        const _amountOutMin = ethers.utils.hexlify(ethers.BigNumber.from(amountOutMin.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapExactETHForTokens\";\n          args = [_amountOutMin, path, address, deadline];\n          metadata.value = _amountIn;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapExactTokensForETH\" : \"swapExactTokensForTokens\";\n          args = [_amountIn, _amountOutMin, path, address, deadline];\n        }\n      } else if (exact === \"out\") {\n        const _amountOut = ethers.utils.hexlify(\n          ethers.utils.parseUnits(amountOut.toString(), tokens[tokenOut].decimals),\n        );\n        const _amountInMax = ethers.utils.hexlify(ethers.BigNumber.from(amountInMax.raw.toString()));\n        if (tokenIn === \"ETH\") {\n          call = \"swapETHForExactTokens\";\n          args = [_amountOut, path, address, deadline];\n          metadata.value = _amountInMax;\n        } else {\n          call = tokenOut === \"ETH\" ? \"swapTokensForExactETH\" : \"swapTokensForExactTokens\";\n          args = [_amountOut, _amountInMax, path, address, deadline];\n        }\n      }\n      console.log(call, args, metadata);\n      const result = await makeCall(call, routerContract, args, metadata);\n      console.log(result);\n      notification.open({\n        message: \"Swap complete 🦄\",\n        description: (\n          <>\n            <Text>{`Swapped ${tokenIn} for ${tokenOut}, transaction: `}</Text>\n            <Text copyable>{result.hash}</Text>\n          </>\n        ),\n      });\n      setSwapping(false);\n    } catch (e) {\n      console.log(e);\n      setSwapping(false);\n      notification.open({\n        message: \"Swap unsuccessful\",\n        description: `Error: ${e.message}`,\n      });\n    }\n  };\n\n  const showSwapModal = () => {\n    setSwapModalVisible(true);\n  };\n\n  const handleSwapModalOk = () => {\n    setSwapModalVisible(false);\n    executeSwap();\n  };\n\n  const handleSwapModalCancel = () => {\n    setSwapModalVisible(false);\n  };\n\n  const insufficientBalance = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const inputIsToken = tokenIn !== \"ETH\";\n  const insufficientAllowance = !inputIsToken\n    ? false\n    : routerAllowance\n    ? parseFloat(ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals)) < amountIn\n    : null;\n  const formattedBalanceIn = balanceIn\n    ? parseFloat(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals)).toPrecision(6)\n    : null;\n  const formattedBalanceOut = balanceOut\n    ? parseFloat(ethers.utils.formatUnits(balanceOut, tokens[tokenOut].decimals)).toPrecision(6)\n    : null;\n\n  const metaIn =\n    tokens && tokenList && tokenIn\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenIn].address;\n        })[0]\n      : null;\n  const metaOut =\n    tokens && tokenList && tokenOut\n      ? tokenList.filter(function (t) {\n          return t.address === tokens[tokenOut].address;\n        })[0]\n      : null;\n\n  const cleanIpfsURI = uri => {\n    try {\n      return uri.replace(\"ipfs://\", \"https://ipfs.io/ipfs/\");\n    } catch (e) {\n      console.log(e, uri);\n      return uri;\n    }\n  };\n\n  const logoIn = metaIn ? cleanIpfsURI(metaIn.logoURI) : null;\n  const logoOut = metaOut ? cleanIpfsURI(metaOut.logoURI) : null;\n\n  const rawPrice = trades && trades[0] ? trades[0].executionPrice : null;\n  const price = rawPrice ? rawPrice.toSignificant(7) : null;\n  const priceDescription = rawPrice\n    ? invertPrice\n      ? `${rawPrice.invert().toSignificant(7)} ${tokenIn} per ${tokenOut}`\n      : `${price} ${tokenOut} per ${tokenIn}`\n    : null;\n\n  const priceWidget = (\n    <Space>\n      <Text type=\"secondary\">{priceDescription}</Text>\n      <Button\n        type=\"text\"\n        onClick={() => {\n          setInvertPrice(!invertPrice);\n        }}\n      >\n        <RetweetOutlined />\n      </Button>\n    </Space>\n  );\n\n  const swapModal = (\n    <Modal title=\"Confirm swap\" visible={swapModalVisible} onOk={handleSwapModalOk} onCancel={handleSwapModalCancel}>\n      <Row>\n        <Space>\n          <img src={logoIn} alt={tokenIn} width=\"30\" />\n          {amountIn}\n          {tokenIn}\n        </Space>\n      </Row>\n      <Row justify=\"center\" align=\"middle\" style={{ width: 30 }}>\n        <span>↓</span>\n      </Row>\n      <Row>\n        <Space>\n          <img src={logoOut} alt={tokenOut} width=\"30\" />\n          {amountOut}\n          {tokenOut}\n        </Space>\n      </Row>\n      <Divider />\n      <Row>{priceWidget}</Row>\n      <Row>\n        {trades && ((amountOutMin && exact === \"in\") || (amountInMax && exact === \"out\"))\n          ? exact === \"in\"\n            ? `Output is estimated. You will receive at least ${amountOutMin.toSignificant(\n                6,\n              )} ${tokenOut} or the transaction will revert.`\n            : `Input is estimated. You will sell at most ${amountInMax.toSignificant(\n                6,\n              )} ${tokenIn} or the transaction will revert.`\n          : null}\n      </Row>\n    </Modal>\n  );\n\n  return (\n    <Card\n      title={\n        <Space>\n          <img src=\"https://ipfs.io/ipfs/QmXttGpZrECX5qCyXbBQiqgQNytVGeZW5Anewvh2jc4psg\" width=\"40\" alt=\"uniswapLogo\" />\n          <Typography>Uniswapper</Typography>\n        </Space>\n      }\n      extra={\n        <Button\n          type=\"text\"\n          onClick={() => {\n            setSettingsVisible(true);\n          }}\n        >\n          <SettingOutlined />\n        </Button>\n      }\n    >\n      <Space direction=\"vertical\">\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`From${exact === \"out\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoIn} alt={tokenIn} width=\"30\" />\n                <Button\n                  type=\"link\"\n                  onClick={() => {\n                    setAmountOut();\n                    setAmountIn(ethers.utils.formatUnits(balanceIn, tokens[tokenIn].decimals));\n                    setAmountOutMin();\n                    setAmountInMax();\n                    setExact(\"in\");\n                  }}\n                >\n                  {formattedBalanceIn}\n                </Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              min={0}\n              size=\"large\"\n              value={amountIn}\n              onChange={e => {\n                setAmountOut();\n                setTrades();\n                setAmountIn(e);\n                setExact(\"in\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenIn}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              defaultValue={defaultToken}\n              onChange={value => {\n                console.log(value);\n                if (value === tokenOut) {\n                  console.log(\"switch!\", tokenIn);\n                  setTokenOut(tokenIn);\n                  setAmountOut(amountIn);\n                  setBalanceOut(balanceIn);\n                }\n                setTokenIn(value);\n                setTrades();\n                setAmountIn();\n                setExact(\"out\");\n                setBalanceIn();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Tooltip title={route.join(\"->\")}>\n            <span>↓</span>\n          </Tooltip>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Card\n            size=\"small\"\n            type=\"inner\"\n            title={`To${exact === \"in\" && tokenIn && tokenOut ? \" (estimate)\" : \"\"}`}\n            extra={\n              <>\n                <img src={logoOut} width=\"30\" alt={tokenOut} />\n                <Button type=\"text\">{formattedBalanceOut}</Button>\n              </>\n            }\n            style={{ width: 400, textAlign: \"left\" }}\n          >\n            <InputNumber\n              style={{ width: \"160px\" }}\n              size=\"large\"\n              min={0}\n              value={amountOut}\n              onChange={e => {\n                setAmountOut(e);\n                setAmountIn();\n                setTrades();\n                setExact(\"out\");\n              }}\n            />\n            <Select\n              showSearch\n              value={tokenOut}\n              style={{ width: \"120px\" }}\n              size=\"large\"\n              bordered={false}\n              onChange={value => {\n                console.log(value, tokenIn, tokenOut);\n                if (value === tokenIn) {\n                  console.log(\"switch!\", tokenOut);\n                  setTokenIn(tokenOut);\n                  setAmountIn(amountOut);\n                  setBalanceIn(balanceOut);\n                }\n                setTokenOut(value);\n                setExact(\"in\");\n                setAmountOut();\n                setTrades();\n                setBalanceOut();\n              }}\n              filterOption={(input, option) => option.children.toLowerCase().indexOf(input.toLowerCase()) >= 0}\n              optionFilterProp=\"children\"\n            >\n              {tokenList.map(token => (\n                <Option key={token.symbol} value={token.symbol}>\n                  {token.symbol}\n                </Option>\n              ))}\n            </Select>\n          </Card>\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          {priceDescription ? priceWidget : null}\n        </Row>\n        <Row justify=\"center\" align=\"middle\">\n          <Space>\n            {inputIsToken ? (\n              <Button size=\"large\" loading={approving} disabled={!insufficientAllowance} onClick={approveRouter}>\n                {!insufficientAllowance && amountIn && amountOut ? \"Approved\" : \"Approve\"}\n              </Button>\n            ) : null}\n            <Button\n              size=\"large\"\n              loading={swapping}\n              disabled={insufficientAllowance || insufficientBalance || !amountIn || !amountOut}\n              onClick={showSwapModal}\n            >\n              {insufficientBalance ? \"Insufficient balance\" : \"Swap!\"}\n            </Button>\n            {swapModal}\n          </Space>\n        </Row>\n      </Space>\n      <Drawer\n        visible={settingsVisible}\n        onClose={() => {\n          setSettingsVisible(false);\n        }}\n        width={500}\n      >\n        <Descriptions title=\"Details\" column={1} style={{ textAlign: \"left\" }}>\n          <Descriptions.Item label=\"blockNumber\">{blockNumber}</Descriptions.Item>\n          <Descriptions.Item label=\"routerAllowance\">\n            <Space>\n              {routerAllowance ? ethers.utils.formatUnits(routerAllowance, tokens[tokenIn].decimals) : null}\n              {routerAllowance > 0 ? <Button onClick={removeRouterAllowance}>Remove Allowance</Button> : null}\n            </Space>\n          </Descriptions.Item>\n          <Descriptions.Item label=\"route\">{route.join(\"->\")}</Descriptions.Item>\n          <Descriptions.Item label=\"exact\">{exact}</Descriptions.Item>\n          <Descriptions.Item label=\"bestPrice\">\n            {trades ? (trades.length > 0 ? trades[0].executionPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"nextMidPrice\">\n            {trades ? (trades.length > 0 ? trades[0].nextMidPrice.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"priceImpact\">\n            {trades ? (trades.length > 0 ? trades[0].priceImpact.toSignificant(6) : null) : null}\n          </Descriptions.Item>\n          <Descriptions.Item label=\"slippageTolerance\">\n            <InputNumber\n              defaultValue={defaultSlippage}\n              min={0}\n              max={100}\n              precision={2}\n              formatter={value => `${value}%`}\n              parser={value => value.replace(\"%\", \"\")}\n              onChange={value => {\n                console.log(value);\n\n                const slippagePercent = new Percent(Math.round(value * 100).toString(), \"10000\");\n                setSlippageTolerance(slippagePercent);\n              }}\n            />\n          </Descriptions.Item>\n          <Descriptions.Item label=\"amountInMax\">{amountInMax ? amountInMax.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"amountOutMin\">{amountOutMin ? amountOutMin.toExact() : null}</Descriptions.Item>\n          <Descriptions.Item label=\"timeLimitInSeconds\">\n            <InputNumber\n              min={0}\n              max={3600}\n              defaultValue={defaultTimeLimit}\n              onChange={value => {\n                console.log(value);\n                setTimeLimit(value);\n              }}\n            />\n          </Descriptions.Item>\n        </Descriptions>\n      </Drawer>\n    </Card>\n  );\n}\n\nexport default Swap;\n","import { Switch } from \"antd\";\nimport React, { useEffect, useState } from \"react\";\nimport { useThemeSwitcher } from \"react-css-theme-switcher\";\n\nexport default function ThemeSwitcher() {\n  const theme = window.localStorage.getItem(\"theme\");\n  const [isDarkMode, setIsDarkMode] = useState(!(!theme || theme === \"light\"));\n  const { switcher, currentTheme, status, themes } = useThemeSwitcher();\n\n  useEffect(() => {\n    window.localStorage.setItem(\"theme\", currentTheme);\n  }, [currentTheme]);\n\n  const toggleTheme = isChecked => {\n    setIsDarkMode(isChecked);\n    switcher({ theme: isChecked ? themes.dark : themes.light });\n  };\n\n  // Avoid theme change flicker\n  // if (status === \"loading\") {\n  //   return null;\n  // }\n\n  return (\n    <div className=\"main fade-in\" style={{ position: \"fixed\", right: 8, bottom: 8 }}>\n      <span style={{ padding: 8 }}>{currentTheme === \"light\" ? \"☀️\" : \"🌜\"}</span>\n      <Switch checked={isDarkMode} onChange={toggleTheme} />\n    </div>\n  );\n}\n","import { DownloadOutlined, EditOutlined, SendOutlined } from \"@ant-design/icons\";\nimport { Timeline, Typography } from \"antd\";\nimport React from \"react\";\nimport Blockies from \"react-blockies\";\n\nconst { Text } = Typography;\n\n// displays a timeline for scaffold-eth usage\n\nexport default function TimelineDisplay(props) {\n  return (\n    <Timeline mode=\"right\">\n      <Timeline.Item dot=\"💾\">\n        <Text delete>\n          Clone and Install from the{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/austintgriffith/scaffold-eth\">\n            github repo\n          </a>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⚛️\">\n        <Text delete>\n          Start your frontend app with: <Text strong>yarn start</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"⛓\">\n        <Text delete={props.chainIsUp}>\n          Start your local blockchain with: <Text strong>yarn run chain</Text> (and refresh)\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📝\">\n        <Text delete={props.hasOwner}>\n          Compile and deploy your smart contract: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🤡\">\n        <Text delete={props.isNotSmoort}>\n          Fix error in <Text code>SmartContractWallet.sol</Text> then: <Text strong>yarn run deploy</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot={<SendOutlined style={{ fontSize: \"16px\" }} />} color={props.hasEther ? \"green\" : \"blue\"}>\n        <Text delete={props.hasEther}>\n          Send test ether to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address using\n          (bottom left) faucet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<DownloadOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.contractHasEther ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.contractHasEther}>\n          Deposit some funds into your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item\n        dot={<EditOutlined style={{ fontSize: \"16px\" }} />}\n        color={props.amOwnerOfContract ? \"green\" : \"blue\"}\n      >\n        <Text delete={props.amOwnerOfContract}>\n          Set <b>owner</b> of your{\" \"}\n          <Blockies seed={(props.contractAddress ? props.contractAddress : \"\").toLowerCase()} size={8} scale={2} />{\" \"}\n          smart contract wallet to your{\" \"}\n          <Blockies seed={(props.address ? props.address : \"\").toLowerCase()} size={8} scale={2} /> address\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"☢️\">\n        <Text>\n          Yikes, anyone can take ownership of <Text code>SmartContractWallet.sol</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🔬\">\n        <Text>\n          Test your contract with <Text code>buidler/test/myTest.js</Text> then:\n          <Text strong>yarn run test</Text>\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"🚀\">\n        <Text>\n          Build something awesome with 🏗 <a href=\"https://github.com/austintgriffith/scaffold-eth\">scaffold-eth</a> and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://twitter.com/austingriffith\">\n            @ me\n          </a>\n          !\n        </Text>\n      </Timeline.Item>\n\n      <Timeline.Item dot=\"📖\">\n        <Text>\n          Read more about{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://ethereum.org/developers\">\n            Ethereum\n          </a>\n          ,{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://solidity.readthedocs.io/en/develop/contracts.html\">\n            Solidity\n          </a>\n          , and{\" \"}\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://buidler.dev/tutorial\">\n            Buidler\n          </a>\n        </Text>\n      </Timeline.Item>\n    </Timeline>\n  );\n}\n","import { utils, ethers } from \"ethers\";\nimport { Button, Input, Form, Select, InputNumber, Table, Radio } from \"antd\";\nimport React, { useState, useEffect } from \"react\";\nimport { useContractLoader, useOnBlock } from \"../hooks\";\nimport { NETWORKS } from \"../constants\";\nimport { Transactor } from \"../helpers\";\n\n/*\nThis is a component for bridging between L1 & L2\nCurrently it supports Testnet deposits for Arbitrum & Optimism\n\n __          _______ _____\n \\ \\        / /_   _|  __ \\\n  \\ \\  /\\  / /  | | | |__) |\n   \\ \\/  \\/ /   | | |  ___/\n    \\  /\\  /   _| |_| |\n     \\/  \\/   |_____|_|\n\n\n*/\n\nexport default function L2ArbitrumBridge({ address, userSigner }) {\n  const [L1EthBalance, setL1EthBalance] = useState(\"...\");\n  const [L2EthBalance, setL2EthBalance] = useState(\"...\");\n  const [L1Provider, setL1Provider] = useState(\"\");\n  const [L2Provider, setL2Provider] = useState(\"\");\n  const [rollup, setRollup] = useState(\"arbitrum\");\n  const [environment, setEnvironment] = useState(\"test\");\n\n  const rollupConfig = {\n    arbitrum: {\n      test: { L1: NETWORKS.rinkeby, L2: NETWORKS.rinkebyArbitrum },\n      main: { L1: NETWORKS.mainnet, L2: NETWORKS.arbitrum },\n      local: { L1: NETWORKS.localArbitrumL1, L2: NETWORKS.localArbitrum },\n    },\n    optimism: {\n      test: { L1: NETWORKS.kovan, L2: NETWORKS.kovanOptimism },\n      local: { L1: NETWORKS.localOptimismL1, L2: NETWORKS.localOptimism },\n    },\n  };\n\n  const activeConfig = rollupConfig[rollup][environment];\n\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  const tx = Transactor(userSigner);\n\n  useEffect(() => {\n    async function setProviders() {\n      const L1 = activeConfig.L1;\n      const L2 = activeConfig.L2;\n      setL1Provider(new ethers.providers.StaticJsonRpcProvider(L1.rpcUrl));\n      setL2Provider(new ethers.providers.StaticJsonRpcProvider(L2.rpcUrl));\n      setL1EthBalance(\"...\");\n      setL2EthBalance(\"...\");\n    }\n    setProviders();\n  }, [rollup]);\n\n  const contracts = useContractLoader(userSigner, { externalContracts: L1BridgeMetadata, hardhatContracts: {} });\n\n  useOnBlock(L1Provider, async () => {\n    console.log(`⛓ A new mainnet block is here: ${L1Provider._lastBlockNumber}`);\n    const yourL1Balance = await L1Provider.getBalance(address);\n    setL1EthBalance(yourL1Balance ? ethers.utils.formatEther(yourL1Balance) : \"...\");\n    const yourL2Balance = await L2Provider.getBalance(address);\n    setL2EthBalance(yourL2Balance ? ethers.utils.formatEther(yourL2Balance) : \"...\");\n  });\n\n  const { Option } = Select;\n  const formItemLayout = {\n    labelCol: {\n      xs: { span: 24 },\n      sm: { span: 8 },\n    },\n    wrapperCol: {\n      xs: { span: 24 },\n      sm: { span: 12 },\n    },\n  };\n  const tailFormItemLayout = {\n    wrapperCol: {\n      xs: {\n        span: 24,\n        offset: 0,\n      },\n      sm: {\n        span: 12,\n        offset: 8,\n      },\n    },\n  };\n\n  const columns = [\n    {\n      title: \"\",\n      dataIndex: \"token\",\n      key: \"token\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} L1 Balance`,\n      dataIndex: \"l1\",\n      key: \"l1\",\n      align: \"center\",\n    },\n    {\n      title: `${activeConfig.L1.name} ${rollup} Balance`,\n      dataIndex: \"l2\",\n      key: \"l2\",\n      align: \"center\",\n    },\n  ];\n\n  const data = [\n    {\n      key: \"1\",\n      token: \"ETH\",\n      l1: \"Ξ\" + L1EthBalance,\n      l2: \"Ξ\" + L2EthBalance,\n    },\n  ];\n\n  const [form] = Form.useForm();\n\n  const onAssetChange = value => {\n    console.log(value);\n  };\n\n  async function onFinish(values) {\n    console.log(contracts);\n    console.log(values.amount.toString());\n    console.log(rollup);\n    let newTx;\n    try {\n      if (rollup === \"arbitrum\") {\n        newTx = await tx(\n          contracts.Inbox.depositEth(1_300_000, {\n            value: utils.parseEther(values.amount.toString()),\n            gasLimit: 300000,\n          }),\n        );\n      } else if (rollup === \"optimism\") {\n        newTx = await tx(\n          contracts.OVM_L1StandardBridge.depositETH(1_300_000, \"0x\", {\n            value: utils.parseEther(values.amount.toString()),\n          }),\n        );\n      }\n      await newTx.wait();\n      console.log(\"woop!\");\n    } catch (e) {\n      console.log(e);\n      console.log(\"something went wrong!\");\n    }\n  }\n\n  const onReset = () => {\n    form.resetFields();\n  };\n\n  const wrongNetwork = selectedChainId !== activeConfig.L1.chainId;\n\n  return (\n    <div style={{ padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginBottom: 128 }}>\n        <h2>Welcome to the L2 Deposit Bridge!</h2>\n        <Radio.Group\n          value={rollup}\n          onChange={e => {\n            setRollup(e.target.value);\n          }}\n          style={{ marginBottom: 10 }}\n        >\n          <Radio.Button value=\"arbitrum\">Arbitrum</Radio.Button>\n          <Radio.Button value=\"optimism\">Optimism</Radio.Button>\n        </Radio.Group>\n\n        <Table columns={columns} dataSource={data} pagination={false} style={{ marginBottom: 20 }} />\n\n        <Form\n          {...formItemLayout}\n          form={form}\n          name=\"control-hooks\"\n          onFinish={onFinish}\n          initialValues={{ assetType: \"eth\" }}\n        >\n          <Form.Item\n            name=\"assetType\"\n            label=\"Select Asset Type\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <Select placeholder=\"Select an asset type\" onChange={onAssetChange} allowClear>\n              <Option value=\"eth\">ETH</Option>\n              <Option disabled value=\"erc20\">\n                ERC-20\n              </Option>\n            </Select>\n          </Form.Item>\n          <Form.Item name=\"address\" label=\"Address\">\n            <Input disabled placeholder={address} />\n          </Form.Item>\n          <Form.Item\n            name=\"amount\"\n            label=\"Amount to bridge\"\n            rules={[\n              {\n                required: true,\n              },\n            ]}\n          >\n            <InputNumber />\n          </Form.Item>\n          <Form.Item {...tailFormItemLayout}>\n            <Button type=\"primary\" htmlType=\"submit\" disabled={wrongNetwork}>\n              {wrongNetwork ? `Switch wallet to ${activeConfig.L1.name}` : \"Deposit\"}\n            </Button>\n          </Form.Item>\n        </Form>\n      </div>\n    </div>\n  );\n}\n\n// Arbitrum Inbox https://rinkeby.etherscan.io/address/0xa157dc79ca26d69c3b1282d03ec42bdee2790a8f#code\nconst ArbitrumInboxABI = [\n  {\n    anonymous: false,\n    inputs: [\n      { indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" },\n      { indexed: false, internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"InboxMessageDelivered\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: true, internalType: \"uint256\", name: \"messageNum\", type: \"uint256\" }],\n    name: \"InboxMessageDeliveredFromOrigin\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [{ indexed: false, internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"WhitelistSourceUpdated\",\n    type: \"event\",\n  },\n  {\n    inputs: [],\n    name: \"bridge\",\n    outputs: [{ internalType: \"contract IBridge\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"l2CallValue\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" },\n      { internalType: \"address\", name: \"excessFeeRefundAddress\", type: \"address\" },\n      { internalType: \"address\", name: \"callValueRefundAddress\", type: \"address\" },\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"createRetryableTicket\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"uint256\", name: \"maxSubmissionCost\", type: \"uint256\" }],\n    name: \"depositEth\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"contract IBridge\", name: \"_bridge\", type: \"address\" },\n      { internalType: \"address\", name: \"_whitelist\", type: \"address\" },\n    ],\n    name: \"initialize\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"isMaster\",\n    outputs: [{ internalType: \"bool\", name: \"\", type: \"bool\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedContractTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendL1FundedUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"payable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2Message\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"bytes\", name: \"messageData\", type: \"bytes\" }],\n    name: \"sendL2MessageFromOrigin\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [\n      { internalType: \"uint256\", name: \"maxGas\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"gasPriceBid\", type: \"uint256\" },\n      { internalType: \"uint256\", name: \"nonce\", type: \"uint256\" },\n      { internalType: \"address\", name: \"destAddr\", type: \"address\" },\n      { internalType: \"uint256\", name: \"amount\", type: \"uint256\" },\n      { internalType: \"bytes\", name: \"data\", type: \"bytes\" },\n    ],\n    name: \"sendUnsignedTransaction\",\n    outputs: [{ internalType: \"uint256\", name: \"\", type: \"uint256\" }],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [{ internalType: \"address\", name: \"newSource\", type: \"address\" }],\n    name: \"updateWhitelistSource\",\n    outputs: [],\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    inputs: [],\n    name: \"whitelist\",\n    outputs: [{ internalType: \"address\", name: \"\", type: \"address\" }],\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// https://github.com/ethereum-optimism/optimism/blob/2bd49730fa8d2c10953873f0ccc792198a49d5c9/packages/contracts/contracts/optimistic-ethereum/iOVM/bridge/tokens/iOVM_L1StandardBridge.sol\nconst OVM_L1StandardBridgeABI = [\n  \"function depositETH(uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function depositETHTo(address _to,uint32 _l2Gas,bytes calldata _data) external payable\",\n  \"function finalizeETHWithdrawal (address _from,address _to,uint _amount,bytes calldata _data) external\",\n];\n\nconst L1BridgeMetadata = {\n  // Arbitrium Contract's\n  44010: {\n    contracts: {\n      Inbox: {\n        address: \"0xA4d796Ad4e79aFB703340a596AEd88f8a5924183\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  4: {\n    contracts: {\n      Inbox: {\n        address: \"0x578bade599406a8fe3d24fd7f7211c0911f5b29e\",\n        abi: ArbitrumInboxABI,\n      },\n    },\n  },\n  // Optimism Contract's\n  31337: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x998abeb3E57409262aE5b751f60747921B33613E\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      OVM_L1StandardBridge: {\n        address: \"0x22F24361D548e5FaAfb36d1437839f080363982B\",\n        abi: OVM_L1StandardBridgeABI,\n      },\n    },\n  },\n};\n","import React, { useState, useMemo } from \"react\";\nimport { Button, Divider, Space, List, Typography, Badge, Spin, Row } from \"antd\";\nimport { MinusOutlined, PlusOutlined } from \"@ant-design/icons\";\nimport { Address } from \"../components\";\nconst { Title, Text } = Typography;\nconst axios = require(\"axios\");\n\nexport default function QuadraticDiplomacyVote({\n  contributorEntries,\n  isVoter,\n  mainnetProvider,\n  currentDistribution,\n  address,\n  userSigner,\n  serverUrl,\n}) {\n  const [selectedContributors, setSelectedContributors] = useState({});\n  const [currentStep, setCurrentStep] = useState(1);\n  const [spentVoteTokens, setSpentVoteTokens] = useState(0);\n  const [isSendingTx, setIsSendingTx] = useState(false);\n\n  if (Object.keys(selectedContributors).length === 0 && currentDistribution.id) {\n    setSelectedContributors(\n      currentDistribution.candidates.reduce((entries, current) => {\n        entries[current] = 0;\n        return entries;\n      }, {}),\n    );\n  }\n\n  const contributors = useMemo(\n    () =>\n      currentDistribution.id &&\n      currentDistribution.candidates.reduce((entries, current) => {\n        entries[current] = 0;\n        return entries;\n      }, {}),\n    [currentDistribution.id],\n  );\n\n  const remainingVoteTokens = useMemo(\n    () => currentDistribution.id && currentDistribution.voteAllocation - spentVoteTokens,\n    [currentDistribution.id, spentVoteTokens],\n  );\n\n  if (!isVoter) {\n    return (\n      <div\n        style={{ border: \"1px solid\", padding: \"40px\", width: 800, margin: \"auto\", marginTop: 64, textAlign: \"left\" }}\n      >\n        <Title level={4} style={{ fontFamily: \"Space Mono\" }}>\n          Access denied\n        </Title>\n        <p>You are not part of the voters of this election.</p>\n      </div>\n    );\n  }\n\n  const handleContributorVote = (e, op, clickedContributorAddress) => {\n    // adjust available vote tokens\n    setSpentVoteTokens(prevSpentVoteTokens => (op === \"add\" ? prevSpentVoteTokens + 1 : prevSpentVoteTokens - 1));\n\n    // update contributor vote tokens\n    setSelectedContributors(prevSelectedContributors => ({\n      ...prevSelectedContributors,\n      [clickedContributorAddress]:\n        op === \"add\"\n          ? Math.min(prevSelectedContributors[clickedContributorAddress] + 1, currentDistribution.voteAllocation)\n          : Math.max(prevSelectedContributors[clickedContributorAddress] - 1, 0),\n    }));\n  };\n\n  const handleSubmitVotes = async () => {\n    const wallets = [];\n    const amounts = [];\n\n    const sortedVotes = Object.keys(selectedContributors).sort();\n\n    const message =\n      \"qdip-vote-\" +\n      currentDistribution.id +\n      address +\n      sortedVotes.join() +\n      sortedVotes.map(voter => selectedContributors[voter]).join();\n\n    const signature = await userSigner.signMessage(message);\n\n    setIsSendingTx(true);\n\n    axios\n      .post(serverUrl + \"distributions/\" + currentDistribution.id + \"/vote\", {\n        address: address,\n        votes: selectedContributors,\n        signature: signature,\n      })\n      .then(response => {\n        console.log(response);\n        setIsSendingTx(false);\n        setSpentVoteTokens(0);\n        setCurrentStep(2);\n      })\n      .catch(e => {\n        console.log(\"Error on vote\");\n        setIsSendingTx(false);\n      });\n  };\n\n  if (!currentDistribution.id) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>No Current Distribution</Title>\n      </div>\n    );\n  }\n\n  if (currentDistribution.id && currentStep != 2 && currentDistribution.votes && currentDistribution.votes[address]) {\n    setSelectedContributors(currentDistribution.votes[address]);\n    setCurrentStep(2);\n  }\n\n  return (\n    <div style={{ border: \"1px solid\", padding: \"40px\", width: 800, margin: \"auto\", marginTop: 64, textAlign: \"left\" }}>\n      <Title level={3}>Distribution {currentDistribution.id}</Title>\n      <Divider />\n      {currentStep === 1 ? (\n        <List\n          size=\"large\"\n          itemLayout=\"horizontal\"\n          style={{ width: \"600px\", margin: \"0 auto\" }}\n          header={\n            <Space direction=\"vertical\">\n              <Title level={4} style={{ fontFamily: \"Space Mono\" }}>\n                Allocate votes\n              </Title>\n              <Title level={5}>\n                Remaining vote tokens:&nbsp;&nbsp;\n                <Badge\n                  showZero\n                  overflowCount={1000}\n                  count={remainingVoteTokens}\n                  style={{ backgroundColor: \"#52c41a\" }}\n                />\n              </Title>\n            </Space>\n          }\n          footer={\n            <Row justify=\"end\">\n              {!isSendingTx ? (\n                <>\n                  <Button type=\"primary\" onClick={handleSubmitVotes}>\n                    Commit votes\n                  </Button>\n                </>\n              ) : (\n                <Spin size=\"small\" />\n              )}\n            </Row>\n          }\n          dataSource={Object.entries(selectedContributors)}\n          renderItem={([contributorAddress, contributor]) => (\n            <>\n              <Badge.Ribbon\n                showZero\n                overflowCount={1000}\n                text={<Title level={5}>{contributor} </Title>}\n                style={{\n                  backgroundColor: contributor ? \"#eb2f96\" : \"grey\",\n                  height: 24,\n                  width: 30,\n                  marginRight: -5,\n                }}\n              />\n              <List.Item\n                key={contributorAddress}\n                extra={\n                  <Button.Group>\n                    <Button\n                      danger\n                      ghost\n                      onClick={e => handleContributorVote(e, \"remove\", contributorAddress)}\n                      disabled={!contributor}\n                    >\n                      <MinusOutlined />\n                    </Button>\n                    <Button\n                      type=\"primary\"\n                      ghost\n                      onClick={e => handleContributorVote(e, \"add\", contributorAddress)}\n                      disabled={!remainingVoteTokens}\n                    >\n                      <PlusOutlined />\n                    </Button>\n                  </Button.Group>\n                }\n              >\n                <List.Item.Meta\n                  avatar={\n                    <Address address={contributorAddress} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />\n                  }\n                />\n              </List.Item>\n            </>\n          )}\n        />\n      ) : (\n        currentStep === 2 && (\n          <>\n            <Title level={3} style={{ fontFamily: \"Space Mono\" }}>\n              Thank you for voting.\n            </Title>\n            <p>The allocation to this workstream will be informed by your votes.</p>\n            <Title level={5} style={{ marginTop: \"24px\" }}>\n              Your votes:\n            </Title>\n            {Object.entries(selectedContributors).map(([contributorAddress, voteTokens]) => (\n              <div key={contributorAddress}>\n                <Address address={contributorAddress} fontSize={16} size=\"short\" ensProvider={mainnetProvider} /> (\n                <Text>{voteTokens}</Text>)\n              </div>\n            ))}\n          </>\n        )\n      )}\n    </div>\n  );\n}\n","import React, { useState, useMemo } from \"react\";\nimport { Alert, Input, Button, Divider, Space, Typography, Table, Tag, Select, notification, Spin } from \"antd\";\nimport { CheckCircleTwoTone, CloseCircleTwoTone } from \"@ant-design/icons\";\nimport { Address } from \"../components\";\nconst { Text, Title } = Typography;\nconst { ethers } = require(\"ethers\");\nconst axios = require(\"axios\");\n\nconst TOKENS = [\"ETH\", \"GTC\", \"DAI\"];\nconst REWARD_STATUS = {\n  PENDING: \"reward_status.pending\",\n  COMPLETED: \"reward_status.completed\",\n  FAILED: \"reward_status.failed\",\n};\nconst VOTING_TYPES = [\"Quadratic\", \"Common\"];\n\nexport default function QuadraticDiplomacyReward({\n  tx,\n  writeContracts,\n  userSigner,\n  isAdmin,\n  mainnetProvider,\n  currentDistribution,\n  serverUrl,\n  address,\n}) {\n  const [totalRewardAmount, setTotalRewardAmount] = useState(0);\n  const [rewardStatus, setRewardStatus] = useState(REWARD_STATUS.PENDING);\n  const [selectedToken, setSelectedToken] = useState(\"\");\n  const [isSendingTx, setIsSendingTx] = useState(false);\n  const [votingType, setVotingType] = useState(\"Quadratic\");\n\n  const [voteResults, totalVotes, totalSqrtVotes, totalSquare] = useMemo(() => {\n    const votes = {};\n    let voteCount = 0;\n    let sqrts = 0;\n    let total = 0;\n\n    if (!currentDistribution.id) {\n      return [0, 0, 0, 0];\n    }\n\n    Object.entries(currentDistribution.votes).forEach(memberVotes => {\n      const votingAddress = memberVotes[0];\n      const selectedContributors = memberVotes[1];\n\n      Object.entries(selectedContributors).forEach(voteInfo => {\n        const contributor = voteInfo[0];\n        const vote = voteInfo[1];\n        let sqrtVote = Math.sqrt(vote);\n        if (votingType === \"Common\") {\n          sqrtVote = vote;\n        }\n\n        if (!votes[contributor]) {\n          votes[contributor] = {\n            vote: 0,\n            // Sum of the square root of the votes for each member.\n            sqrtVote: 0,\n          };\n        }\n\n        votes[contributor].sqrtVote += sqrtVote;\n        votes[contributor].vote += vote;\n\n        voteCount += vote;\n        // Total sum of the sum of the square roots of the votes for all members.\n        sqrts += sqrtVote;\n      });\n    });\n\n    Object.entries(votes).forEach(([wallet, { sqrtVote }]) => {\n      if (votingType === \"Common\") {\n        total += sqrtVote;\n      } else {\n        total += Math.pow(sqrtVote, 2);\n      }\n    });\n\n    return [votes, voteCount, sqrts, total];\n  }, [\n    currentDistribution.id,\n    currentDistribution.id && Object.keys(currentDistribution.votes).sort().join(),\n    votingType,\n  ]);\n\n  const votersInfo = useMemo(() => {\n    const voters = [];\n\n    if (!currentDistribution.id) {\n      return voters;\n    }\n\n    currentDistribution.members.forEach(member => {\n      const hasVoted = Object.keys(currentDistribution.votes).includes(member);\n      let totalVotes = 0;\n      let verifiedSignature = false;\n\n      if (hasVoted) {\n        const selectedContributors = currentDistribution.votes[member];\n\n        const sortedVotes = Object.keys(selectedContributors).sort();\n\n        const message =\n          \"qdip-vote-\" +\n          currentDistribution.id +\n          member +\n          sortedVotes.join() +\n          sortedVotes.map(voter => selectedContributors[voter]).join();\n\n        const recovered = ethers.utils.verifyMessage(message, currentDistribution.votesSignatures[member]);\n        verifiedSignature = recovered === member;\n\n        Object.entries(selectedContributors).forEach(voteInfo => {\n          totalVotes += voteInfo[1];\n        });\n      }\n\n      voters.push({\n        address: member,\n        vote: totalVotes,\n        hasVoted: hasVoted,\n        verifiedSignature: verifiedSignature,\n      });\n    });\n\n    return voters;\n  }, [currentDistribution.id, currentDistribution.id && Object.keys(currentDistribution.votes).sort().join()]);\n\n  const columns = useMemo(\n    () => [\n      {\n        title: \"Address\",\n        dataIndex: \"address\",\n        render: address => <Address address={address} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />,\n      },\n      {\n        title: \"Nº of votes\",\n        dataIndex: \"vote\",\n        defaultSortOrder: \"descend\",\n        align: \"center\",\n        sorter: (a, b) => a.vote - b.vote,\n      },\n      {\n        title: votingType + \" votes\",\n        dataIndex: \"votesSqrt\",\n        align: \"center\",\n        sorter: (a, b) => a.votesSqrt - b.votesSqrt,\n        render: (votesSqrt, record) => (\n          <p>\n            {votesSqrt.toFixed(2)} <Text type=\"secondary\">({(record.votesShare * 100).toFixed(2)}%)</Text>\n          </p>\n        ),\n      },\n      {\n        title: \"Reward Amount\",\n        dataIndex: \"rewardAmount\",\n        defaultSortOrder: \"descend\",\n        align: \"center\",\n        sorter: (a, b) => a.rewardAmount - b.rewardAmount,\n        render: rewardAmount => (\n          <p>\n            {rewardAmount.toFixed(2)} {selectedToken.toUpperCase()}\n          </p>\n        ),\n      },\n    ],\n    [mainnetProvider, selectedToken],\n  );\n\n  const columnsVoters = useMemo(\n    () => [\n      {\n        title: \"Address\",\n        dataIndex: \"address\",\n        render: address => <Address address={address} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />,\n      },\n      {\n        title: \"Nº of votes\",\n        dataIndex: \"vote\",\n        defaultSortOrder: \"descend\",\n        align: \"center\",\n        sorter: (a, b) => a.vote - b.vote,\n      },\n      {\n        title: \"Has Voted\",\n        dataIndex: \"hasVoted\",\n        align: \"center\",\n        filters: [\n          { text: \"Yes\", value: true },\n          { text: \"No\", value: false },\n        ],\n        onFilter: (value, record) => record.hasVoted === value,\n        render: hasVoted =>\n          hasVoted ? <CheckCircleTwoTone twoToneColor=\"#52c41a\" /> : <CloseCircleTwoTone twoToneColor=\"red\" />,\n      },\n      {\n        title: \"Verified\",\n        dataIndex: \"verifiedSignature\",\n        align: \"center\",\n        filters: [\n          { text: \"Yes\", value: true },\n          { text: \"No\", value: false },\n        ],\n        onFilter: (value, record) => record.verifiedSignature === value,\n        render: verifiedSignature =>\n          verifiedSignature ? <CheckCircleTwoTone twoToneColor=\"#52c41a\" /> : <CloseCircleTwoTone twoToneColor=\"red\" />,\n      },\n    ],\n    [mainnetProvider],\n  );\n\n  const dataSource = useMemo(\n    () =>\n      Object.entries(voteResults).map(([address, contributor]) => ({\n        key: address,\n        address: address,\n        vote: contributor?.vote,\n        votesSqrt: contributor?.sqrtVote,\n        votesShare:\n          votingType === \"Quadratic\" ? contributor?.sqrtVote / totalSqrtVotes : contributor?.sqrtVote / totalSquare,\n        rewardAmount:\n          votingType === \"Quadratic\"\n            ? (contributor?.sqrtVote / totalSqrtVotes) * totalRewardAmount\n            : (contributor?.sqrtVote / totalSquare) * totalRewardAmount,\n        hasVoted: contributor?.hasVoted,\n        verifiedSignature: contributor?.verifiedSignature,\n      })),\n    [voteResults, totalSquare, totalRewardAmount],\n  );\n\n  const missingVotingMembers = votersInfo.filter(voter => !voter.hasVoted);\n\n  const handleFinishDistribution = async finishDistribution => {\n    const message = \"qdip-finish-\" + currentDistribution.id + address;\n    const signature = await userSigner.signMessage(message);\n\n    setIsSendingTx(true);\n\n    axios\n      .post(serverUrl + \"distributions/\" + currentDistribution.id + \"/finish\", {\n        address: address,\n        signature: signature,\n      })\n      .then(response => {\n        setIsSendingTx(false);\n        setRewardStatus(REWARD_STATUS.COMPLETED);\n      })\n      .catch(e => {\n        console.log(\"Error finishing the distribution\");\n        setIsSendingTx(false);\n      });\n  };\n\n  const handlePayment = async function payFromSelf(close) {\n    // ToDo. Do some validation (non-empty elements, etc.)\n    const wallets = [];\n    const amounts = [];\n\n    setIsSendingTx(true);\n    // choose appropriate function from contract\n    let func;\n    if (selectedToken === \"ETH\") {\n      dataSource.forEach(({ address, rewardAmount }) => {\n        wallets.push(address);\n        // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\n        amounts.push(ethers.utils.parseEther((Math.floor(rewardAmount * 10000) / 10000).toString()));\n      });\n\n      func = payFromSelf\n        ? // payable functions need an `overrides` param.\n          // relevant docs: https://docs.ethers.io/v5/api/contract/contract/#Contract-functionsCall\n          writeContracts.QuadraticDiplomacyContract.sharePayedETH(wallets, amounts, {\n            value: ethers.utils.parseEther(totalRewardAmount.toString()),\n          })\n        : writeContracts.QuadraticDiplomacyContract.shareETH(wallets, amounts);\n    } else {\n      const tokenAddress = writeContracts[selectedToken].address;\n      const userAddress = await userSigner.getAddress();\n      const tokenContract = writeContracts[selectedToken].connect(userSigner);\n      // approve only if have to pay from self wallet\n      if (payFromSelf) {\n        await tx(\n          tokenContract.approve(\n            writeContracts.QuadraticDiplomacyContract.address,\n            ethers.utils.parseUnits(totalRewardAmount.toString(), 18),\n          ),\n        );\n      }\n\n      dataSource.forEach(({ address, rewardAmount }) => {\n        wallets.push(address);\n        // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\n        amounts.push(ethers.utils.parseUnits((Math.floor(rewardAmount * 10000) / 10000).toString()));\n      });\n      func = payFromSelf\n        ? writeContracts.QuadraticDiplomacyContract.sharePayedToken(wallets, amounts, tokenAddress, userAddress)\n        : writeContracts.QuadraticDiplomacyContract.shareToken(wallets, amounts, tokenAddress);\n    }\n\n    await tx(func, update => {\n      // ToDo. Handle errors.\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n        notification.success({\n          message: \"Payment sent!\",\n        });\n\n        if (close) {\n          handleFinishDistribution();\n        } else {\n          setIsSendingTx(false);\n        }\n      } else if (update.error) {\n        setIsSendingTx(false);\n      }\n    });\n  };\n\n  if (!isAdmin) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>Access denied</Title>\n        <p>Only admins can send rewards.</p>\n      </div>\n    );\n  }\n\n  if (!currentDistribution.id) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>No Current Distribution</Title>\n      </div>\n    );\n  }\n\n  return (\n    <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 1000, margin: \"auto\", marginTop: 64 }}>\n      <Title level={3}>Reward Contributors {currentDistribution.id}</Title>\n      <Title level={5}>\n        Total votes:&nbsp;&nbsp;\n        <Tag color=\"#000000\">{totalVotes}</Tag>\n      </Title>\n      <Title level={5}>\n        Total {votingType} votes:&nbsp;&nbsp;\n        <Tag color=\"#52c41a\">{totalSqrtVotes.toFixed(2)}</Tag>\n        <Select defaultValue={votingType} onChange={setVotingType}>\n          {VOTING_TYPES.map(vType => (\n            <Select.Option value={vType}>{vType}</Select.Option>\n          ))}\n        </Select>\n      </Title>\n      <Divider />\n      <Space split>\n        <Input\n          type=\"number\"\n          disabled={!selectedToken} // disable if no token selected\n          value={totalRewardAmount}\n          addonBefore=\"Total Amount to Distribute\"\n          addonAfter={\n            <Select defaultValue=\"Select token...\" onChange={setSelectedToken}>\n              {TOKENS.map(tokenName => (\n                <Select.Option value={tokenName}>{tokenName}</Select.Option>\n              ))}\n            </Select>\n          }\n          onChange={e => setTotalRewardAmount(e.target.value.toLowerCase())}\n        />\n      </Space>\n      <Divider />\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\n        <Title level={4}>Voters</Title>\n        {missingVotingMembers?.length > 0 && (\n          <Alert\n            showIcon\n            type=\"warning\"\n            message={<Title level={5}>{missingVotingMembers.length} members has not voted yet.</Title>}\n          />\n        )}\n        <Table\n          bordered\n          dataSource={votersInfo}\n          columns={columnsVoters}\n          pagination={{ pageSize: 100, hideOnSinglePage: true }}\n        />\n        <Divider />\n        <Title level={4}>Candidates</Title>\n        <Table\n          bordered\n          dataSource={dataSource}\n          columns={columns}\n          pagination={{ pageSize: 100, hideOnSinglePage: true }}\n          footer={() =>\n            !isSendingTx ? (\n              <Space>\n                <Button\n                  onClick={() => handlePayment(false)}\n                  disabled={rewardStatus === REWARD_STATUS.COMPLETED || !totalRewardAmount || !dataSource?.length}\n                  size=\"large\"\n                >\n                  Pay 💸\n                </Button>\n                <Button\n                  onClick={() => handlePayment(true)}\n                  disabled={rewardStatus === REWARD_STATUS.COMPLETED || !totalRewardAmount || !dataSource?.length}\n                  size=\"large\"\n                >\n                  Pay and Close 💸🔒\n                </Button>\n                <Button\n                  onClick={() => {\n                    if (\n                      confirm(\n                        \"Are you sure you want to close the distribution? You can't send payments after a distribution is closed.\",\n                      )\n                    ) {\n                      handleFinishDistribution();\n                    }\n                  }}\n                  size=\"large\"\n                >\n                  Just Close 🔒\n                </Button>\n              </Space>\n            ) : (\n              <Spin size=\"small\" />\n            )\n          }\n        />\n      </Space>\n      <Divider />\n    </div>\n  );\n}\n","import React, { useState } from \"react\";\nimport { Form, Input, Divider, Button, Typography, Row, Col, Spin } from \"antd\";\nimport { PlusOutlined } from \"@ant-design/icons\";\nimport { DeleteOutlined } from \"@ant-design/icons\";\nimport { AddressInput } from \"../components\";\nconst { Title } = Typography;\nconst axios = require(\"axios\");\nconst { ethers } = require(\"ethers\");\n\nexport default function QuadraticDiplomacyCreate({\n  mainnetProvider,\n  serverUrl,\n  address,\n  userSigner,\n  currentDistribution,\n  setCurrentDistribution,\n  isAdmin,\n}) {\n  const [voters, setVoters] = useState([\"\"]);\n  const [candidates, setCandidates] = useState([\"\"]);\n  const [voteAllocation, setVoteAllocation] = useState(0);\n  const [isSendingTx, setIsSendingTx] = useState(false);\n  const [form] = Form.useForm();\n\n  const handleAddVoters = async () => {\n    const text = await navigator.clipboard.readText();\n    const addresses = text.split(\",\");\n    if (voters.length === 1 && voters[0] === \"\") {\n      setVoters([]);\n    }\n    addresses.forEach(voteAddress => {\n      try {\n        const voteAddressWithChecksum = ethers.utils.getAddress(voteAddress);\n        if (!voters.includes(voteAddressWithChecksum)) {\n          setVoters(prevVoters => [...prevVoters, voteAddressWithChecksum]);\n        }\n      } catch (error) {\n        console.log(\"Error parsing address \", voteAddress);\n        console.log(error);\n      }\n    });\n  };\n\n  const handleAddCandidates = async () => {\n    const text = await navigator.clipboard.readText();\n    const addresses = text.split(\",\");\n    if (voters.length === 1 && voters[0] === \"\") {\n      setVoters([]);\n    }\n    addresses.forEach(candidateAddress => {\n      try {\n        const candidateAddressWithChecksum = ethers.utils.getAddress(candidateAddress);\n        if (!candidates.includes(candidateAddressWithChecksum)) {\n          setCandidates(prevCandidates => [...prevCandidates, candidateAddressWithChecksum]);\n        }\n      } catch (error) {\n        console.log(\"Error parsing address \", candidateAddress);\n        console.log(error);\n      }\n    });\n  };\n\n  const handleSubmit = async () => {\n    // ToDo. Check if addresses are valid.\n    setIsSendingTx(true);\n    const filteredVoters = voters.filter(voter => voter);\n    const filteredCandidates = candidates.filter(voter => voter);\n\n    let message = \"qdip-creation-\" + address;\n    console.log(\"Message:\" + message);\n\n    const signature = await userSigner.signMessage(message);\n\n    axios\n      .post(serverUrl + \"distributions\", {\n        address: address,\n        voteAllocation: voteAllocation,\n        members: filteredVoters,\n        candidates: filteredCandidates,\n        signature: signature,\n      })\n      .then(response => {\n        console.log(response);\n        setCurrentDistribution(response);\n        setVoters([\"\"]);\n        setVoteAllocation(0);\n        form.resetFields();\n        setIsSendingTx(false);\n      })\n      .catch(e => {\n        console.log(\"Error on distributions post\");\n      });\n  };\n\n  if (!isAdmin) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>Access denied</Title>\n        <p>Only admins can create distributions.</p>\n      </div>\n    );\n  }\n\n  if (currentDistribution.id) {\n    return (\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n        <Title level={4}>Distribution {currentDistribution.id} in progress</Title>\n      </div>\n    );\n  }\n\n  return (\n    <div\n      style={{ border: \"1px solid\", padding: \"40px\", width: \"800px\", margin: \"64px auto 0px auto\", textAlign: \"left\" }}\n    >\n      <Title level={3} style={{ fontFamily: \"Space Mono\" }}>\n        Add members\n      </Title>\n      <Divider />\n      <Form\n        form={form}\n        name=\"basic\"\n        onFinish={handleSubmit}\n        labelCol={{ span: 8 }}\n        wrapperCol={{ span: 16 }}\n        layout=\"horizontal\"\n      >\n        <Form.Item\n          label=\"Vote Allocation\"\n          name=\"voteCredit\"\n          style={{ textAlign: \"left\" }}\n          tooltip=\"Number of votes each voter will have\"\n        >\n          <Input\n            type=\"number\"\n            placeholder=\"100\"\n            style={{ width: \"30%\" }}\n            onChange={event => setVoteAllocation(event.target.value)}\n          />\n        </Form.Item>\n        <Divider />\n        <Button type=\"primary\" block onClick={() => handleAddVoters()}>\n          Add Voters from Clipboard\n        </Button>\n        <Divider />\n        {voters.map((_, index) => (\n          <VoterInput\n            key={index}\n            index={index}\n            setVoters={setVoters}\n            voters={voters}\n            mainnetProvider={mainnetProvider}\n          />\n        ))}\n        <Form.Item style={{ justifyContent: \"center\", marginTop: 24 }}>\n          {/*ToDo. Restart ant form state (the browser is keeping filled-removed elements)*/}\n          <Button\n            type=\"dashed\"\n            block\n            icon={<PlusOutlined />}\n            onClick={() => setVoters(prevVoters => [...prevVoters, \"\"])}\n          >\n            Add Voter\n          </Button>\n        </Form.Item>\n        <Divider />\n        <Button type=\"primary\" block onClick={() => handleAddCandidates()}>\n          Add Candidates from Clipboard\n        </Button>\n        <Divider />\n        {candidates.map((_, index) => (\n          <VoterInput\n            key={index}\n            index={index}\n            setVoters={setCandidates}\n            voters={candidates}\n            mainnetProvider={mainnetProvider}\n          />\n        ))}\n        <Form.Item style={{ justifyContent: \"center\", marginTop: 24 }}>\n          {/*ToDo. Restart ant form state (the browser is keeping filled-removed elements)*/}\n          <Button\n            type=\"dashed\"\n            block\n            icon={<PlusOutlined />}\n            onClick={() => setCandidates(prevCandidates => [...prevCandidates, \"\"])}\n          >\n            Add Candidate\n          </Button>\n        </Form.Item>\n        <Divider />\n        <Form.Item wrapperCol={{ offset: 16, span: 8 }}>\n          {!isSendingTx ? (\n            <Button type=\"primary\" htmlType=\"submit\" block disabled={!voteAllocation}>\n              Submit\n            </Button>\n          ) : (\n            <Spin size=\"small\" />\n          )}\n        </Form.Item>\n      </Form>\n    </div>\n  );\n}\n\nconst VoterInput = ({ index, voters, setVoters, mainnetProvider }) => {\n  return (\n    <>\n      <Form.Item label={`Voter ${index + 1}`} name={`address[${index}]`} style={{ marginBottom: \"16px\" }}>\n        <Row gutter={8} align=\"middle\">\n          <Col span={16}>\n            <AddressInput\n              autoFocus\n              ensProvider={mainnetProvider}\n              placeholder=\"Enter address\"\n              value={voters[index]}\n              onChange={address => {\n                setVoters(prevVoters => {\n                  const nextVoters = [...prevVoters];\n                  nextVoters[index] = address;\n                  return nextVoters;\n                });\n              }}\n            />\n          </Col>\n          <Col span={8}>\n            <DeleteOutlined\n              style={{ cursor: \"pointer\", color: \"#ff6666\" }}\n              onClick={event => {\n                setVoters(prevVoters => {\n                  const nextVoters = [...prevVoters];\n                  return nextVoters.filter((_, i) => i !== index);\n                });\n              }}\n            />\n          </Col>\n        </Row>\n      </Form.Item>\n    </>\n  );\n};\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport WalletLink from \"walletlink\";\nimport { Alert, Button, Col, Menu, Row, Spin, Typography } from \"antd\";\nimport \"antd/dist/antd.css\";\nimport React, { useCallback, useEffect, useState } from \"react\";\nimport { BrowserRouter, Link, Route, Switch } from \"react-router-dom\";\nimport Web3Modal from \"web3modal\";\nimport \"./App.css\";\nimport { Account, Contract, Faucet, GasGauge, Header, Ramp, ThemeSwitch } from \"./components\";\nimport { INFURA_ID, NETWORK, NETWORKS } from \"./constants\";\nimport { Transactor } from \"./helpers\";\nimport {\n  useBalance,\n  useContractLoader,\n  useContractReader,\n  useEventListener,\n  useExchangePrice,\n  useGasPrice,\n  useUserSigner,\n  useCurrentDistribution,\n} from \"./hooks\";\nimport QuadraticDiplomacyVote from \"./views/QuadraticDiplomacyVote\";\nimport QuadraticDiplomacyReward from \"./views/QuadraticDiplomacyReward\";\nimport QuadraticDiplomacyCreate from \"./views/QuadraticDiplomacyCreate\";\n\nconst { ethers } = require(\"ethers\");\nconst { Title } = Typography;\n/*\n    Welcome to 🏗 scaffold-eth !\n\n    Code:\n    https://github.com/austintgriffith/scaffold-eth\n\n    Support:\n    https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\n    or DM @austingriffith on twitter or telegram\n\n    You should get your own Infura.io ID and put it in `constants.js`\n    (this is your connection to the main Ethereum network for ENS etc.)\n\n\n    🌏 EXTERNAL CONTRACTS:\n    You can also bring in contract artifacts in `constants.js`\n    (and then use the `useExternalContractLoader()` hook!)\n*/\n\n/// 📡 What chain are your contracts deployed to?\nconst targetNetwork = NETWORKS.ropsten;\n\nconst serverUrl = \"https://ibc-voting.herokuapp.com/\";\n\n// 😬 Sorry for all the console logging\nconst DEBUG = true;\nconst NETWORKCHECK = true;\n\n// 🛰 providers\nif (DEBUG) console.log(\"📡 Connecting to Mainnet Ethereum\");\n// const mainnetProvider = getDefaultProvider(\"mainnet\", { infura: INFURA_ID, etherscan: ETHERSCAN_KEY, quorum: 1 });\n// const mainnetProvider = new InfuraProvider(\"mainnet\",INFURA_ID);\n//\n// attempt to connect to our own scaffold eth rpc and if that fails fall back to infura...\n// Using StaticJsonRpcProvider as the chainId won't change see https://github.com/ethers-io/ethers.js/issues/901\nconst scaffoldEthProvider = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://rpc.scaffoldeth.io:48544\")\n  : null;\nconst mainnetInfura = navigator.onLine\n  ? new ethers.providers.StaticJsonRpcProvider(\"https://mainnet.infura.io/v3/\" + INFURA_ID)\n  : null;\n// ( ⚠️ Getting \"failed to meet quorum\" errors? Check your INFURA_I )\n\n// 🏠 Your local provider is usually pointed at your local blockchain\nconst localProviderUrl = targetNetwork.rpcUrl;\n// as you deploy to other networks you can set REACT_APP_PROVIDER=https://dai.poa.network in packages/react-app/.env\nconst localProviderUrlFromEnv = process.env.REACT_APP_PROVIDER ? process.env.REACT_APP_PROVIDER : localProviderUrl;\nif (DEBUG) console.log(\"🏠 Connecting to provider:\", localProviderUrlFromEnv);\nconst localProvider = new ethers.providers.StaticJsonRpcProvider(localProviderUrlFromEnv);\n\n// 🔭 block explorer URL\nconst blockExplorer = targetNetwork.blockExplorer;\n\n// Coinbase walletLink init\nconst walletLink = new WalletLink({\n  appName: \"coinbase\",\n});\n\n// WalletLink provider\nconst walletLinkProvider = walletLink.makeWeb3Provider(`https://mainnet.infura.io/v3/${INFURA_ID}`, 1);\n\n/*\n  Web3 modal helps us \"connect\" external wallets:\n*/\nconst web3Modal = new Web3Modal({\n  network: \"mainnet\", // Optional. If using WalletConnect on xDai, change network to \"xdai\" and add RPC info below for xDai chain.\n  cacheProvider: true, // optional\n  theme: \"light\", // optional. Change to \"dark\" for a dark theme.\n  providerOptions: {\n    walletconnect: {\n      package: WalletConnectProvider, // required\n      options: {\n        bridge: \"https://polygon.bridge.walletconnect.org\",\n        infuraId: INFURA_ID,\n        rpc: {\n          1: `https://mainnet.infura.io/v3/${INFURA_ID}`, // mainnet // For more WalletConnect providers: https://docs.walletconnect.org/quick-start/dapps/web3-provider#required\n          100: \"https://dai.poa.network\", // xDai\n        },\n      },\n    },\n    /*torus: {\n      package: Torus,\n    },*/\n    \"custom-walletlink\": {\n      display: {\n        logo: \"https://play-lh.googleusercontent.com/PjoJoG27miSglVBXoXrxBSLveV6e3EeBPpNY55aiUUBM9Q1RCETKCOqdOkX2ZydqVf0\",\n        name: \"Coinbase\",\n        description: \"Connect to Coinbase Wallet (not Coinbase App)\",\n      },\n      package: walletLinkProvider,\n      connector: async (provider, options) => {\n        await provider.enable();\n        return provider;\n      },\n    },\n  },\n});\n\nfunction App() {\n  const mainnetProvider = scaffoldEthProvider && scaffoldEthProvider._network ? scaffoldEthProvider : mainnetInfura;\n\n  const [injectedProvider, setInjectedProvider] = useState();\n  const [address, setAddress] = useState();\n\n  const logoutOfWeb3Modal = async () => {\n    await web3Modal.clearCachedProvider();\n    if (injectedProvider && injectedProvider.provider && typeof injectedProvider.provider.disconnect == \"function\") {\n      await injectedProvider.provider.disconnect();\n    }\n    setTimeout(() => {\n      window.location.reload();\n    }, 1);\n  };\n\n  /* 💵 This hook will get the price of ETH from 🦄 Uniswap: */\n  const price = useExchangePrice(targetNetwork, mainnetProvider);\n\n  /* 🔥 This hook will get the price of Gas from ⛽️ EtherGasStation */\n  const gasPrice = useGasPrice(targetNetwork, \"fast\");\n  // Use your injected provider from 🦊 Metamask or if you don't have it then instantly generate a 🔥 burner wallet.\n  const userSigner = useUserSigner(injectedProvider, localProvider);\n\n  useEffect(() => {\n    async function getAddress() {\n      if (userSigner) {\n        const newAddress = await userSigner.getAddress();\n        setAddress(newAddress);\n      }\n    }\n    getAddress();\n  }, [userSigner]);\n\n  const [currentDistribution, setCurrentDistribution] = useCurrentDistribution(serverUrl);\n  const isVoter =\n    address && currentDistribution && currentDistribution.members && currentDistribution.members.includes(address);\n\n  // You can warn the user if you would like them to be on a specific network\n  const localChainId = localProvider && localProvider._network && localProvider._network.chainId;\n  const selectedChainId =\n    userSigner && userSigner.provider && userSigner.provider._network && userSigner.provider._network.chainId;\n\n  // For more hooks, check out 🔗eth-hooks at: https://www.npmjs.com/package/eth-hooks\n\n  // The transactor wraps transactions and provides notificiations\n  const tx = Transactor(userSigner, gasPrice);\n\n  // Faucet Tx can be used to send funds from the faucet\n  const faucetTx = Transactor(localProvider, gasPrice);\n\n  // 🏗 scaffold-eth is full of handy hooks like this one to get your balance:\n  const yourLocalBalance = useBalance(localProvider, address);\n\n  // Just plug in different 🛰 providers to get your balance on different chains:\n  const yourMainnetBalance = useBalance(mainnetProvider, address);\n\n  // Load in your local 📝 contract and read a value from it:\n  const readContracts = useContractLoader(localProvider);\n\n  // If you want to make 🔐 write transactions to your contracts, use the userSigner:\n  const writeContracts = useContractLoader(userSigner, { chainId: localChainId });\n\n  const [adminRole, setAdminRole] = useState();\n  const [isAdmin, setIsAdmin] = useState(false);\n\n  useEffect(() => {\n    const updateRoleAdmin = async () => {\n      if (DEBUG) console.log(\"Updating admin role...\");\n      if (readContracts && readContracts.QuadraticDiplomacyContract) {\n        const adminRoleFromContract = await readContracts.QuadraticDiplomacyContract.DEFAULT_ADMIN_ROLE();\n        setAdminRole(adminRoleFromContract);\n        if (DEBUG) console.log(\"Admin role updated!\");\n      }\n    };\n    updateRoleAdmin();\n  }, [address, readContracts]);\n\n  useEffect(() => {\n    const updateAdmin = async () => {\n      if (DEBUG) console.log(\"Updating admin...\");\n      if (readContracts && readContracts.QuadraticDiplomacyContract && adminRole) {\n        const isAdminFromContract = await readContracts.QuadraticDiplomacyContract.hasRole(adminRole, address);\n        setIsAdmin(isAdminFromContract);\n        if (DEBUG) console.log(\"Admin updated!\");\n      }\n    };\n    updateAdmin();\n  }, [address, readContracts, adminRole]);\n\n  //\n  // 🧫 DEBUG 👨🏻‍🔬\n  //\n  useEffect(() => {\n    if (\n      DEBUG &&\n      mainnetProvider &&\n      address &&\n      selectedChainId &&\n      yourLocalBalance &&\n      yourMainnetBalance &&\n      readContracts &&\n      writeContracts\n    ) {\n      console.log(\"_____________________________________ 🏗 scaffold-eth _____________________________________\");\n      console.log(\"🌎 mainnetProvider\", mainnetProvider);\n      console.log(\"🏠 localChainId\", localChainId);\n      console.log(\"👩‍💼 selected address:\", address);\n      console.log(\"🕵🏻‍♂️ selectedChainId:\", selectedChainId);\n      console.log(\"💵 yourLocalBalance\", yourLocalBalance ? ethers.utils.formatEther(yourLocalBalance) : \"...\");\n      console.log(\"💵 yourMainnetBalance\", yourMainnetBalance ? ethers.utils.formatEther(yourMainnetBalance) : \"...\");\n      console.log(\"📝 readContracts\", readContracts);\n      console.log(\"🔐 writeContracts\", writeContracts);\n    }\n  }, [mainnetProvider, address, selectedChainId, yourLocalBalance, yourMainnetBalance, readContracts, writeContracts]);\n\n  let networkDisplay = \"\";\n  if (NETWORKCHECK && localChainId && selectedChainId && localChainId !== selectedChainId) {\n    const networkSelected = NETWORK(selectedChainId);\n    const networkLocal = NETWORK(localChainId);\n    if (selectedChainId === 1337 && localChainId === 31337) {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network ID\"\n            description={\n              <div>\n                You have <b>chain id 1337</b> for localhost and you need to change it to <b>31337</b> to work with\n                HardHat.\n                <div>(MetaMask -&gt; Settings -&gt; Networks -&gt; Chain ID -&gt; 31337)</div>\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    } else {\n      networkDisplay = (\n        <div style={{ zIndex: 2, position: \"absolute\", right: 0, top: 60, padding: 16 }}>\n          <Alert\n            message=\"⚠️ Wrong Network\"\n            description={\n              <div>\n                You have <b>{networkSelected && networkSelected.name}</b> selected and you need to be on{\" \"}\n                <Button\n                  onClick={async () => {\n                    const ethereum = window.ethereum;\n                    const data = [\n                      {\n                        chainId: \"0x\" + targetNetwork.chainId.toString(16),\n                        chainName: targetNetwork.name,\n                        nativeCurrency: targetNetwork.nativeCurrency,\n                        rpcUrls: [targetNetwork.rpcUrl],\n                        blockExplorerUrls: [targetNetwork.blockExplorer],\n                      },\n                    ];\n                    console.log(\"data\", data);\n                    let switchTx;\n                    // https://docs.metamask.io/guide/rpc-api.html#other-rpc-methods\n                    try {\n                      switchTx = await ethereum.request({\n                        method: \"wallet_switchEthereumChain\",\n                        params: [{ chainId: data[0].chainId }],\n                      });\n                    } catch (switchError) {\n                      // not checking specific error code, because maybe we're not using MetaMask\n                      try {\n                        switchTx = await ethereum.request({\n                          method: \"wallet_addEthereumChain\",\n                          params: data,\n                        });\n                      } catch (addError) {\n                        // handle \"add\" error\n                      }\n                    }\n\n                    if (switchTx) {\n                      console.log(switchTx);\n                    }\n                  }}\n                >\n                  <b>{networkLocal && networkLocal.name}</b>\n                </Button>\n                .\n              </div>\n            }\n            type=\"error\"\n            closable={false}\n          />\n        </div>\n      );\n    }\n  } else {\n    networkDisplay = (\n      <div style={{ zIndex: -1, position: \"absolute\", right: 154, top: 28, padding: 16, color: targetNetwork.color }}>\n        {targetNetwork.name}\n      </div>\n    );\n  }\n\n  const loadWeb3Modal = useCallback(async () => {\n    const provider = await web3Modal.connect();\n    setInjectedProvider(new ethers.providers.Web3Provider(provider));\n\n    provider.on(\"chainChanged\", chainId => {\n      console.log(`chain changed to ${chainId}! updating providers`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    provider.on(\"accountsChanged\", () => {\n      console.log(`account changed!`);\n      setInjectedProvider(new ethers.providers.Web3Provider(provider));\n    });\n\n    // Subscribe to session disconnection\n    provider.on(\"disconnect\", (code, reason) => {\n      console.log(code, reason);\n      logoutOfWeb3Modal();\n    });\n  }, [setInjectedProvider]);\n\n  useEffect(() => {\n    if (web3Modal.cachedProvider) {\n      loadWeb3Modal();\n    }\n  }, [loadWeb3Modal]);\n\n  const [route, setRoute] = useState();\n  useEffect(() => {\n    setRoute(window.location.pathname);\n  }, [setRoute]);\n\n  let faucetHint = \"\";\n  const faucetAvailable = localProvider && localProvider.connection && targetNetwork.name.indexOf(\"local\") !== -1;\n\n  const [faucetClicked, setFaucetClicked] = useState(false);\n  if (\n    !faucetClicked &&\n    localProvider &&\n    localProvider._network &&\n    localProvider._network.chainId === 31337 &&\n    yourLocalBalance &&\n    ethers.utils.formatEther(yourLocalBalance) <= 0\n  ) {\n    faucetHint = (\n      <div style={{ padding: 16 }}>\n        <Button\n          type=\"primary\"\n          onClick={() => {\n            faucetTx({\n              to: address,\n              value: ethers.utils.parseEther(\"0.01\"),\n            });\n            setFaucetClicked(true);\n          }}\n        >\n          💰 Grab funds from the faucet ⛽️\n        </Button>\n      </div>\n    );\n  }\n\n  function pageContentForAdmin() {\n    return (\n      <div>\n        <Menu style={{ textAlign: \"center\" }} selectedKeys={[route]} mode=\"horizontal\">\n          <Menu.Item key=\"/\">\n            <Link\n              onClick={() => {\n                setRoute(\"/\");\n              }}\n              to=\"/\"\n            >\n              Create\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/quadratic-diplomacy-vote\">\n            <Link\n              onClick={() => {\n                setRoute(\"/quadratic-diplomacy-vote\");\n              }}\n              to=\"/quadratic-diplomacy-vote\"\n            >\n              Vote\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/quadratic-diplomacy-reward\">\n            <Link\n              onClick={() => {\n                setRoute(\"/quadratic-diplomacy-reward\");\n              }}\n              to=\"/quadratic-diplomacy-reward\"\n            >\n              Reward\n            </Link>\n          </Menu.Item>\n          <Menu.Item key=\"/contract\">\n            <Link\n              onClick={() => {\n                setRoute(\"/contract\");\n              }}\n              to=\"/contract\"\n            >\n              Contract\n            </Link>\n          </Menu.Item>\n        </Menu>\n\n        <Switch>\n          <Route exact path=\"/\">\n            <QuadraticDiplomacyCreate\n              mainnetProvider={mainnetProvider}\n              serverUrl={serverUrl}\n              address={address}\n              userSigner={userSigner}\n              currentDistribution={currentDistribution}\n              setCurrentDistribution={setCurrentDistribution}\n              isAdmin={isAdmin}\n            />\n          </Route>\n          <Route path=\"/quadratic-diplomacy-vote\">\n            <QuadraticDiplomacyVote\n              isVoter={isVoter}\n              mainnetProvider={mainnetProvider}\n              currentDistribution={currentDistribution}\n              address={address}\n              userSigner={userSigner}\n              serverUrl={serverUrl}\n            />\n          </Route>\n          <Route path=\"/quadratic-diplomacy-reward\">\n            <QuadraticDiplomacyReward\n              tx={tx}\n              writeContracts={writeContracts}\n              userSigner={userSigner}\n              price={price}\n              isAdmin={isAdmin}\n              mainnetProvider={mainnetProvider}\n              currentDistribution={currentDistribution}\n              serverUrl={serverUrl}\n              address={address}\n            />\n          </Route>\n          <Route exact path=\"/contract\">\n            <Contract\n              name=\"QuadraticDiplomacyContract\"\n              signer={userSigner}\n              provider={localProvider}\n              address={address}\n              blockExplorer={blockExplorer}\n            />\n          </Route>\n        </Switch>\n      </div>\n    );\n  }\n\n  function pageContentForVoter() {\n    return (\n      <div>\n        <QuadraticDiplomacyVote\n          isVoter={isVoter}\n          mainnetProvider={mainnetProvider}\n          currentDistribution={currentDistribution}\n          address={address}\n          userSigner={userSigner}\n          serverUrl={serverUrl}\n        />\n      </div>\n    );\n  }\n\n  function pageContentForOthers() {\n    if (currentDistribution.id) {\n      return (\n        <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n          <Title level={4}>Voting in progress</Title>\n        </div>\n      );\n    } else {\n      return (\n        <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\n          <Title level={4}>No voting in progress</Title>\n        </div>\n      );\n    }\n  }\n\n  function pageContent() {\n    if (currentDistribution == null || isAdmin == null) {\n      return <Spin />;\n    }\n    if (isAdmin) {\n      return pageContentForAdmin();\n    }\n    if (currentDistribution && isVoter) {\n      return pageContentForVoter();\n    }\n    return pageContentForOthers();\n  }\n\n  return (\n    <div className=\"App\">\n      {/* ✏️ Edit the header and change the title to your project name */}\n      <Header />\n      {networkDisplay}\n      <BrowserRouter>{pageContent()}</BrowserRouter>\n\n      <ThemeSwitch />\n\n      {/* 👨‍💼 Your account is in the top right with a wallet at connect options */}\n      <div style={{ position: \"fixed\", textAlign: \"right\", right: 0, top: 0, padding: 10 }}>\n        <Account\n          address={address}\n          localProvider={localProvider}\n          userSigner={userSigner}\n          mainnetProvider={mainnetProvider}\n          price={price}\n          web3Modal={web3Modal}\n          loadWeb3Modal={loadWeb3Modal}\n          logoutOfWeb3Modal={logoutOfWeb3Modal}\n          blockExplorer={blockExplorer}\n          isAdmin={isAdmin}\n          isVoter={isVoter}\n        />\n        {faucetHint}\n      </div>\n\n      {/* 🗺 Extra UI like gas price, eth price, faucet, and support: */}\n      <div style={{ position: \"fixed\", textAlign: \"left\", left: 0, bottom: 20, padding: 10 }}>\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={8}>\n            <Ramp price={price} address={address} networks={NETWORKS} />\n          </Col>\n\n          <Col span={8} style={{ textAlign: \"center\", opacity: 0.8 }}>\n            <GasGauge gasPrice={gasPrice} />\n          </Col>\n          <Col span={8} style={{ textAlign: \"center\", opacity: 1 }}>\n            <Button\n              onClick={() => {\n                window.open(\"https://t.me/joinchat/KByvmRe5wkR-8F_zz6AjpA\");\n              }}\n              size=\"large\"\n              shape=\"round\"\n            >\n              <span style={{ marginRight: 8 }} role=\"img\" aria-label=\"support\">\n                💬\n              </span>\n              Support\n            </Button>\n          </Col>\n        </Row>\n\n        <Row align=\"middle\" gutter={[4, 4]}>\n          <Col span={24}>\n            {\n              /*  if the local provider has a signer, let's show the faucet:  */\n              faucetAvailable ? (\n                <Faucet localProvider={localProvider} price={price} ensProvider={mainnetProvider} />\n              ) : (\n                \"\"\n              )\n            }\n          </Col>\n        </Row>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n","import { Fetcher, Route, Token, WETH } from \"@uniswap/sdk\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useExchangePrice(targetNetwork, mainnetProvider, pollTime) {\n  const [price, setPrice] = useState(0);\n\n  const pollPrice = () => {\n    async function getPrice() {\n      if (!mainnetProvider) return 0;\n      if (targetNetwork.price) {\n        setPrice(targetNetwork.price);\n      } else {\n        const DAI = new Token(\n          mainnetProvider.network ? mainnetProvider.network.chainId : 1,\n          \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n          18,\n        );\n        const pair = await Fetcher.fetchPairData(DAI, WETH[DAI.chainId], mainnetProvider);\n        const route = new Route([pair], WETH[DAI.chainId]);\n        setPrice(parseFloat(route.midPrice.toSignificant(6)));\n      }\n    }\n    // getPrice();\n  };\n  usePoller(pollPrice, pollTime || 9777);\n\n  return price;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\n\nexport default function useGasPrice(targetNetwork, speed) {\n  const [gasPrice, setGasPrice] = useState();\n  const loadGasPrice = async () => {\n    if (targetNetwork.hasOwnProperty(\"gasPrice\")) {\n      setGasPrice(targetNetwork.gasPrice);\n    } else {\n      if (navigator.onLine) {\n        axios\n          .get(\"https://ethgasstation.info/json/ethgasAPI.json\")\n          .then(response => {\n            const newGasPrice = response.data[speed || \"fast\"] * 100000000;\n            if (newGasPrice !== gasPrice) {\n              setGasPrice(newGasPrice);\n            }\n          })\n          .catch(error => console.log(error));\n      }\n    }\n  };\n\n  usePoller(loadGasPrice, 39999);\n  return gasPrice;\n}\n","import axios from \"axios\";\nimport { usePoller } from \"eth-hooks\";\nimport { useState } from \"react\";\nimport { useEffect } from \"react\";\n\nexport default function useCurrentDistribution(serverUrl) {\n  const [currentDistribution, setCurrentDistribution] = useState({});\n\n  const loadCurrentDistribution = async () => {\n    axios\n      .get(serverUrl + \"currentDistribution\")\n      .then(response => {\n        console.log(response);\n        setCurrentDistribution(response.data);\n      })\n      .catch(error => {\n        console.log(error);\n        setCurrentDistribution({});\n      });\n  };\n\n  usePoller(loadCurrentDistribution, 10000);\n\n  return [currentDistribution, setCurrentDistribution];\n}\n","import { ApolloClient, ApolloProvider, InMemoryCache } from \"@apollo/client\";\nimport React from \"react\";\nimport { ThemeSwitcherProvider } from \"react-css-theme-switcher\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport \"./index.css\";\n\nconst themes = {\n  dark: `${process.env.PUBLIC_URL}/dark-theme.css`,\n  light: `${process.env.PUBLIC_URL}/light-theme.css`,\n};\n\nconst prevTheme = window.localStorage.getItem(\"theme\");\n\nconst subgraphUri = \"http://localhost:8000/subgraphs/name/scaffold-eth/your-contract\";\n\nconst client = new ApolloClient({\n  uri: subgraphUri,\n  cache: new InMemoryCache(),\n});\n\nReactDOM.render(\n  <ApolloProvider client={client}>\n    <ThemeSwitcherProvider themeMap={themes} defaultTheme={prevTheme || \"light\"}>\n      <App subgraphUri={subgraphUri} />\n    </ThemeSwitcherProvider>\n  </ApolloProvider>,\n  document.getElementById(\"root\"),\n);\n","const ERC20ABI = [\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_from\",\n        type: \"address\",\n      },\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        name: \"balance\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        name: \"_to\",\n        type: \"address\",\n      },\n      {\n        name: \"_value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        name: \"_owner\",\n        type: \"address\",\n      },\n      {\n        name: \"_spender\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    payable: true,\n    stateMutability: \"payable\",\n    type: \"fallback\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"owner\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        name: \"from\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        name: \"to\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        name: \"value\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n];\nconst DAIABI = [\n  {\n    inputs: [\n      {\n        internalType: \"uint256\",\n        name: \"chainId_\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"constructor\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Approval\",\n    type: \"event\",\n  },\n  {\n    anonymous: true,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"bytes4\",\n        name: \"sig\",\n        type: \"bytes4\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg1\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: true,\n        internalType: \"bytes32\",\n        name: \"arg2\",\n        type: \"bytes32\",\n      },\n      {\n        indexed: false,\n        internalType: \"bytes\",\n        name: \"data\",\n        type: \"bytes\",\n      },\n    ],\n    name: \"LogNote\",\n    type: \"event\",\n  },\n  {\n    anonymous: false,\n    inputs: [\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        indexed: true,\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        indexed: false,\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"Transfer\",\n    type: \"event\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"DOMAIN_SEPARATOR\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"PERMIT_TYPEHASH\",\n    outputs: [\n      {\n        internalType: \"bytes32\",\n        name: \"\",\n        type: \"bytes32\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"allowance\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"approve\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"balanceOf\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"burn\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"decimals\",\n    outputs: [\n      {\n        internalType: \"uint8\",\n        name: \"\",\n        type: \"uint8\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"deny\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"mint\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"move\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"name\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"nonces\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"holder\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"spender\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"nonce\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"expiry\",\n        type: \"uint256\",\n      },\n      {\n        internalType: \"bool\",\n        name: \"allowed\",\n        type: \"bool\",\n      },\n      {\n        internalType: \"uint8\",\n        name: \"v\",\n        type: \"uint8\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"r\",\n        type: \"bytes32\",\n      },\n      {\n        internalType: \"bytes32\",\n        name: \"s\",\n        type: \"bytes32\",\n      },\n    ],\n    name: \"permit\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"pull\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"usr\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"push\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"guy\",\n        type: \"address\",\n      },\n    ],\n    name: \"rely\",\n    outputs: [],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"symbol\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"totalSupply\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transfer\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: false,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"src\",\n        type: \"address\",\n      },\n      {\n        internalType: \"address\",\n        name: \"dst\",\n        type: \"address\",\n      },\n      {\n        internalType: \"uint256\",\n        name: \"wad\",\n        type: \"uint256\",\n      },\n    ],\n    name: \"transferFrom\",\n    outputs: [\n      {\n        internalType: \"bool\",\n        name: \"\",\n        type: \"bool\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"nonpayable\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [],\n    name: \"version\",\n    outputs: [\n      {\n        internalType: \"string\",\n        name: \"\",\n        type: \"string\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n  {\n    constant: true,\n    inputs: [\n      {\n        internalType: \"address\",\n        name: \"\",\n        type: \"address\",\n      },\n    ],\n    name: \"wards\",\n    outputs: [\n      {\n        internalType: \"uint256\",\n        name: \"\",\n        type: \"uint256\",\n      },\n    ],\n    payable: false,\n    stateMutability: \"view\",\n    type: \"function\",\n  },\n];\n\n// Mainnet DAI, Optimism and Arbitrium Rollup Contracts with local addresses\nmodule.exports = {\n  1: {\n    contracts: {\n      DAI: {\n        address: \"0x6B175474E89094C44Da98b954EedeAC495271d0F\",\n        abi: DAIABI,\n      },\n      UNI: {\n        address: \"0x1f9840a85d5aF5bf1D1762F925BDADdC4201F984\",\n        abi: ERC20ABI,\n      },\n      GTC: {\n        address: \"0xde30da39c46104798bb5aa3fe8b9e0e1f348163f\",\n        abi: ERC20ABI,\n      },\n    },\n  },\n  42: {\n    contracts: {\n      DAI: {\n        address: \"0x4F96Fe3b7A6Cf9725f59d353F723c1bDb64CA6Aa\",\n        abi: DAIABI,\n      },\n    },\n  },\n};\n"],"sourceRoot":""}