{
  "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "startingAdmin",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "admin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        }
      ],
      "name": "AddMember",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "blockNumber",
          "type": "uint256"
        }
      ],
      "name": "NewElection",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "previousAdminRole",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "newAdminRole",
          "type": "bytes32"
        }
      ],
      "name": "RoleAdminChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleGranted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "account",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "RoleRevoked",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "votingAddress",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Vote",
      "type": "event"
    },
    {
      "stateMutability": "payable",
      "type": "fallback"
    },
    {
      "inputs": [],
      "name": "DEFAULT_ADMIN_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "VOTER_ROLE",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "internalType": "uint256",
          "name": "voteAllocation",
          "type": "uint256"
        }
      ],
      "name": "addMembersWithVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "voteAmount",
          "type": "uint256"
        }
      ],
      "name": "addSingleMemberWithVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "value",
          "type": "bool"
        }
      ],
      "name": "admin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "currentElectionStartBlock",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleAdmin",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "uint256",
          "name": "index",
          "type": "uint256"
        }
      ],
      "name": "getRoleMember",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        }
      ],
      "name": "getRoleMemberCount",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "wallet",
          "type": "address"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "giveVotes",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "grantRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "hasRole",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "renounceRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes32",
          "name": "role",
          "type": "bytes32"
        },
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "revokeRole",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "shareETH",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        }
      ],
      "name": "sharePayedETH",
      "outputs": [],
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "spender",
          "type": "address"
        }
      ],
      "name": "sharePayedToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "users",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "shares",
          "type": "uint256[]"
        },
        {
          "internalType": "contract IERC20",
          "name": "token",
          "type": "address"
        }
      ],
      "name": "shareToken",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address[]",
          "name": "wallets",
          "type": "address[]"
        },
        {
          "internalType": "uint256[]",
          "name": "amounts",
          "type": "uint256[]"
        }
      ],
      "name": "voteMultiple",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "votes",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "stateMutability": "payable",
      "type": "receive"
    }
  ],
  "transactionHash": "0x6b70f8efb7bc8300ac57c3a9eee7388b8c7039d19992c72b9061f4e88715d661",
  "receipt": {
    "to": null,
    "from": "0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266",
    "contractAddress": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
    "transactionIndex": 0,
    "gasUsed": "1687874",
    "logsBloom": "0x
    "blockHash": "0xa1b76e71c4ab05153006416523ced9272a0ba8f047146ff08754e46b9196f63b",
    "transactionHash": "0x6b70f8efb7bc8300ac57c3a9eee7388b8c7039d19992c72b9061f4e88715d661",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x6b70f8efb7bc8300ac57c3a9eee7388b8c7039d19992c72b9061f4e88715d661",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000210a2f92a94f31d2c5a377018d9d24a1eb2ebcb9",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0xa1b76e71c4ab05153006416523ced9272a0ba8f047146ff08754e46b9196f63b"
      },
      {
        "transactionIndex": 0,
        "blockNumber": 1,
        "transactionHash": "0x6b70f8efb7bc8300ac57c3a9eee7388b8c7039d19992c72b9061f4e88715d661",
        "address": "0x5FbDB2315678afecb367f032d93F642f64180aa3",
        "topics": [
          "0x2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266",
          "0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266"
        ],
        "data": "0x",
        "logIndex": 1,
        "blockHash": "0xa1b76e71c4ab05153006416523ced9272a0ba8f047146ff08754e46b9196f63b"
      }
    ],
    "blockNumber": 1,
    "cumulativeGasUsed": "1687874",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x210A2F92A94F31d2c5a377018d9d24A1EB2EBCB9"
  ],
  "solcInputHash": "402651302e8d1b6ee2d974f482a1ea79",
  "metadata": "{\"compiler\":{\"version\":\"0.6.7+commit.b8d736ae\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"startingAdmin\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"admin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"}],\"name\":\"AddMember\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"blockNumber\",\"type\":\"uint256\"}],\"name\":\"NewElection\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"previousAdminRole\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"newAdminRole\",\"type\":\"bytes32\"}],\"name\":\"RoleAdminChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleGranted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"RoleRevoked\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"votingAddress\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Vote\",\"type\":\"event\"},{\"stateMutability\":\"payable\",\"type\":\"fallback\"},{\"inputs\":[],\"name\":\"DEFAULT_ADMIN_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"VOTER_ROLE\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256\",\"name\":\"voteAllocation\",\"type\":\"uint256\"}],\"name\":\"addMembersWithVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"voteAmount\",\"type\":\"uint256\"}],\"name\":\"addSingleMemberWithVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"value\",\"type\":\"bool\"}],\"name\":\"admin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"currentElectionStartBlock\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleAdmin\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"uint256\",\"name\":\"index\",\"type\":\"uint256\"}],\"name\":\"getRoleMember\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"}],\"name\":\"getRoleMemberCount\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"wallet\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"giveVotes\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"grantRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"hasRole\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"renounceRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes32\",\"name\":\"role\",\"type\":\"bytes32\"},{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"revokeRole\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"shareETH\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"}],\"name\":\"sharePayedETH\",\"outputs\":[],\"stateMutability\":\"payable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"spender\",\"type\":\"address\"}],\"name\":\"sharePayedToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"users\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"shares\",\"type\":\"uint256[]\"},{\"internalType\":\"contract IERC20\",\"name\":\"token\",\"type\":\"address\"}],\"name\":\"shareToken\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address[]\",\"name\":\"wallets\",\"type\":\"address[]\"},{\"internalType\":\"uint256[]\",\"name\":\"amounts\",\"type\":\"uint256[]\"}],\"name\":\"voteMultiple\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"votes\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"stateMutability\":\"payable\",\"type\":\"receive\"}],\"devdoc\":{\"methods\":{\"getRoleAdmin(bytes32)\":{\"details\":\"Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}.\"},\"getRoleMember(bytes32,uint256)\":{\"details\":\"Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information.\"},\"getRoleMemberCount(bytes32)\":{\"details\":\"Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role.\"},\"grantRole(bytes32,address)\":{\"details\":\"Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"},\"hasRole(bytes32,address)\":{\"details\":\"Returns `true` if `account` has been granted `role`.\"},\"renounceRole(bytes32,address)\":{\"details\":\"Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`.\"},\"revokeRole(bytes32,address)\":{\"details\":\"Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role.\"}}},\"userdoc\":{\"methods\":{}}},\"settings\":{\"compilationTarget\":{\"contracts/QuadraticDiplomacyContract.sol\":\"QuadraticDiplomacyContract\"},\"evmVersion\":\"istanbul\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/access/AccessControl.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\nimport \\\"../utils/EnumerableSet.sol\\\";\\nimport \\\"../utils/Address.sol\\\";\\nimport \\\"../utils/Context.sol\\\";\\n\\n/**\\n * @dev Contract module that allows children to implement role-based access\\n * control mechanisms.\\n *\\n * Roles are referred to by their `bytes32` identifier. These should be exposed\\n * in the external API and be unique. The best way to achieve this is by\\n * using `public constant` hash digests:\\n *\\n * ```\\n * bytes32 public constant MY_ROLE = keccak256(\\\"MY_ROLE\\\");\\n * ```\\n *\\n * Roles can be used to represent a set of permissions. To restrict access to a\\n * function call, use {hasRole}:\\n *\\n * ```\\n * function foo() public {\\n *     require(hasRole(MY_ROLE, msg.sender));\\n *     ...\\n * }\\n * ```\\n *\\n * Roles can be granted and revoked dynamically via the {grantRole} and\\n * {revokeRole} functions. Each role has an associated admin role, and only\\n * accounts that have a role's admin role can call {grantRole} and {revokeRole}.\\n *\\n * By default, the admin role for all roles is `DEFAULT_ADMIN_ROLE`, which means\\n * that only accounts with this role will be able to grant or revoke other\\n * roles. More complex role relationships can be created by using\\n * {_setRoleAdmin}.\\n *\\n * WARNING: The `DEFAULT_ADMIN_ROLE` is also its own admin: it has permission to\\n * grant and revoke this role. Extra precautions should be taken to secure\\n * accounts that have been granted it.\\n */\\nabstract contract AccessControl is Context {\\n    using EnumerableSet for EnumerableSet.AddressSet;\\n    using Address for address;\\n\\n    struct RoleData {\\n        EnumerableSet.AddressSet members;\\n        bytes32 adminRole;\\n    }\\n\\n    mapping (bytes32 => RoleData) private _roles;\\n\\n    bytes32 public constant DEFAULT_ADMIN_ROLE = 0x00;\\n\\n    /**\\n     * @dev Emitted when `newAdminRole` is set as ``role``'s admin role, replacing `previousAdminRole`\\n     *\\n     * `DEFAULT_ADMIN_ROLE` is the starting admin for all roles, despite\\n     * {RoleAdminChanged} not being emitted signaling this.\\n     *\\n     * _Available since v3.1._\\n     */\\n    event RoleAdminChanged(bytes32 indexed role, bytes32 indexed previousAdminRole, bytes32 indexed newAdminRole);\\n\\n    /**\\n     * @dev Emitted when `account` is granted `role`.\\n     *\\n     * `sender` is the account that originated the contract call, an admin role\\n     * bearer except when using {_setupRole}.\\n     */\\n    event RoleGranted(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Emitted when `account` is revoked `role`.\\n     *\\n     * `sender` is the account that originated the contract call:\\n     *   - if using `revokeRole`, it is the admin role bearer\\n     *   - if using `renounceRole`, it is the role bearer (i.e. `account`)\\n     */\\n    event RoleRevoked(bytes32 indexed role, address indexed account, address indexed sender);\\n\\n    /**\\n     * @dev Returns `true` if `account` has been granted `role`.\\n     */\\n    function hasRole(bytes32 role, address account) public view returns (bool) {\\n        return _roles[role].members.contains(account);\\n    }\\n\\n    /**\\n     * @dev Returns the number of accounts that have `role`. Can be used\\n     * together with {getRoleMember} to enumerate all bearers of a role.\\n     */\\n    function getRoleMemberCount(bytes32 role) public view returns (uint256) {\\n        return _roles[role].members.length();\\n    }\\n\\n    /**\\n     * @dev Returns one of the accounts that have `role`. `index` must be a\\n     * value between 0 and {getRoleMemberCount}, non-inclusive.\\n     *\\n     * Role bearers are not sorted in any particular way, and their ordering may\\n     * change at any point.\\n     *\\n     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure\\n     * you perform all queries on the same block. See the following\\n     * https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post]\\n     * for more information.\\n     */\\n    function getRoleMember(bytes32 role, uint256 index) public view returns (address) {\\n        return _roles[role].members.at(index);\\n    }\\n\\n    /**\\n     * @dev Returns the admin role that controls `role`. See {grantRole} and\\n     * {revokeRole}.\\n     *\\n     * To change a role's admin, use {_setRoleAdmin}.\\n     */\\n    function getRoleAdmin(bytes32 role) public view returns (bytes32) {\\n        return _roles[role].adminRole;\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function grantRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to grant\\\");\\n\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from `account`.\\n     *\\n     * If `account` had been granted `role`, emits a {RoleRevoked} event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must have ``role``'s admin role.\\n     */\\n    function revokeRole(bytes32 role, address account) public virtual {\\n        require(hasRole(_roles[role].adminRole, _msgSender()), \\\"AccessControl: sender must be an admin to revoke\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Revokes `role` from the calling account.\\n     *\\n     * Roles are often managed via {grantRole} and {revokeRole}: this function's\\n     * purpose is to provide a mechanism for accounts to lose their privileges\\n     * if they are compromised (such as when a trusted device is misplaced).\\n     *\\n     * If the calling account had been granted `role`, emits a {RoleRevoked}\\n     * event.\\n     *\\n     * Requirements:\\n     *\\n     * - the caller must be `account`.\\n     */\\n    function renounceRole(bytes32 role, address account) public virtual {\\n        require(account == _msgSender(), \\\"AccessControl: can only renounce roles for self\\\");\\n\\n        _revokeRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Grants `role` to `account`.\\n     *\\n     * If `account` had not been already granted `role`, emits a {RoleGranted}\\n     * event. Note that unlike {grantRole}, this function doesn't perform any\\n     * checks on the calling account.\\n     *\\n     * [WARNING]\\n     * ====\\n     * This function should only be called from the constructor when setting\\n     * up the initial roles for the system.\\n     *\\n     * Using this function in any other way is effectively circumventing the admin\\n     * system imposed by {AccessControl}.\\n     * ====\\n     */\\n    function _setupRole(bytes32 role, address account) internal virtual {\\n        _grantRole(role, account);\\n    }\\n\\n    /**\\n     * @dev Sets `adminRole` as ``role``'s admin role.\\n     *\\n     * Emits a {RoleAdminChanged} event.\\n     */\\n    function _setRoleAdmin(bytes32 role, bytes32 adminRole) internal virtual {\\n        emit RoleAdminChanged(role, _roles[role].adminRole, adminRole);\\n        _roles[role].adminRole = adminRole;\\n    }\\n\\n    function _grantRole(bytes32 role, address account) private {\\n        if (_roles[role].members.add(account)) {\\n            emit RoleGranted(role, account, _msgSender());\\n        }\\n    }\\n\\n    function _revokeRole(bytes32 role, address account) private {\\n        if (_roles[role].members.remove(account)) {\\n            emit RoleRevoked(role, account, _msgSender());\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x4fc155a2f7837603d69a13cfa481eb5e7f5e02cb77e2ec9edbac30986db37988\"},\"@openzeppelin/contracts/math/SafeMath.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Wrappers over Solidity's arithmetic operations with added overflow\\n * checks.\\n *\\n * Arithmetic operations in Solidity wrap on overflow. This can easily result\\n * in bugs, because programmers usually assume that an overflow raises an\\n * error, which is the standard behavior in high level programming languages.\\n * `SafeMath` restores this intuition by reverting the transaction when an\\n * operation overflows.\\n *\\n * Using this library instead of the unchecked operations eliminates an entire\\n * class of bugs, so it's recommended to use it always.\\n */\\nlibrary SafeMath {\\n    /**\\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        uint256 c = a + b;\\n        if (c < a) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b > a) return (false, 0);\\n        return (true, a - b);\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\\n        if (a == 0) return (true, 0);\\n        uint256 c = a * b;\\n        if (c / a != b) return (false, 0);\\n        return (true, c);\\n    }\\n\\n    /**\\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a / b);\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\\n        if (b == 0) return (false, 0);\\n        return (true, a % b);\\n    }\\n\\n    /**\\n     * @dev Returns the addition of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `+` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Addition cannot overflow.\\n     */\\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\\n        uint256 c = a + b;\\n        require(c >= a, \\\"SafeMath: addition overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting on\\n     * overflow (when the result is negative).\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b <= a, \\\"SafeMath: subtraction overflow\\\");\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the multiplication of two unsigned integers, reverting on\\n     * overflow.\\n     *\\n     * Counterpart to Solidity's `*` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Multiplication cannot overflow.\\n     */\\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\\n        if (a == 0) return 0;\\n        uint256 c = a * b;\\n        require(c / a == b, \\\"SafeMath: multiplication overflow\\\");\\n        return c;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: division by zero\\\");\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting when dividing by zero.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b > 0, \\\"SafeMath: modulo by zero\\\");\\n        return a % b;\\n    }\\n\\n    /**\\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\\n     * overflow (when the result is negative).\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {trySub}.\\n     *\\n     * Counterpart to Solidity's `-` operator.\\n     *\\n     * Requirements:\\n     *\\n     * - Subtraction cannot overflow.\\n     */\\n    function sub(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b <= a, errorMessage);\\n        return a - b;\\n    }\\n\\n    /**\\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\\n     * division by zero. The result is rounded towards zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryDiv}.\\n     *\\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\\n     * uses an invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function div(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a / b;\\n    }\\n\\n    /**\\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\\n     * reverting with custom message when dividing by zero.\\n     *\\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\\n     * message unnecessarily. For custom revert reasons use {tryMod}.\\n     *\\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\\n     * invalid opcode to revert (consuming all remaining gas).\\n     *\\n     * Requirements:\\n     *\\n     * - The divisor cannot be zero.\\n     */\\n    function mod(uint256 a, uint256 b, string memory errorMessage) internal pure returns (uint256) {\\n        require(b > 0, errorMessage);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0xcc78a17dd88fa5a2edc60c8489e2f405c0913b377216a5b26b35656b2d0dab52\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(address sender, address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x5f02220344881ce43204ae4a6281145a67bc52c2bb1290a791857df3d19d78f5\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.2 <0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly { size := extcodesize(account) }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls, avoid-call-value\\n        (bool success, ) = recipient.call{ value: amount }(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain`call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n      return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value, string memory errorMessage) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.call{ value: value }(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data, string memory errorMessage) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data, string memory errorMessage) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        // solhint-disable-next-line avoid-low-level-calls\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return _verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    function _verifyCallResult(bool success, bytes memory returndata, string memory errorMessage) private pure returns(bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                // solhint-disable-next-line no-inline-assembly\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x28911e614500ae7c607a432a709d35da25f3bc5ddc8bd12b278b66358070c0ea\"},\"@openzeppelin/contracts/utils/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/*\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with GSN meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address payable) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes memory) {\\n        this; // silence state mutability warning without generating bytecode - see https://github.com/ethereum/solidity/issues/2691\\n        return msg.data;\\n    }\\n}\\n\",\"keccak256\":\"0x8d3cb350f04ff49cfb10aef08d87f19dcbaecc8027b0bed12f3275cd12f38cf0\"},\"@openzeppelin/contracts/utils/EnumerableSet.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity >=0.6.0 <0.8.0;\\n\\n/**\\n * @dev Library for managing\\n * https://en.wikipedia.org/wiki/Set_(abstract_data_type)[sets] of primitive\\n * types.\\n *\\n * Sets have the following properties:\\n *\\n * - Elements are added, removed, and checked for existence in constant time\\n * (O(1)).\\n * - Elements are enumerated in O(n). No guarantees are made on the ordering.\\n *\\n * ```\\n * contract Example {\\n *     // Add the library methods\\n *     using EnumerableSet for EnumerableSet.AddressSet;\\n *\\n *     // Declare a set state variable\\n *     EnumerableSet.AddressSet private mySet;\\n * }\\n * ```\\n *\\n * As of v3.3.0, sets of type `bytes32` (`Bytes32Set`), `address` (`AddressSet`)\\n * and `uint256` (`UintSet`) are supported.\\n */\\nlibrary EnumerableSet {\\n    // To implement this library for multiple types with as little code\\n    // repetition as possible, we write it in terms of a generic Set type with\\n    // bytes32 values.\\n    // The Set implementation uses private functions, and user-facing\\n    // implementations (such as AddressSet) are just wrappers around the\\n    // underlying Set.\\n    // This means that we can only create new EnumerableSets for types that fit\\n    // in bytes32.\\n\\n    struct Set {\\n        // Storage of set values\\n        bytes32[] _values;\\n\\n        // Position of the value in the `values` array, plus 1 because index 0\\n        // means a value is not in the set.\\n        mapping (bytes32 => uint256) _indexes;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function _add(Set storage set, bytes32 value) private returns (bool) {\\n        if (!_contains(set, value)) {\\n            set._values.push(value);\\n            // The value is stored at length-1, but we add 1 to all indexes\\n            // and use 0 as a sentinel value\\n            set._indexes[value] = set._values.length;\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function _remove(Set storage set, bytes32 value) private returns (bool) {\\n        // We read and store the value's index to prevent multiple reads from the same storage slot\\n        uint256 valueIndex = set._indexes[value];\\n\\n        if (valueIndex != 0) { // Equivalent to contains(set, value)\\n            // To delete an element from the _values array in O(1), we swap the element to delete with the last one in\\n            // the array, and then remove the last element (sometimes called as 'swap and pop').\\n            // This modifies the order of the array, as noted in {at}.\\n\\n            uint256 toDeleteIndex = valueIndex - 1;\\n            uint256 lastIndex = set._values.length - 1;\\n\\n            // When the value to delete is the last one, the swap operation is unnecessary. However, since this occurs\\n            // so rarely, we still do the swap anyway to avoid the gas cost of adding an 'if' statement.\\n\\n            bytes32 lastvalue = set._values[lastIndex];\\n\\n            // Move the last value to the index where the value to delete is\\n            set._values[toDeleteIndex] = lastvalue;\\n            // Update the index for the moved value\\n            set._indexes[lastvalue] = toDeleteIndex + 1; // All indexes are 1-based\\n\\n            // Delete the slot where the moved value was stored\\n            set._values.pop();\\n\\n            // Delete the index for the deleted slot\\n            delete set._indexes[value];\\n\\n            return true;\\n        } else {\\n            return false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function _contains(Set storage set, bytes32 value) private view returns (bool) {\\n        return set._indexes[value] != 0;\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function _length(Set storage set) private view returns (uint256) {\\n        return set._values.length;\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function _at(Set storage set, uint256 index) private view returns (bytes32) {\\n        require(set._values.length > index, \\\"EnumerableSet: index out of bounds\\\");\\n        return set._values[index];\\n    }\\n\\n    // Bytes32Set\\n\\n    struct Bytes32Set {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _add(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(Bytes32Set storage set, bytes32 value) internal returns (bool) {\\n        return _remove(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(Bytes32Set storage set, bytes32 value) internal view returns (bool) {\\n        return _contains(set._inner, value);\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(Bytes32Set storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(Bytes32Set storage set, uint256 index) internal view returns (bytes32) {\\n        return _at(set._inner, index);\\n    }\\n\\n    // AddressSet\\n\\n    struct AddressSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(AddressSet storage set, address value) internal returns (bool) {\\n        return _add(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(AddressSet storage set, address value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(AddressSet storage set, address value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(uint256(uint160(value))));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values in the set. O(1).\\n     */\\n    function length(AddressSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(AddressSet storage set, uint256 index) internal view returns (address) {\\n        return address(uint160(uint256(_at(set._inner, index))));\\n    }\\n\\n\\n    // UintSet\\n\\n    struct UintSet {\\n        Set _inner;\\n    }\\n\\n    /**\\n     * @dev Add a value to a set. O(1).\\n     *\\n     * Returns true if the value was added to the set, that is if it was not\\n     * already present.\\n     */\\n    function add(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _add(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Removes a value from a set. O(1).\\n     *\\n     * Returns true if the value was removed from the set, that is if it was\\n     * present.\\n     */\\n    function remove(UintSet storage set, uint256 value) internal returns (bool) {\\n        return _remove(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns true if the value is in the set. O(1).\\n     */\\n    function contains(UintSet storage set, uint256 value) internal view returns (bool) {\\n        return _contains(set._inner, bytes32(value));\\n    }\\n\\n    /**\\n     * @dev Returns the number of values on the set. O(1).\\n     */\\n    function length(UintSet storage set) internal view returns (uint256) {\\n        return _length(set._inner);\\n    }\\n\\n   /**\\n    * @dev Returns the value stored at position `index` in the set. O(1).\\n    *\\n    * Note that there are no guarantees on the ordering of values inside the\\n    * array, and it may change when more values are added or removed.\\n    *\\n    * Requirements:\\n    *\\n    * - `index` must be strictly less than {length}.\\n    */\\n    function at(UintSet storage set, uint256 index) internal view returns (uint256) {\\n        return uint256(_at(set._inner, index));\\n    }\\n}\\n\",\"keccak256\":\"0x1562cd9922fbf739edfb979f506809e2743789cbde3177515542161c3d04b164\"},\"contracts/Distributor.sol\":{\"content\":\"pragma solidity >=0.6.7 <0.9.0;\\r\\n\\r\\n//SPDX-License-Identifier: MIT\\r\\n\\r\\nimport \\\"@openzeppelin/contracts/math/SafeMath.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\n\\r\\ncontract Distributor {\\r\\n    // utilize safemath for solidity <0.8.0\\r\\n    using SafeMath for uint256;\\r\\n\\r\\n    // validate 1-1 relationship between users and shares\\r\\n    modifier accurateUserSharesRatio(\\r\\n        address[] memory users,\\r\\n        uint256[] memory shares\\r\\n    ) {\\r\\n        require(users.length == shares.length, \\\"Incorrect distribution ratio\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // check provided balance >= total number of shares to distribute\\r\\n    modifier hasEnoughBalance(uint256[] memory shares, uint256 balance) {\\r\\n        uint256 totalShares;\\r\\n        for (uint256 i = 0; i < shares.length; i++) {\\r\\n            totalShares = totalShares.add(shares[i]);\\r\\n        }\\r\\n        // make sure specified balance is greater than totalShares specified\\r\\n        require(balance >= totalShares, \\\"Not enough eth for distribution\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    // escrow management functions\\r\\n    // share ETH from contract account balance\\r\\n    function _shareETH(address[] memory users, uint256[] memory shares)\\r\\n        internal\\r\\n        accurateUserSharesRatio(users, shares)\\r\\n        hasEnoughBalance(shares, address(this).balance)\\r\\n    {\\r\\n        _distribute(users, shares, address(0), address(0));\\r\\n    }\\r\\n\\r\\n    // share ERC-20 token from contract balance\\r\\n    function _shareToken(\\r\\n        address[] memory users,\\r\\n        uint256[] memory shares,\\r\\n        IERC20 token\\r\\n    )\\r\\n        internal\\r\\n        accurateUserSharesRatio(users, shares)\\r\\n        hasEnoughBalance(shares, token.balanceOf(address(this)))\\r\\n    {\\r\\n        _distribute(users, shares, address(token), address(this));\\r\\n    }\\r\\n\\r\\n    // user balance management functions\\r\\n    // share ETH from amount payed by user\\r\\n    function _sharePayedETH(address[] memory users, uint256[] memory shares)\\r\\n        internal\\r\\n        accurateUserSharesRatio(users, shares)\\r\\n        hasEnoughBalance(shares, msg.value)\\r\\n    {\\r\\n        _distribute(users, shares, address(0), address(0));\\r\\n    }\\r\\n\\r\\n    // share tokens from approved spender account\\r\\n    function _sharePayedToken(\\r\\n        address[] memory users,\\r\\n        uint256[] memory shares,\\r\\n        IERC20 token,\\r\\n        address spender\\r\\n    )\\r\\n        internal\\r\\n        accurateUserSharesRatio(users, shares)\\r\\n        hasEnoughBalance(shares, token.balanceOf(spender))\\r\\n    {\\r\\n        require(\\r\\n            spender == msg.sender,\\r\\n            \\\"You can't distribute someone else's token balance\\\"\\r\\n        );\\r\\n        require(\\r\\n            spender != address(this),\\r\\n            \\\"Use other shareToken method for contract token distribution\\\"\\r\\n        );\\r\\n\\r\\n        _distribute(users, shares, address(token), spender);\\r\\n    }\\r\\n\\r\\n    function _distribute(\\r\\n        address[] memory users,\\r\\n        uint256[] memory shares,\\r\\n        address token,\\r\\n        address spender\\r\\n    ) internal {\\r\\n        bool isToken = token != address(0) && spender != address(0);\\r\\n        bool spenderIsContract = address(this) == spender;\\r\\n\\r\\n        for (uint256 i = 0; i < users.length; i++) {\\r\\n            // make sure user is not genesis account and shares is greater than 0\\r\\n            if (users[i] != address(0) && shares[i] > 0) {\\r\\n                if (isToken) {\\r\\n                    // send ERC20 token\\r\\n                    if (spenderIsContract) {\\r\\n                        // from contract if spender is contract\\r\\n                        IERC20(token).transfer(users[i], shares[i]);\\r\\n                    } else {\\r\\n                        // from spender if spender is not contract\\r\\n                        IERC20(token).transferFrom(\\r\\n                            spender,\\r\\n                            users[i],\\r\\n                            shares[i]\\r\\n                        );\\r\\n                    }\\r\\n                } else {\\r\\n                    // transfer ETH otherwise (we do not care if the transfer is successful \\r\\n                    // or not, as this would block all other transfers)\\r\\n                    users[i].call{value: shares[i]}(\\\"\\\");\\r\\n                }\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\",\"keccak256\":\"0x6121905a0833b4ed8d30f3a277f8ff72ae49a8f836711ba0cb05f7ea5ab34bdf\"},\"contracts/QuadraticDiplomacyContract.sol\":{\"content\":\"pragma solidity >=0.6.7 <0.9.0;\\r\\npragma experimental ABIEncoderV2;\\r\\n//SPDX-License-Identifier: MIT\\r\\nimport \\\"@openzeppelin/contracts/access/AccessControl.sol\\\";\\r\\nimport \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\r\\nimport \\\"./Distributor.sol\\\";\\r\\n\\r\\ncontract QuadraticDiplomacyContract is Distributor, AccessControl {\\r\\n    event Vote(address votingAddress, address wallet, uint256 amount);\\r\\n    event AddMember(address admin, address wallet);\\r\\n    event NewElection(uint256 blockNumber);\\r\\n\\r\\n    bytes32 public constant VOTER_ROLE = keccak256(\\\"VOTER_ROLE\\\");\\r\\n\\r\\n    mapping(address => uint256) public votes;\\r\\n\\r\\n    uint256 public currentElectionStartBlock;\\r\\n\\r\\n    constructor(address startingAdmin) public {\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, startingAdmin);\\r\\n        _setupRole(DEFAULT_ADMIN_ROLE, msg.sender);\\r\\n        currentElectionStartBlock = block.number; \\r\\n    }\\r\\n\\r\\n    modifier onlyAdmin() {\\r\\n        require(hasRole(DEFAULT_ADMIN_ROLE, msg.sender), \\\"NOT ADMIN\\\");\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier canVote() {\\r\\n        require(\\r\\n            hasRole(VOTER_ROLE, msg.sender),\\r\\n            \\\"You don't have the permission to vote.\\\"\\r\\n        );\\r\\n        _;\\r\\n    }\\r\\n\\r\\n    modifier startNewElectionAfter(address tokenAddress) {\\r\\n        _;\\r\\n\\r\\n        // remove all voter roles\\r\\n        // an alternative (and less gas heavy?) way to do this would be to change the VOTER_ROLE to keccak256(abi.encodePacked(block.number));\\r\\n\\r\\n        uint256 memberCount = getRoleMemberCount(VOTER_ROLE);\\r\\n        for (uint256 i = 0; i < memberCount; i++) {\\r\\n            revokeRole(VOTER_ROLE, getRoleMember(VOTER_ROLE, 0));\\r\\n        }\\r\\n\\r\\n        currentElectionStartBlock = block.number;\\r\\n        emit NewElection(block.number);\\r\\n    }\\r\\n\\r\\n    function vote(address wallet, uint256 amount) private {\\r\\n        require(votes[msg.sender] >= amount, \\\"Not enough votes left\\\");\\r\\n        votes[msg.sender] -= amount;\\r\\n        emit Vote(msg.sender, wallet, amount);\\r\\n    }\\r\\n\\r\\n    function voteMultiple(address[] memory wallets, uint256[] memory amounts)\\r\\n        public\\r\\n        canVote\\r\\n    {\\r\\n        require(wallets.length == amounts.length, \\\"Wrong size\\\");\\r\\n\\r\\n        for (uint256 i = 0; i < wallets.length; i++) {\\r\\n            vote(wallets[i], amounts[i]);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function admin(address wallet, bool value) public onlyAdmin {\\r\\n        if (value) {\\r\\n            grantRole(DEFAULT_ADMIN_ROLE, wallet);\\r\\n        } else {\\r\\n            revokeRole(DEFAULT_ADMIN_ROLE, wallet);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    function giveVotes(address wallet, uint256 amount) public onlyAdmin {\\r\\n        votes[wallet] += amount;\\r\\n    }\\r\\n\\r\\n    function addSingleMemberWithVotes(address wallet, uint256 voteAmount) public onlyAdmin {\\r\\n        votes[wallet] = voteAmount;\\r\\n        grantRole(VOTER_ROLE, wallet);\\r\\n        emit AddMember(msg.sender, wallet);\\r\\n    }\\r\\n\\r\\n    function addMembersWithVotes(\\r\\n        address[] memory wallets,\\r\\n        uint256 voteAllocation\\r\\n    ) public onlyAdmin {\\r\\n        for (uint256 i = 0; i < wallets.length; i++) {\\r\\n            addSingleMemberWithVotes(wallets[i], voteAllocation);\\r\\n        }\\r\\n    }\\r\\n\\r\\n    // expose distributor functions\\r\\n    function shareETH(address[] memory users, uint256[] memory shares)\\r\\n        public\\r\\n        onlyAdmin\\r\\n        startNewElectionAfter(address(0))\\r\\n    {\\r\\n        _shareETH(users, shares);\\r\\n    }\\r\\n\\r\\n    function sharePayedETH(address[] memory users, uint256[] memory shares)\\r\\n        public\\r\\n        payable\\r\\n        onlyAdmin\\r\\n        startNewElectionAfter(address(0))\\r\\n    {\\r\\n        // makes sure msg.value has some eth in it\\r\\n        _sharePayedETH(users, shares);\\r\\n    }\\r\\n\\r\\n    function shareToken(\\r\\n        address[] memory users,\\r\\n        uint256[] memory shares,\\r\\n        IERC20 token\\r\\n    ) public onlyAdmin startNewElectionAfter(address(token)) {\\r\\n        _shareToken(users, shares, token);\\r\\n    }\\r\\n\\r\\n    function sharePayedToken(\\r\\n        address[] memory users,\\r\\n        uint256[] memory shares,\\r\\n        IERC20 token,\\r\\n        address spender\\r\\n    ) public onlyAdmin startNewElectionAfter(address(token)) {\\r\\n        _sharePayedToken(users, shares, token, spender);\\r\\n    }\\r\\n\\r\\n    function deposit() public payable {}\\r\\n\\r\\n    // payable fallback function\\r\\n    receive() external payable {}\\r\\n\\r\\n    fallback() external payable {}\\r\\n}\\r\\n\",\"keccak256\":\"0xaa98557e0ab53f86c892bae399c1e9cbbf8ab71e8e0834321d626cd6fbb828ca\"}},\"version\":1}",
  "bytecode": "0x60806040523480156200001157600080fd5b5060405162001cd238038062001cd28339810160408190526200003491620001a3565b6200004a6000826001600160e01b036200006b16565b620000606000336001600160e01b036200006b16565b5043600255620001d3565b6200008082826001600160e01b036200008416565b5050565b600082815260208181526040909120620000a99183906200115662000106821b17901c565b156200008057620000c26001600160e01b036200012f16565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b600062000126836001600160a01b0384166001600160e01b036200013316565b90505b92915050565b3390565b60006200014a83836001600160e01b036200018b16565b620001825750815460018181018455600084815260208082209093018490558454848252828601909352604090209190915562000129565b50600062000129565b60009081526001919091016020526040902054151590565b600060208284031215620001b5578081fd5b81516001600160a01b0381168114620001cc578182fd5b9392505050565b611aef80620001e36000396000f3fe60806040526004361061012e5760003560e01c80639010d07c116100ab578063c15595a11161006f578063c15595a114610319578063ca15c87314610339578063d0e30db014610359578063d547741f14610361578063d8bff5a514610381578063f7f49794146103a157610135565b80639010d07c1461028257806391d14854146102af578063a217fddf146102dc578063a94015c8146102f1578063c0786f691461030657610135565b806336568abe116100f257806336568abe146101ed57806341aa13c51461020d57806353262c51146102225780635486b53a14610242578063603adf091461026257610135565b80631861395c146101375780632017eaf014610157578063248a9ca3146101775780632a5cc062146101ad5780632f2ff15d146101cd57610135565b3661013557005b005b34801561014357600080fd5b506101356101523660046114a6565b6103c1565b34801561016357600080fd5b5061013561017236600461141a565b6104a9565b34801561018357600080fd5b50610197610192366004611600565b6104f2565b6040516101a49190611704565b60405180910390f35b3480156101b957600080fd5b506101356101c836600461151b565b610507565b3480156101d957600080fd5b506101356101e8366004611618565b6105b5565b3480156101f957600080fd5b50610135610208366004611618565b6105fd565b34801561021957600080fd5b5061019761063f565b34801561022e57600080fd5b5061013561023d366004611445565b610645565b34801561024e57600080fd5b5061013561025d366004611445565b6106e8565b34801561026e57600080fd5b5061013561027d3660046113e2565b610793565b34801561028e57600080fd5b506102a261029d36600461163c565b6107db565b6040516101a4919061168e565b3480156102bb57600080fd5b506102cf6102ca366004611618565b610802565b6040516101a491906116f9565b3480156102e857600080fd5b50610197610820565b3480156102fd57600080fd5b50610197610825565b610135610314366004611445565b61083c565b34801561032557600080fd5b5061013561033436600461141a565b6108a4565b34801561034557600080fd5b50610197610354366004611600565b610941565b610135610958565b34801561036d57600080fd5b5061013561037c366004611618565b61095a565b34801561038d57600080fd5b5061019761039c3660046113c6565b610994565b3480156103ad57600080fd5b506101356103bc3660046115a1565b6109a6565b6103cc600033610802565b6103f15760405162461bcd60e51b81526004016103e8906117d5565b60405180910390fd5b806103fd8484846109fe565b600061041b60405161040e90611675565b6040518091039020610941565b905060005b818110156104655761045d60405161043790611675565b604051809103902061037c60405161044e90611675565b604051809103902060006107db565b600101610420565b504360028190556040517f7b1e5a99cfb3a21a53448619825447934102f54788cc32f6d17de36564e30a709161049a91611704565b60405180910390a15050505050565b6104b4600033610802565b6104d05760405162461bcd60e51b81526004016103e8906117d5565b6001600160a01b03909116600090815260016020526040902080549091019055565b60009081526020819052604090206002015490565b610512600033610802565b61052e5760405162461bcd60e51b81526004016103e8906117d5565b8161053b85858585610b13565b600061054c60405161040e90611675565b905060005b818110156105705761056860405161043790611675565b600101610551565b504360028190556040517f7b1e5a99cfb3a21a53448619825447934102f54788cc32f6d17de36564e30a70916105a591611704565b60405180910390a1505050505050565b6000828152602081905260409020600201546105d3906102ca610c63565b6105ef5760405162461bcd60e51b81526004016103e89061174f565b6105f98282610c67565b5050565b610605610c63565b6001600160a01b0316816001600160a01b0316146106355760405162461bcd60e51b81526004016103e8906119a0565b6105f98282610cd6565b60025481565b61066260405161065490611675565b604051809103902033610802565b61067e5760405162461bcd60e51b81526004016103e890611907565b805182511461069f5760405162461bcd60e51b81526004016103e89061197c565b60005b82518110156106e3576106db8382815181106106ba57fe5b60200260200101518383815181106106ce57fe5b6020026020010151610d45565b6001016106a2565b505050565b6106f3600033610802565b61070f5760405162461bcd60e51b81526004016103e8906117d5565b600061071b8383610dbc565b600061072c60405161040e90611675565b905060005b818110156107505761074860405161043790611675565b600101610731565b504360028190556040517f7b1e5a99cfb3a21a53448619825447934102f54788cc32f6d17de36564e30a709161078591611704565b60405180910390a150505050565b61079e600033610802565b6107ba5760405162461bcd60e51b81526004016103e8906117d5565b80156107d0576107cb6000836105b5565b6105f9565b6105f960008361095a565b60008281526020819052604081206107f9908363ffffffff610e3e16565b90505b92915050565b60008281526020819052604081206107f9908363ffffffff610e4a16565b600081565b60405161083190611675565b604051809103902081565b610847600033610802565b6108635760405162461bcd60e51b81526004016103e8906117d5565b600061086f8383610e5f565b600061088060405161040e90611675565b905060005b818110156107505761089c60405161043790611675565b600101610885565b6108af600033610802565b6108cb5760405162461bcd60e51b81526004016103e8906117d5565b6001600160a01b0382166000908152600160205260409081902082905551610904906108f690611675565b6040518091039020836105b5565b7f7ef619bd6be65b04d1a09552b76aafa94f08d0b2f42d743ab897b2c02997d11933836040516109359291906116a2565b60405180910390a15050565b60008181526020819052604081206107fc90610eaa565b565b600082815260208190526040902060020154610978906102ca610c63565b6106355760405162461bcd60e51b81526004016103e8906117f8565b60016020526000908152604090205481565b6109b1600033610802565b6109cd5760405162461bcd60e51b81526004016103e8906117d5565b60005b82518110156106e3576109f68382815181106109e857fe5b6020026020010151836108a4565b6001016109d0565b82828051825114610a215760405162461bcd60e51b81526004016103e8906118d0565b6040516370a0823160e01b815284906001600160a01b038516906370a0823190610a4f90309060040161168e565b60206040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f919061165d565b6000805b8351811015610adc57610ad2848281518110610abb57fe5b602002602001015183610eb590919063ffffffff16565b9150600101610aa3565b5080821015610afd5760405162461bcd60e51b81526004016103e890611899565b610b0988888830610eda565b5050505050505050565b83838051825114610b365760405162461bcd60e51b81526004016103e8906118d0565b6040516370a0823160e01b815285906001600160a01b038616906370a0823190610b6490879060040161168e565b60206040518083038186803b158015610b7c57600080fd5b505afa158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb4919061165d565b6000805b8351811015610bda57610bd0848281518110610abb57fe5b9150600101610bb8565b5080821015610bfb5760405162461bcd60e51b81526004016103e890611899565b6001600160a01b0386163314610c235760405162461bcd60e51b81526004016103e890611848565b6001600160a01b038616301415610c4c5760405162461bcd60e51b81526004016103e8906119ef565b610c5889898989610eda565b505050505050505050565b3390565b6000828152602081905260409020610c85908263ffffffff61115616565b156105f957610c92610c63565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020610cf4908263ffffffff61116b16565b156105f957610d01610c63565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b33600090815260016020526040902054811115610d745760405162461bcd60e51b81526004016103e89061194d565b336000818152600160205260409081902080548490039055517f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc9161093591859085906116bc565b81818051825114610ddf5760405162461bcd60e51b81526004016103e8906118d0565b82476000805b8351811015610e0757610dfd848281518110610abb57fe5b9150600101610de5565b5080821015610e285760405162461bcd60e51b81526004016103e890611899565b610e358787600080610eda565b50505050505050565b60006107f98383611180565b60006107f9836001600160a01b0384166111c5565b81818051825114610e825760405162461bcd60e51b81526004016103e8906118d0565b82346000805b8351811015610e0757610ea0848281518110610abb57fe5b9150600101610e88565b60006107fc826111dd565b6000828201838110156107f95760405162461bcd60e51b81526004016103e89061179e565b60006001600160a01b03831615801590610efc57506001600160a01b03821615155b9050306001600160a01b0383161460005b8651811015610e355760006001600160a01b0316878281518110610f2d57fe5b60200260200101516001600160a01b031614158015610f5f57506000868281518110610f5557fe5b6020026020010151115b1561114e5782156110cb57811561101c57846001600160a01b031663a9059cbb888381518110610f8b57fe5b6020026020010151888481518110610f9f57fe5b60200260200101516040518363ffffffff1660e01b8152600401610fc49291906116e0565b602060405180830381600087803b158015610fde57600080fd5b505af1158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101691906115e4565b506110c6565b846001600160a01b03166323b872dd8589848151811061103857fe5b602002602001015189858151811061104c57fe5b60200260200101516040518463ffffffff1660e01b8152600401611072939291906116bc565b602060405180830381600087803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c491906115e4565b505b61114e565b8681815181106110d757fe5b60200260200101516001600160a01b03168682815181106110f457fe5b60200260200101516040516111089061168b565b60006040518083038185875af1925050503d8060008114611145576040519150601f19603f3d011682016040523d82523d6000602084013e61114a565b606091505b5050505b600101610f0d565b60006107f9836001600160a01b0384166111e1565b60006107f9836001600160a01b03841661122b565b815460009082106111a35760405162461bcd60e51b81526004016103e89061170d565b8260000182815481106111b257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60006111ed83836111c5565b611223575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107fc565b5060006107fc565b600081815260018301602052604081205480156112e7578354600019808301919081019060009087908390811061125e57fe5b906000526020600020015490508087600001848154811061127b57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806112ab57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107fc565b60009150506107fc565b600082601f830112611301578081fd5b813561131461130f82611a73565b611a4c565b81815291506020808301908481018184028601820187101561133557600080fd5b60005b8481101561135d57813561134b81611a93565b84529282019290820190600101611338565b505050505092915050565b600082601f830112611378578081fd5b813561138661130f82611a73565b8181529150602080830190848101818402860182018710156113a757600080fd5b60005b8481101561135d578135845292820192908201906001016113aa565b6000602082840312156113d7578081fd5b81356107f981611a93565b600080604083850312156113f4578081fd5b82356113ff81611a93565b9150602083013561140f81611aab565b809150509250929050565b6000806040838503121561142c578182fd5b823561143781611a93565b946020939093013593505050565b60008060408385031215611457578182fd5b823567ffffffffffffffff8082111561146e578384fd5b61147a868387016112f1565b9350602085013591508082111561148f578283fd5b5061149c85828601611368565b9150509250929050565b6000806000606084860312156114ba578081fd5b833567ffffffffffffffff808211156114d1578283fd5b6114dd878388016112f1565b945060208601359150808211156114f2578283fd5b506114ff86828701611368565b925050604084013561151081611a93565b809150509250925092565b60008060008060808587031215611530578081fd5b843567ffffffffffffffff80821115611547578283fd5b611553888389016112f1565b95506020870135915080821115611568578283fd5b5061157587828801611368565b935050604085013561158681611a93565b9150606085013561159681611a93565b939692955090935050565b600080604083850312156115b3578182fd5b823567ffffffffffffffff8111156115c9578283fd5b6115d5858286016112f1565b95602094909401359450505050565b6000602082840312156115f5578081fd5b81516107f981611aab565b600060208284031215611611578081fd5b5035919050565b6000806040838503121561162a578182fd5b82359150602083013561140f81611a93565b6000806040838503121561164e578182fd5b50508035926020909101359150565b60006020828403121561166e578081fd5b5051919050565b69564f5445525f524f4c4560b01b8152600a0190565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600990820152682727aa1020a226a4a760b91b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526031908201527f596f752063616e2774206469737472696275746520736f6d656f6e6520656c7360408201527065277320746f6b656e2062616c616e636560781b606082015260800190565b6020808252601f908201527f4e6f7420656e6f7567682065746820666f7220646973747269627574696f6e00604082015260600190565b6020808252601c908201527f496e636f727265637420646973747269627574696f6e20726174696f00000000604082015260600190565b60208082526026908201527f596f7520646f6e2774206861766520746865207065726d697373696f6e20746f604082015265103b37ba329760d11b606082015260800190565b602080825260159082015274139bdd08195b9bdd59da081d9bdd195cc81b19599d605a1b604082015260600190565b6020808252600a908201526957726f6e672073697a6560b01b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252603b908201527f557365206f74686572207368617265546f6b656e206d6574686f6420666f722060408201527f636f6e747261637420746f6b656e20646973747269627574696f6e0000000000606082015260800190565b60405181810167ffffffffffffffff81118282101715611a6b57600080fd5b604052919050565b600067ffffffffffffffff821115611a89578081fd5b5060209081020190565b6001600160a01b0381168114611aa857600080fd5b50565b8015158114611aa857600080fdfea264697066735822122063a4c668bc2e1626511e0e2e0667a00de9a8a708c16382df8fa14e9388d6b49f64736f6c63430006070033",
  "deployedBytecode": "0x60806040526004361061012e5760003560e01c80639010d07c116100ab578063c15595a11161006f578063c15595a114610319578063ca15c87314610339578063d0e30db014610359578063d547741f14610361578063d8bff5a514610381578063f7f49794146103a157610135565b80639010d07c1461028257806391d14854146102af578063a217fddf146102dc578063a94015c8146102f1578063c0786f691461030657610135565b806336568abe116100f257806336568abe146101ed57806341aa13c51461020d57806353262c51146102225780635486b53a14610242578063603adf091461026257610135565b80631861395c146101375780632017eaf014610157578063248a9ca3146101775780632a5cc062146101ad5780632f2ff15d146101cd57610135565b3661013557005b005b34801561014357600080fd5b506101356101523660046114a6565b6103c1565b34801561016357600080fd5b5061013561017236600461141a565b6104a9565b34801561018357600080fd5b50610197610192366004611600565b6104f2565b6040516101a49190611704565b60405180910390f35b3480156101b957600080fd5b506101356101c836600461151b565b610507565b3480156101d957600080fd5b506101356101e8366004611618565b6105b5565b3480156101f957600080fd5b50610135610208366004611618565b6105fd565b34801561021957600080fd5b5061019761063f565b34801561022e57600080fd5b5061013561023d366004611445565b610645565b34801561024e57600080fd5b5061013561025d366004611445565b6106e8565b34801561026e57600080fd5b5061013561027d3660046113e2565b610793565b34801561028e57600080fd5b506102a261029d36600461163c565b6107db565b6040516101a4919061168e565b3480156102bb57600080fd5b506102cf6102ca366004611618565b610802565b6040516101a491906116f9565b3480156102e857600080fd5b50610197610820565b3480156102fd57600080fd5b50610197610825565b610135610314366004611445565b61083c565b34801561032557600080fd5b5061013561033436600461141a565b6108a4565b34801561034557600080fd5b50610197610354366004611600565b610941565b610135610958565b34801561036d57600080fd5b5061013561037c366004611618565b61095a565b34801561038d57600080fd5b5061019761039c3660046113c6565b610994565b3480156103ad57600080fd5b506101356103bc3660046115a1565b6109a6565b6103cc600033610802565b6103f15760405162461bcd60e51b81526004016103e8906117d5565b60405180910390fd5b806103fd8484846109fe565b600061041b60405161040e90611675565b6040518091039020610941565b905060005b818110156104655761045d60405161043790611675565b604051809103902061037c60405161044e90611675565b604051809103902060006107db565b600101610420565b504360028190556040517f7b1e5a99cfb3a21a53448619825447934102f54788cc32f6d17de36564e30a709161049a91611704565b60405180910390a15050505050565b6104b4600033610802565b6104d05760405162461bcd60e51b81526004016103e8906117d5565b6001600160a01b03909116600090815260016020526040902080549091019055565b60009081526020819052604090206002015490565b610512600033610802565b61052e5760405162461bcd60e51b81526004016103e8906117d5565b8161053b85858585610b13565b600061054c60405161040e90611675565b905060005b818110156105705761056860405161043790611675565b600101610551565b504360028190556040517f7b1e5a99cfb3a21a53448619825447934102f54788cc32f6d17de36564e30a70916105a591611704565b60405180910390a1505050505050565b6000828152602081905260409020600201546105d3906102ca610c63565b6105ef5760405162461bcd60e51b81526004016103e89061174f565b6105f98282610c67565b5050565b610605610c63565b6001600160a01b0316816001600160a01b0316146106355760405162461bcd60e51b81526004016103e8906119a0565b6105f98282610cd6565b60025481565b61066260405161065490611675565b604051809103902033610802565b61067e5760405162461bcd60e51b81526004016103e890611907565b805182511461069f5760405162461bcd60e51b81526004016103e89061197c565b60005b82518110156106e3576106db8382815181106106ba57fe5b60200260200101518383815181106106ce57fe5b6020026020010151610d45565b6001016106a2565b505050565b6106f3600033610802565b61070f5760405162461bcd60e51b81526004016103e8906117d5565b600061071b8383610dbc565b600061072c60405161040e90611675565b905060005b818110156107505761074860405161043790611675565b600101610731565b504360028190556040517f7b1e5a99cfb3a21a53448619825447934102f54788cc32f6d17de36564e30a709161078591611704565b60405180910390a150505050565b61079e600033610802565b6107ba5760405162461bcd60e51b81526004016103e8906117d5565b80156107d0576107cb6000836105b5565b6105f9565b6105f960008361095a565b60008281526020819052604081206107f9908363ffffffff610e3e16565b90505b92915050565b60008281526020819052604081206107f9908363ffffffff610e4a16565b600081565b60405161083190611675565b604051809103902081565b610847600033610802565b6108635760405162461bcd60e51b81526004016103e8906117d5565b600061086f8383610e5f565b600061088060405161040e90611675565b905060005b818110156107505761089c60405161043790611675565b600101610885565b6108af600033610802565b6108cb5760405162461bcd60e51b81526004016103e8906117d5565b6001600160a01b0382166000908152600160205260409081902082905551610904906108f690611675565b6040518091039020836105b5565b7f7ef619bd6be65b04d1a09552b76aafa94f08d0b2f42d743ab897b2c02997d11933836040516109359291906116a2565b60405180910390a15050565b60008181526020819052604081206107fc90610eaa565b565b600082815260208190526040902060020154610978906102ca610c63565b6106355760405162461bcd60e51b81526004016103e8906117f8565b60016020526000908152604090205481565b6109b1600033610802565b6109cd5760405162461bcd60e51b81526004016103e8906117d5565b60005b82518110156106e3576109f68382815181106109e857fe5b6020026020010151836108a4565b6001016109d0565b82828051825114610a215760405162461bcd60e51b81526004016103e8906118d0565b6040516370a0823160e01b815284906001600160a01b038516906370a0823190610a4f90309060040161168e565b60206040518083038186803b158015610a6757600080fd5b505afa158015610a7b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a9f919061165d565b6000805b8351811015610adc57610ad2848281518110610abb57fe5b602002602001015183610eb590919063ffffffff16565b9150600101610aa3565b5080821015610afd5760405162461bcd60e51b81526004016103e890611899565b610b0988888830610eda565b5050505050505050565b83838051825114610b365760405162461bcd60e51b81526004016103e8906118d0565b6040516370a0823160e01b815285906001600160a01b038616906370a0823190610b6490879060040161168e565b60206040518083038186803b158015610b7c57600080fd5b505afa158015610b90573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610bb4919061165d565b6000805b8351811015610bda57610bd0848281518110610abb57fe5b9150600101610bb8565b5080821015610bfb5760405162461bcd60e51b81526004016103e890611899565b6001600160a01b0386163314610c235760405162461bcd60e51b81526004016103e890611848565b6001600160a01b038616301415610c4c5760405162461bcd60e51b81526004016103e8906119ef565b610c5889898989610eda565b505050505050505050565b3390565b6000828152602081905260409020610c85908263ffffffff61115616565b156105f957610c92610c63565b6001600160a01b0316816001600160a01b0316837f2f8788117e7eff1d82e926ec794901d17c78024a50270940304540a733656f0d60405160405180910390a45050565b6000828152602081905260409020610cf4908263ffffffff61116b16565b156105f957610d01610c63565b6001600160a01b0316816001600160a01b0316837ff6391f5c32d9c69d2a47ea670b442974b53935d1edc7fd64eb21e047a839171b60405160405180910390a45050565b33600090815260016020526040902054811115610d745760405162461bcd60e51b81526004016103e89061194d565b336000818152600160205260409081902080548490039055517f66a9138482c99e9baf08860110ef332cc0c23b4a199a53593d8db0fc8f96fbfc9161093591859085906116bc565b81818051825114610ddf5760405162461bcd60e51b81526004016103e8906118d0565b82476000805b8351811015610e0757610dfd848281518110610abb57fe5b9150600101610de5565b5080821015610e285760405162461bcd60e51b81526004016103e890611899565b610e358787600080610eda565b50505050505050565b60006107f98383611180565b60006107f9836001600160a01b0384166111c5565b81818051825114610e825760405162461bcd60e51b81526004016103e8906118d0565b82346000805b8351811015610e0757610ea0848281518110610abb57fe5b9150600101610e88565b60006107fc826111dd565b6000828201838110156107f95760405162461bcd60e51b81526004016103e89061179e565b60006001600160a01b03831615801590610efc57506001600160a01b03821615155b9050306001600160a01b0383161460005b8651811015610e355760006001600160a01b0316878281518110610f2d57fe5b60200260200101516001600160a01b031614158015610f5f57506000868281518110610f5557fe5b6020026020010151115b1561114e5782156110cb57811561101c57846001600160a01b031663a9059cbb888381518110610f8b57fe5b6020026020010151888481518110610f9f57fe5b60200260200101516040518363ffffffff1660e01b8152600401610fc49291906116e0565b602060405180830381600087803b158015610fde57600080fd5b505af1158015610ff2573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061101691906115e4565b506110c6565b846001600160a01b03166323b872dd8589848151811061103857fe5b602002602001015189858151811061104c57fe5b60200260200101516040518463ffffffff1660e01b8152600401611072939291906116bc565b602060405180830381600087803b15801561108c57600080fd5b505af11580156110a0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110c491906115e4565b505b61114e565b8681815181106110d757fe5b60200260200101516001600160a01b03168682815181106110f457fe5b60200260200101516040516111089061168b565b60006040518083038185875af1925050503d8060008114611145576040519150601f19603f3d011682016040523d82523d6000602084013e61114a565b606091505b5050505b600101610f0d565b60006107f9836001600160a01b0384166111e1565b60006107f9836001600160a01b03841661122b565b815460009082106111a35760405162461bcd60e51b81526004016103e89061170d565b8260000182815481106111b257fe5b9060005260206000200154905092915050565b60009081526001919091016020526040902054151590565b5490565b60006111ed83836111c5565b611223575081546001818101845560008481526020808220909301849055845484825282860190935260409020919091556107fc565b5060006107fc565b600081815260018301602052604081205480156112e7578354600019808301919081019060009087908390811061125e57fe5b906000526020600020015490508087600001848154811061127b57fe5b6000918252602080832090910192909255828152600189810190925260409020908401905586548790806112ab57fe5b600190038181906000526020600020016000905590558660010160008781526020019081526020016000206000905560019450505050506107fc565b60009150506107fc565b600082601f830112611301578081fd5b813561131461130f82611a73565b611a4c565b81815291506020808301908481018184028601820187101561133557600080fd5b60005b8481101561135d57813561134b81611a93565b84529282019290820190600101611338565b505050505092915050565b600082601f830112611378578081fd5b813561138661130f82611a73565b8181529150602080830190848101818402860182018710156113a757600080fd5b60005b8481101561135d578135845292820192908201906001016113aa565b6000602082840312156113d7578081fd5b81356107f981611a93565b600080604083850312156113f4578081fd5b82356113ff81611a93565b9150602083013561140f81611aab565b809150509250929050565b6000806040838503121561142c578182fd5b823561143781611a93565b946020939093013593505050565b60008060408385031215611457578182fd5b823567ffffffffffffffff8082111561146e578384fd5b61147a868387016112f1565b9350602085013591508082111561148f578283fd5b5061149c85828601611368565b9150509250929050565b6000806000606084860312156114ba578081fd5b833567ffffffffffffffff808211156114d1578283fd5b6114dd878388016112f1565b945060208601359150808211156114f2578283fd5b506114ff86828701611368565b925050604084013561151081611a93565b809150509250925092565b60008060008060808587031215611530578081fd5b843567ffffffffffffffff80821115611547578283fd5b611553888389016112f1565b95506020870135915080821115611568578283fd5b5061157587828801611368565b935050604085013561158681611a93565b9150606085013561159681611a93565b939692955090935050565b600080604083850312156115b3578182fd5b823567ffffffffffffffff8111156115c9578283fd5b6115d5858286016112f1565b95602094909401359450505050565b6000602082840312156115f5578081fd5b81516107f981611aab565b600060208284031215611611578081fd5b5035919050565b6000806040838503121561162a578182fd5b82359150602083013561140f81611a93565b6000806040838503121561164e578182fd5b50508035926020909101359150565b60006020828403121561166e578081fd5b5051919050565b69564f5445525f524f4c4560b01b8152600a0190565b90565b6001600160a01b0391909116815260200190565b6001600160a01b0392831681529116602082015260400190565b6001600160a01b039384168152919092166020820152604081019190915260600190565b6001600160a01b03929092168252602082015260400190565b901515815260200190565b90815260200190565b60208082526022908201527f456e756d657261626c655365743a20696e646578206f7574206f6620626f756e604082015261647360f01b606082015260800190565b6020808252602f908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526e0818591b5a5b881d1bc819dc985b9d608a1b606082015260800190565b6020808252601b908201527f536166654d6174683a206164646974696f6e206f766572666c6f770000000000604082015260600190565b6020808252600990820152682727aa1020a226a4a760b91b604082015260600190565b60208082526030908201527f416363657373436f6e74726f6c3a2073656e646572206d75737420626520616e60408201526f2061646d696e20746f207265766f6b6560801b606082015260800190565b60208082526031908201527f596f752063616e2774206469737472696275746520736f6d656f6e6520656c7360408201527065277320746f6b656e2062616c616e636560781b606082015260800190565b6020808252601f908201527f4e6f7420656e6f7567682065746820666f7220646973747269627574696f6e00604082015260600190565b6020808252601c908201527f496e636f727265637420646973747269627574696f6e20726174696f00000000604082015260600190565b60208082526026908201527f596f7520646f6e2774206861766520746865207065726d697373696f6e20746f604082015265103b37ba329760d11b606082015260800190565b602080825260159082015274139bdd08195b9bdd59da081d9bdd195cc81b19599d605a1b604082015260600190565b6020808252600a908201526957726f6e672073697a6560b01b604082015260600190565b6020808252602f908201527f416363657373436f6e74726f6c3a2063616e206f6e6c792072656e6f756e636560408201526e103937b632b9903337b91039b2b63360891b606082015260800190565b6020808252603b908201527f557365206f74686572207368617265546f6b656e206d6574686f6420666f722060408201527f636f6e747261637420746f6b656e20646973747269627574696f6e0000000000606082015260800190565b60405181810167ffffffffffffffff81118282101715611a6b57600080fd5b604052919050565b600067ffffffffffffffff821115611a89578081fd5b5060209081020190565b6001600160a01b0381168114611aa857600080fd5b50565b8015158114611aa857600080fdfea264697066735822122063a4c668bc2e1626511e0e2e0667a00de9a8a708c16382df8fa14e9388d6b49f64736f6c63430006070033",
  "devdoc": {
    "methods": {
      "getRoleAdmin(bytes32)": {
        "details": "Returns the admin role that controls `role`. See {grantRole} and {revokeRole}.     * To change a role's admin, use {_setRoleAdmin}."
      },
      "getRoleMember(bytes32,uint256)": {
        "details": "Returns one of the accounts that have `role`. `index` must be a value between 0 and {getRoleMemberCount}, non-inclusive.     * Role bearers are not sorted in any particular way, and their ordering may change at any point.     * WARNING: When using {getRoleMember} and {getRoleMemberCount}, make sure you perform all queries on the same block. See the following https://forum.openzeppelin.com/t/iterating-over-elements-on-enumerableset-in-openzeppelin-contracts/2296[forum post] for more information."
      },
      "getRoleMemberCount(bytes32)": {
        "details": "Returns the number of accounts that have `role`. Can be used together with {getRoleMember} to enumerate all bearers of a role."
      },
      "grantRole(bytes32,address)": {
        "details": "Grants `role` to `account`.     * If `account` had not been already granted `role`, emits a {RoleGranted} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      },
      "hasRole(bytes32,address)": {
        "details": "Returns `true` if `account` has been granted `role`."
      },
      "renounceRole(bytes32,address)": {
        "details": "Revokes `role` from the calling account.     * Roles are often managed via {grantRole} and {revokeRole}: this function's purpose is to provide a mechanism for accounts to lose their privileges if they are compromised (such as when a trusted device is misplaced).     * If the calling account had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must be `account`."
      },
      "revokeRole(bytes32,address)": {
        "details": "Revokes `role` from `account`.     * If `account` had been granted `role`, emits a {RoleRevoked} event.     * Requirements:     * - the caller must have ``role``'s admin role."
      }
    }
  },
  "userdoc": {
    "methods": {}
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 22,
        "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
        "label": "_roles",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_bytes32,t_struct(RoleData)18_storage)"
      },
      {
        "astId": 1902,
        "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
        "label": "votes",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 1904,
        "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
        "label": "currentElectionStartBlock",
        "offset": 0,
        "slot": "2",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_bytes32)dyn_storage": {
        "base": "t_bytes32",
        "encoding": "dynamic_array",
        "label": "bytes32[]",
        "numberOfBytes": "32"
      },
      "t_bytes32": {
        "encoding": "inplace",
        "label": "bytes32",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_mapping(t_bytes32,t_struct(RoleData)18_storage)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => struct AccessControl.RoleData)",
        "numberOfBytes": "32",
        "value": "t_struct(RoleData)18_storage"
      },
      "t_mapping(t_bytes32,t_uint256)": {
        "encoding": "mapping",
        "key": "t_bytes32",
        "label": "mapping(bytes32 => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_struct(AddressSet)1310_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.AddressSet",
        "members": [
          {
            "astId": 1309,
            "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
            "label": "_inner",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(Set)1045_storage"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_struct(RoleData)18_storage": {
        "encoding": "inplace",
        "label": "struct AccessControl.RoleData",
        "members": [
          {
            "astId": 15,
            "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
            "label": "members",
            "offset": 0,
            "slot": "0",
            "type": "t_struct(AddressSet)1310_storage"
          },
          {
            "astId": 17,
            "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
            "label": "adminRole",
            "offset": 0,
            "slot": "2",
            "type": "t_bytes32"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(Set)1045_storage": {
        "encoding": "inplace",
        "label": "struct EnumerableSet.Set",
        "members": [
          {
            "astId": 1040,
            "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
            "label": "_values",
            "offset": 0,
            "slot": "0",
            "type": "t_array(t_bytes32)dyn_storage"
          },
          {
            "astId": 1044,
            "contract": "contracts/QuadraticDiplomacyContract.sol:QuadraticDiplomacyContract",
            "label": "_indexes",
            "offset": 0,
            "slot": "1",
            "type": "t_mapping(t_bytes32,t_uint256)"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}