{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState}from\"react\";/*\r\n  ~ What it does? ~\r\n\r\n  Gets a tokenlist (see more at https://tokenlists.org/), returning the .tokens only\r\n\r\n  ~ How can I use? ~\r\n\r\n  const tokenList = useTokenList(); <- default returns the Unsiwap tokens\r\n  const tokenList = useTokenList(\"https://gateway.ipfs.io/ipns/tokens.uniswap.org\");\r\n\r\n  ~ Features ~\r\n\r\n  - Optional - specify chainId to filter by chainId\r\n*/var useTokenList=function useTokenList(tokenListUri,chainId){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),tokenList=_useState2[0],setTokenList=_useState2[1];var _tokenListUri=tokenListUri||\"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";useEffect(function(){var getTokenList=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var _tokenList2,tokenListJson,_tokenList;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!navigator.onLine){_context.next=15;break;}_context.prev=1;_context.next=4;return fetch(_tokenListUri);case 4:_tokenList2=_context.sent;_context.next=7;return _tokenList2.json();case 7:tokenListJson=_context.sent;if(chainId){_tokenList=tokenListJson.tokens.filter(function(t){return t.chainId===chainId;});}else{_tokenList=tokenListJson;}setTokenList(_tokenList.tokens);_context.next=15;break;case 12:_context.prev=12;_context.t0=_context[\"catch\"](1);console.log(_context.t0);case 15:case\"end\":return _context.stop();}}},_callee,null,[[1,12]]);}));return function getTokenList(){return _ref.apply(this,arguments);};}();getTokenList();},[tokenListUri]);return tokenList;};export default useTokenList;","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/TokenList.js"],"names":["useEffect","useState","useTokenList","tokenListUri","chainId","tokenList","setTokenList","_tokenListUri","getTokenList","navigator","onLine","fetch","json","tokenListJson","_tokenList","tokens","filter","t","console","log"],"mappings":"+hBAAA,OAASA,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,GAAMC,CAAAA,YAAY,CAAG,QAAfA,CAAAA,YAAe,CAACC,YAAD,CAAeC,OAAf,CAA2B,CAC9C,cAAkCH,QAAQ,CAAC,EAAD,CAA1C,wCAAOI,SAAP,eAAkBC,YAAlB,eAEA,GAAMC,CAAAA,aAAa,CAAGJ,YAAY,EAAI,iDAAtC,CAEAH,SAAS,CAAC,UAAM,CACd,GAAMQ,CAAAA,YAAY,0FAAG,gLACfC,SAAS,CAACC,MADK,gEAGSC,CAAAA,KAAK,CAACJ,aAAD,CAHd,QAGTF,WAHS,qCAIaA,CAAAA,WAAS,CAACO,IAAV,EAJb,QAITC,aAJS,eAOf,GAAIT,OAAJ,CAAa,CACXU,UAAU,CAAGD,aAAa,CAACE,MAAd,CAAqBC,MAArB,CAA4B,SAAUC,CAAV,CAAa,CACpD,MAAOA,CAAAA,CAAC,CAACb,OAAF,GAAcA,OAArB,CACD,CAFY,CAAb,CAGD,CAJD,IAIO,CACLU,UAAU,CAAGD,aAAb,CACD,CAEDP,YAAY,CAACQ,UAAU,CAACC,MAAZ,CAAZ,CAfe,iFAiBfG,OAAO,CAACC,GAAR,cAjBe,qEAAH,kBAAZX,CAAAA,YAAY,0CAAlB,CAqBAA,YAAY,GACb,CAvBQ,CAuBN,CAACL,YAAD,CAvBM,CAAT,CAyBA,MAAOE,CAAAA,SAAP,CACD,CA/BD,CAiCA,cAAeH,CAAAA,YAAf","sourcesContent":["import { useEffect, useState } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets a tokenlist (see more at https://tokenlists.org/), returning the .tokens only\r\n\r\n  ~ How can I use? ~\r\n\r\n  const tokenList = useTokenList(); <- default returns the Unsiwap tokens\r\n  const tokenList = useTokenList(\"https://gateway.ipfs.io/ipns/tokens.uniswap.org\");\r\n\r\n  ~ Features ~\r\n\r\n  - Optional - specify chainId to filter by chainId\r\n*/\r\n\r\nconst useTokenList = (tokenListUri, chainId) => {\r\n  const [tokenList, setTokenList] = useState([]);\r\n\r\n  const _tokenListUri = tokenListUri || \"https://gateway.ipfs.io/ipns/tokens.uniswap.org\";\r\n\r\n  useEffect(() => {\r\n    const getTokenList = async () => {\r\n      if (navigator.onLine) {\r\n        try {\r\n          const tokenList = await fetch(_tokenListUri);\r\n          const tokenListJson = await tokenList.json();\r\n          let _tokenList;\r\n\r\n          if (chainId) {\r\n            _tokenList = tokenListJson.tokens.filter(function (t) {\r\n              return t.chainId === chainId;\r\n            });\r\n          } else {\r\n            _tokenList = tokenListJson;\r\n          }\r\n\r\n          setTokenList(_tokenList.tokens);\r\n        } catch (e) {\r\n          console.log(e);\r\n        }\r\n      }\r\n    };\r\n    getTokenList();\r\n  }, [tokenListUri]);\r\n\r\n  return tokenList;\r\n};\r\n\r\nexport default useTokenList;\r\n"]},"metadata":{},"sourceType":"module"}