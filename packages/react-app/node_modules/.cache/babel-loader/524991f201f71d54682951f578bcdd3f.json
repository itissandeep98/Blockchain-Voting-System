{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useCallback,useState,useEffect}from\"react\";import useOnBlock from\"./OnBlock\";import usePoller from\"./Poller\";/*\r\n  ~ What it does? ~\r\n\r\n  Gets your balance in ETH from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get balance corresponding to given address\r\n  - Change provider to access balance on different chains (ex. mainnetProvider)\r\n  - If no pollTime is passed, the balance will update on every new block\r\n*/var DEBUG=false;export default function useBalance(provider,address){var pollTime=arguments.length>2&&arguments[2]!==undefined?arguments[2]:0;var _useState=useState(),_useState2=_slicedToArray(_useState,2),balance=_useState2[0],setBalance=_useState2[1];var pollBalance=useCallback(/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(provider,address){var newBalance;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(!(provider&&address)){_context.next=5;break;}_context.next=3;return provider.getBalance(address);case 3:newBalance=_context.sent;if(newBalance!==balance){setBalance(newBalance);}case 5:case\"end\":return _context.stop();}}},_callee);}));return function(_x,_x2){return _ref.apply(this,arguments);};}(),[provider,address]);// Only pass a provider to watch on a block if there is no pollTime\nuseOnBlock(pollTime===0&&provider,function(){if(provider&&address&&pollTime===0){pollBalance(provider,address);}});// Update balance when the address or provider changes\nuseEffect(function(){if(address&&provider)pollBalance(provider,address);},[address,provider,pollBalance]);// Use a poller if a pollTime is provided\nusePoller(/*#__PURE__*/_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee2(){return _regeneratorRuntime.wrap(function _callee2$(_context2){while(1){switch(_context2.prev=_context2.next){case 0:if(provider&&address&&pollTime>0){if(DEBUG)console.log(\"polling!\",address);pollBalance();}case 1:case\"end\":return _context2.stop();}}},_callee2);})),pollTime,provider&&address);return balance;}","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/Balance.js"],"names":["useCallback","useState","useEffect","useOnBlock","usePoller","DEBUG","useBalance","provider","address","pollTime","balance","setBalance","pollBalance","getBalance","newBalance","console","log"],"mappings":"+hBAAA,OAASA,WAAT,CAAsBC,QAAtB,CAAgCC,SAAhC,KAAiD,OAAjD,CACA,MAAOC,CAAAA,UAAP,KAAuB,WAAvB,CACA,MAAOC,CAAAA,SAAP,KAAsB,UAAtB,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,GAAMC,CAAAA,KAAK,CAAG,KAAd,CAEA,cAAe,SAASC,CAAAA,UAAT,CAAoBC,QAApB,CAA8BC,OAA9B,CAAqD,IAAdC,CAAAA,QAAc,2DAAH,CAAG,CAClE,cAA8BR,QAAQ,EAAtC,wCAAOS,OAAP,eAAgBC,UAAhB,eAEA,GAAMC,CAAAA,WAAW,CAAGZ,WAAW,0FAC7B,iBAAOO,QAAP,CAAiBC,OAAjB,sIACMD,QAAQ,EAAIC,OADlB,gDAE6BD,CAAAA,QAAQ,CAACM,UAAT,CAAoBL,OAApB,CAF7B,QAEUM,UAFV,eAGI,GAAIA,UAAU,GAAKJ,OAAnB,CAA4B,CAC1BC,UAAU,CAACG,UAAD,CAAV,CACD,CALL,sDAD6B,mEAS7B,CAACP,QAAD,CAAWC,OAAX,CAT6B,CAA/B,CAYA;AACAL,UAAU,CAACM,QAAQ,GAAK,CAAb,EAAkBF,QAAnB,CAA6B,UAAM,CAC3C,GAAIA,QAAQ,EAAIC,OAAZ,EAAuBC,QAAQ,GAAK,CAAxC,CAA2C,CACzCG,WAAW,CAACL,QAAD,CAAWC,OAAX,CAAX,CACD,CACF,CAJS,CAAV,CAMA;AACAN,SAAS,CAAC,UAAM,CACd,GAAIM,OAAO,EAAID,QAAf,CAAyBK,WAAW,CAACL,QAAD,CAAWC,OAAX,CAAX,CAC1B,CAFQ,CAEN,CAACA,OAAD,CAAUD,QAAV,CAAoBK,WAApB,CAFM,CAAT,CAIA;AACAR,SAAS,sEACP,wIACE,GAAIG,QAAQ,EAAIC,OAAZ,EAAuBC,QAAQ,CAAG,CAAtC,CAAyC,CACvC,GAAIJ,KAAJ,CAAWU,OAAO,CAACC,GAAR,CAAY,UAAZ,CAAwBR,OAAxB,EACXI,WAAW,GACZ,CAJH,wDADO,GAOPH,QAPO,CAQPF,QAAQ,EAAIC,OARL,CAAT,CAWA,MAAOE,CAAAA,OAAP,CACD","sourcesContent":["import { useCallback, useState, useEffect } from \"react\";\r\nimport useOnBlock from \"./OnBlock\";\r\nimport usePoller from \"./Poller\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets your balance in ETH from given address and provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const yourLocalBalance = useBalance(localProvider, address);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address and get balance corresponding to given address\r\n  - Change provider to access balance on different chains (ex. mainnetProvider)\r\n  - If no pollTime is passed, the balance will update on every new block\r\n*/\r\n\r\nconst DEBUG = false;\r\n\r\nexport default function useBalance(provider, address, pollTime = 0) {\r\n  const [balance, setBalance] = useState();\r\n\r\n  const pollBalance = useCallback(\r\n    async (provider, address) => {\r\n      if (provider && address) {\r\n        const newBalance = await provider.getBalance(address);\r\n        if (newBalance !== balance) {\r\n          setBalance(newBalance);\r\n        }\r\n      }\r\n    },\r\n    [provider, address],\r\n  );\r\n\r\n  // Only pass a provider to watch on a block if there is no pollTime\r\n  useOnBlock(pollTime === 0 && provider, () => {\r\n    if (provider && address && pollTime === 0) {\r\n      pollBalance(provider, address);\r\n    }\r\n  });\r\n\r\n  // Update balance when the address or provider changes\r\n  useEffect(() => {\r\n    if (address && provider) pollBalance(provider, address);\r\n  }, [address, provider, pollBalance]);\r\n\r\n  // Use a poller if a pollTime is provided\r\n  usePoller(\r\n    async () => {\r\n      if (provider && address && pollTime > 0) {\r\n        if (DEBUG) console.log(\"polling!\", address);\r\n        pollBalance();\r\n      }\r\n    },\r\n    pollTime,\r\n    provider && address,\r\n  );\r\n\r\n  return balance;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}