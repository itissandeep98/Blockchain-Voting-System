{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState } from \"react\"; // Hook from useHooks! (https://usehooks.com/useLocalStorage/)\n\nexport default function useLocalStorage(key, initialValue, ttl) {\n  _s();\n\n  // State to store our value\n  // Pass initial state function to useState so logic is only executed once\n  const [storedValue, setStoredValue] = useState(() => {\n    try {\n      // Get from local storage by key\n      const item = window.localStorage.getItem(key);\n      const parsedItem = item ? JSON.parse(item) : initialValue;\n\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\n        const now = new Date();\n\n        if (ttl && now.getTime() > parsedItem.expiry) {\n          // If the item is expired, delete the item from storage\n          // and return null\n          window.localStorage.removeItem(key);\n          return initialValue;\n        }\n\n        return parsedItem.value;\n      } // Parse stored json or if none return initialValue\n\n\n      return parsedItem;\n    } catch (error) {\n      // If error also return initialValue\n      console.log(error);\n      return initialValue;\n    }\n  }); // Return a wrapped version of useState's setter function that ...\n  // ... persists the new value to localStorage.\n\n  const setValue = value => {\n    try {\n      // Allow value to be a function so we have same API as useState\n      const valueToStore = value instanceof Function ? value(storedValue) : value; // Save state\n\n      setStoredValue(valueToStore); // Save to local storage\n\n      if (ttl) {\n        const now = new Date(); // `item` is an object which contains the original value\n        // as well as the time when it's supposed to expire\n\n        const item = {\n          value: valueToStore,\n          expiry: now.getTime() + ttl\n        };\n        window.localStorage.setItem(key, JSON.stringify(item));\n      } else {\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\n      }\n    } catch (error) {\n      // A more advanced implementation would handle the error case\n      console.log(error);\n    }\n  };\n\n  return [storedValue, setValue];\n}\n\n_s(useLocalStorage, \"K+zwYhHxesfTmf92qAm0TUoesok=\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/LocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","ttl","storedValue","setStoredValue","item","window","localStorage","getItem","parsedItem","JSON","parse","now","Date","getTime","expiry","removeItem","value","error","console","log","setValue","valueToStore","Function","setItem","stringify"],"mappings":";;AAAA,SAASA,QAAT,QAAyB,OAAzB,C,CACA;;AACA,eAAe,SAASC,eAAT,CAAyBC,GAAzB,EAA8BC,YAA9B,EAA4CC,GAA5C,EAAiD;AAAA;;AAC9D;AACA;AACA,QAAM,CAACC,WAAD,EAAcC,cAAd,IAAgCN,QAAQ,CAAC,MAAM;AACnD,QAAI;AACF;AACA,YAAMO,IAAI,GAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BR,GAA5B,CAAb;AACA,YAAMS,UAAU,GAAGJ,IAAI,GAAGK,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAH,GAAsBJ,YAA7C;;AAEA,UAAI,OAAOQ,UAAP,KAAsB,QAAtB,IAAkCA,UAAU,KAAK,IAAjD,IAAyD,YAAYA,UAArE,IAAmF,WAAWA,UAAlG,EAA8G;AAC5G,cAAMG,GAAG,GAAG,IAAIC,IAAJ,EAAZ;;AACA,YAAIX,GAAG,IAAIU,GAAG,CAACE,OAAJ,KAAgBL,UAAU,CAACM,MAAtC,EAA8C;AAC5C;AACA;AACAT,UAAAA,MAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+BhB,GAA/B;AACA,iBAAOC,YAAP;AACD;;AACD,eAAOQ,UAAU,CAACQ,KAAlB;AACD,OAdC,CAeF;;;AACA,aAAOR,UAAP;AACD,KAjBD,CAiBE,OAAOS,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACA,aAAOjB,YAAP;AACD;AACF,GAvB6C,CAA9C,CAH8D,CA4B9D;AACA;;AACA,QAAMoB,QAAQ,GAAGJ,KAAK,IAAI;AACxB,QAAI;AACF;AACA,YAAMK,YAAY,GAAGL,KAAK,YAAYM,QAAjB,GAA4BN,KAAK,CAACd,WAAD,CAAjC,GAAiDc,KAAtE,CAFE,CAGF;;AACAb,MAAAA,cAAc,CAACkB,YAAD,CAAd,CAJE,CAKF;;AACA,UAAIpB,GAAJ,EAAS;AACP,cAAMU,GAAG,GAAG,IAAIC,IAAJ,EAAZ,CADO,CAGP;AACA;;AACA,cAAMR,IAAI,GAAG;AACXY,UAAAA,KAAK,EAAEK,YADI;AAEXP,UAAAA,MAAM,EAAEH,GAAG,CAACE,OAAJ,KAAgBZ;AAFb,SAAb;AAIAI,QAAAA,MAAM,CAACC,YAAP,CAAoBiB,OAApB,CAA4BxB,GAA5B,EAAiCU,IAAI,CAACe,SAAL,CAAepB,IAAf,CAAjC;AACD,OAVD,MAUO;AACLC,QAAAA,MAAM,CAACC,YAAP,CAAoBiB,OAApB,CAA4BxB,GAA5B,EAAiCU,IAAI,CAACe,SAAL,CAAeH,YAAf,CAAjC;AACD;AACF,KAnBD,CAmBE,OAAOJ,KAAP,EAAc;AACd;AACAC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAxBD;;AA0BA,SAAO,CAACf,WAAD,EAAckB,QAAd,CAAP;AACD;;GAzDuBtB,e","sourcesContent":["import { useState } from \"react\";\r\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\r\nexport default function useLocalStorage(key, initialValue, ttl) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      const parsedItem = item ? JSON.parse(item) : initialValue;\r\n\r\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\r\n        const now = new Date();\r\n        if (ttl && now.getTime() > parsedItem.expiry) {\r\n          // If the item is expired, delete the item from storage\r\n          // and return null\r\n          window.localStorage.removeItem(key);\r\n          return initialValue;\r\n        }\r\n        return parsedItem.value;\r\n      }\r\n      // Parse stored json or if none return initialValue\r\n      return parsedItem;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      if (ttl) {\r\n        const now = new Date();\r\n\r\n        // `item` is an object which contains the original value\r\n        // as well as the time when it's supposed to expire\r\n        const item = {\r\n          value: valueToStore,\r\n          expiry: now.getTime() + ttl,\r\n        };\r\n        window.localStorage.setItem(key, JSON.stringify(item));\r\n      } else {\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      }\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}