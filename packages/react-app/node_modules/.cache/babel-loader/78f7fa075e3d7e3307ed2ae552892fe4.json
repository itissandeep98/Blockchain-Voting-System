{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nvar __importDefault = this && this.__importDefault || function (mod) {\n  return mod && mod.__esModule ? mod : {\n    \"default\": mod\n  };\n};\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.WalletLinkProvider = void 0;\n\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\n\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\n\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\n\nconst WalletLinkAnalytics_1 = require(\"../connection/WalletLinkAnalytics\");\n\nconst EthereumChain_1 = require(\"../EthereumChain\");\n\nconst init_1 = require(\"../init\");\n\nconst Session_1 = require(\"../relay/Session\");\n\nconst WalletLinkRelayAbstract_1 = require(\"../relay/WalletLinkRelayAbstract\");\n\nconst util_1 = require(\"../util\");\n\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\n\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\n\nconst JSONRPC_1 = require(\"./JSONRPC\");\n\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\n\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\"; // Indicates chain has been switched by switchEthereumChain or addEthereumChain request\n\nconst HAS_CHAIN_BEEN_SWITCHED_KEY = \"HasChainBeenSwitched\";\nconst HAS_CHAIN_OVERRIDDEN_FROM_RELAY = \"HasChainOverriddenFromRelay\";\n\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n  constructor(options) {\n    super(); // So dapps can easily identify Coinbase Wallet for enabling features like 3085 network switcher menus\n\n    this.isCoinbaseWallet = true;\n    this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n    this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n    this._relay = null;\n    this._addresses = [];\n    this.hasMadeFirstChainChangedEmission = false;\n    this._send = this.send;\n    this._sendAsync = this.sendAsync;\n    this.setProviderInfo = this.setProviderInfo.bind(this);\n    this.updateProviderInfo = this.updateProviderInfo.bind(this);\n    this.getChainId = this.getChainId.bind(this);\n    this.setAppInfo = this.setAppInfo.bind(this);\n    this.enable = this.enable.bind(this);\n    this.close = this.close.bind(this);\n    this.send = this.send.bind(this);\n    this.sendAsync = this.sendAsync.bind(this);\n    this.request = this.request.bind(this);\n    this._setAddresses = this._setAddresses.bind(this);\n    this.scanQRCode = this.scanQRCode.bind(this);\n    this.arbitraryRequest = this.arbitraryRequest.bind(this);\n    this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n    this._overrideIsMetaMask = options.overrideIsMetaMask;\n    this._relayProvider = options.relayProvider;\n    this._storage = options.storage;\n    this._relayEventManager = options.relayEventManager;\n    this._walletLinkAnalytics = options.walletLinkAnalytics ? options.walletLinkAnalytics : new WalletLinkAnalytics_1.WalletLinkAnalytics();\n    const chainId = this.getChainId();\n    const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16)); // indicate that we've connected, for EIP-1193 compliance\n\n    this.emit(\"connect\", {\n      chainIdStr\n    });\n\n    const cachedAddresses = this._storage.getItem(WalletLinkRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n\n    if (cachedAddresses) {\n      const addresses = cachedAddresses.split(\" \");\n\n      if (addresses[0] !== \"\") {\n        this._addresses = addresses;\n        this.emit(\"accountsChanged\", addresses);\n      }\n    }\n\n    this._subscriptionManager.events.on(\"notification\", notification => {\n      this.emit(\"message\", {\n        type: notification.method,\n        data: notification.params\n      });\n    });\n\n    if (this._addresses.length > 0) {\n      this.initializeRelay();\n    }\n\n    window.addEventListener('message', event => {\n      var _a;\n\n      if (event.data.type !== 'walletLinkMessage') return;\n\n      if (event.data.data.action === 'defaultChainChanged') {\n        const chainId = event.data.data.chainId;\n        const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n        this.updateProviderInfo(jsonRpcUrl, Number(chainId), true);\n      }\n    });\n  }\n\n  get selectedAddress() {\n    return this._addresses[0] || undefined;\n  }\n\n  get networkVersion() {\n    return this.getChainId().toString(10);\n  }\n\n  get chainId() {\n    return (0, util_1.prepend0x)(this.getChainId().toString(16));\n  }\n\n  get isWalletLink() {\n    return true;\n  }\n  /**\n   * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n   * true for this method.\n   */\n\n\n  get isMetaMask() {\n    return this._overrideIsMetaMask;\n  }\n\n  get host() {\n    return this.jsonRpcUrl;\n  }\n\n  get connected() {\n    return true;\n  }\n\n  isConnected() {\n    return true;\n  }\n\n  get jsonRpcUrl() {\n    var _a;\n\n    return (_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts;\n  }\n\n  set jsonRpcUrl(value) {\n    this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n  }\n\n  get isChainOverridden() {\n    return this._storage.getItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY) === 'true';\n  }\n\n  set isChainOverridden(value) {\n    this._storage.setItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY, value.toString());\n  } // @ts-ignore\n\n\n  setProviderInfo(jsonRpcUrl, chainId) {\n    if (this.isChainOverridden) return;\n    this.updateProviderInfo(jsonRpcUrl, this.getChainId(), false);\n  }\n\n  updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n    const hasChainSwitched = this._storage.getItem(HAS_CHAIN_BEEN_SWITCHED_KEY) === \"true\";\n    if (hasChainSwitched && fromRelay) return;\n\n    if (fromRelay) {\n      this.isChainOverridden = true;\n    }\n\n    this.jsonRpcUrl = jsonRpcUrl; // emit chainChanged event if necessary\n\n    const originalChainId = this.getChainId();\n\n    this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n\n    const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n\n    if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n      this.emit(\"chainChanged\", this.getChainId());\n      this.hasMadeFirstChainChangedEmission = true;\n    }\n  }\n\n  async switchEthereumChain(rpcUrl, chainId) {\n    if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n      return;\n    }\n\n    const relay = await this.initializeRelay();\n    const res = await relay.switchEthereumChain(chainId.toString(10)).promise;\n\n    if (res.result === true) {\n      this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n\n      this.updateProviderInfo(rpcUrl, chainId, false);\n    }\n  }\n\n  setAppInfo(appName, appLogoUrl) {\n    this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n  }\n\n  async enable() {\n    this._walletLinkAnalytics.sendEvent(init_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::enable\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : null\n    });\n\n    if (this._addresses.length > 0) {\n      return this._addresses;\n    }\n\n    return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n  }\n\n  close() {\n    this.initializeRelay().then(relay => relay.resetAndReload());\n  }\n\n  send(requestOrMethod, callbackOrParams) {\n    // send<T>(method, params): Promise<T>\n    if (typeof requestOrMethod === \"string\") {\n      const method = requestOrMethod;\n      const params = Array.isArray(callbackOrParams) ? callbackOrParams : callbackOrParams !== undefined ? [callbackOrParams] : [];\n      const request = {\n        jsonrpc: \"2.0\",\n        id: 0,\n        method,\n        params\n      };\n      return this._sendRequestAsync(request).then(res => res.result);\n    } // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n\n\n    if (typeof callbackOrParams === \"function\") {\n      const request = requestOrMethod;\n      const callback = callbackOrParams;\n      return this._sendAsync(request, callback);\n    } // send(JSONRPCRequest[]): JSONRPCResponse[]\n\n\n    if (Array.isArray(requestOrMethod)) {\n      const requests = requestOrMethod;\n      return requests.map(r => this._sendRequest(r));\n    } // send(JSONRPCRequest): JSONRPCResponse\n\n\n    const req = requestOrMethod;\n    return this._sendRequest(req);\n  }\n\n  sendAsync(request, callback) {\n    if (typeof callback !== \"function\") {\n      throw new Error(\"callback is required\");\n    } // send(JSONRPCRequest[], callback): void\n\n\n    if (Array.isArray(request)) {\n      const arrayCb = callback;\n\n      this._sendMultipleRequestsAsync(request).then(responses => arrayCb(null, responses)).catch(err => arrayCb(err, null));\n\n      return;\n    } // send(JSONRPCRequest, callback): void\n\n\n    const cb = callback;\n\n    this._sendRequestAsync(request).then(response => cb(null, response)).catch(err => cb(err, null));\n  }\n\n  async request(args) {\n    if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"Expected a single, non-array, object argument.\",\n        data: args\n      });\n    }\n\n    const {\n      method,\n      params\n    } = args;\n\n    if (typeof method !== \"string\" || method.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.method' must be a non-empty string.\",\n        data: args\n      });\n    }\n\n    if (params !== undefined && !Array.isArray(params) && (typeof params !== \"object\" || params === null)) {\n      throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n        message: \"'args.params' must be an object or array if provided.\",\n        data: args\n      });\n    }\n\n    const newParams = params === undefined ? [] : params; // WalletLink Requests\n\n    const id = this._relayEventManager.makeRequestId();\n\n    const result = await this._sendRequestAsync({\n      method,\n      params: newParams,\n      jsonrpc: \"2.0\",\n      id\n    });\n    return result.result;\n  }\n\n  async scanQRCode(match) {\n    const relay = await this.initializeRelay();\n    const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  async arbitraryRequest(data) {\n    const relay = await this.initializeRelay();\n    const res = await relay.arbitraryRequest(data).promise;\n\n    if (typeof res.result !== \"string\") {\n      throw new Error(\"result was not a string\");\n    }\n\n    return res.result;\n  }\n\n  supportsSubscriptions() {\n    return false;\n  }\n\n  subscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  unsubscribe() {\n    throw new Error(\"Subscriptions are not supported\");\n  }\n\n  disconnect() {\n    return true;\n  }\n\n  _sendRequest(request) {\n    const response = {\n      jsonrpc: \"2.0\",\n      id: request.id\n    };\n    const {\n      method\n    } = request;\n    response.result = this._handleSynchronousMethods(request);\n\n    if (response.result === undefined) {\n      throw new Error(`WalletLink does not support calling ${method} synchronously without ` + `a callback. Please provide a callback parameter to call ${method} ` + `asynchronously.`);\n    }\n\n    return response;\n  }\n\n  _setAddresses(addresses) {\n    if (!Array.isArray(addresses)) {\n      throw new Error(\"addresses is not an array\");\n    }\n\n    const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n\n    if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n      return;\n    }\n\n    this._addresses = newAddresses;\n    this.emit(\"accountsChanged\", this._addresses);\n\n    this._storage.setItem(WalletLinkRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n\n    window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", {\n      detail: this._addresses\n    }));\n  }\n\n  _sendRequestAsync(request) {\n    return new Promise((resolve, reject) => {\n      try {\n        const syncResult = this._handleSynchronousMethods(request);\n\n        if (syncResult !== undefined) {\n          return resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: syncResult\n          });\n        }\n\n        const filterPromise = this._handleAsynchronousFilterMethods(request);\n\n        if (filterPromise !== undefined) {\n          filterPromise.then(res => resolve(Object.assign(Object.assign({}, res), {\n            id: request.id\n          }))).catch(err => reject(err));\n          return;\n        }\n\n        const subscriptionPromise = this._handleSubscriptionMethods(request);\n\n        if (subscriptionPromise !== undefined) {\n          subscriptionPromise.then(res => resolve({\n            jsonrpc: \"2.0\",\n            id: request.id,\n            result: res.result\n          })).catch(err => reject(err));\n          return;\n        }\n      } catch (err) {\n        return reject(err);\n      }\n\n      this._handleAsynchronousMethods(request).then(res => resolve(Object.assign(Object.assign({}, res), {\n        id: request.id\n      }))).catch(err => reject(err));\n    });\n  }\n\n  _sendMultipleRequestsAsync(requests) {\n    return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n  }\n\n  _handleSynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_accounts:\n        return this._eth_accounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n        return this._eth_coinbase();\n\n      case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n        return this._eth_uninstallFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.net_version:\n        return this._net_version();\n\n      case JSONRPC_1.JSONRPCMethod.eth_chainId:\n        return this._eth_chainId();\n\n      default:\n        return undefined;\n    }\n  }\n\n  _handleAsynchronousMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n        return this._eth_requestAccounts();\n\n      case JSONRPC_1.JSONRPCMethod.eth_sign:\n        return this._eth_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n        return this._eth_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_sign:\n        return this._personal_sign(params);\n\n      case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n        return this._personal_ecRecover(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n        return this._eth_signTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n        return this._eth_sendRawTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n        return this._eth_sendTransaction(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n        return this._eth_signTypedData_v1(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n        return this._throwUnsupportedMethodError();\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n        return this._eth_signTypedData_v3(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n      case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n        return this._eth_signTypedData_v4(params);\n\n      case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n        return this._walletlink_arbitrary(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n        return this._wallet_addEthereumChain(params);\n\n      case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n        return this._wallet_switchEthereumChain(params);\n    }\n\n    if (!this.jsonRpcUrl) throw Error(\"Error: No jsonRpcUrl provided\");\n    return window.fetch(this.jsonRpcUrl, {\n      method: \"POST\",\n      body: JSON.stringify(request),\n      mode: \"cors\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      }\n    }).then(res => res.json()).then(json => {\n      if (!json) {\n        throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n      }\n\n      const response = json;\n      const {\n        error\n      } = response;\n\n      if (error) {\n        throw (0, eth_rpc_errors_1.serializeError)(error);\n      }\n\n      return response;\n    });\n  }\n\n  _handleAsynchronousFilterMethods(request) {\n    const {\n      method\n    } = request;\n    const params = request.params || [];\n\n    switch (method) {\n      case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n        return this._eth_newFilter(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n        return this._eth_newBlockFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n        return this._eth_newPendingTransactionFilter();\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n        return this._eth_getFilterChanges(params);\n\n      case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n        return this._eth_getFilterLogs(params);\n    }\n\n    return undefined;\n  }\n\n  _handleSubscriptionMethods(request) {\n    switch (request.method) {\n      case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n      case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n        return this._subscriptionManager.handleRequest(request);\n    }\n\n    return undefined;\n  }\n\n  _isKnownAddress(addressString) {\n    try {\n      const address = (0, util_1.ensureAddressString)(addressString);\n      return this._addresses.includes(address);\n    } catch (_a) {}\n\n    return false;\n  }\n\n  _ensureKnownAddress(addressString) {\n    if (!this._isKnownAddress(addressString)) {\n      throw new Error(\"Unknown Ethereum address\");\n    }\n  }\n\n  _prepareTransactionParams(tx) {\n    const fromAddress = tx.from ? (0, util_1.ensureAddressString)(tx.from) : this.selectedAddress;\n\n    if (!fromAddress) {\n      throw new Error(\"Ethereum address is unavailable\");\n    }\n\n    this._ensureKnownAddress(fromAddress);\n\n    const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n    const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n    const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n    const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n    const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n    const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n    const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas) : null;\n    const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n    const chainId = this.getChainId();\n    return {\n      fromAddress,\n      toAddress,\n      weiValue,\n      data,\n      nonce,\n      gasPriceInWei,\n      maxFeePerGas,\n      maxPriorityFeePerGas,\n      gasLimit,\n      chainId\n    };\n  }\n\n  _requireAuthorization() {\n    if (this._addresses.length === 0) {\n      throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n    }\n  }\n\n  _throwUnsupportedMethodError() {\n    throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n  }\n\n  async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n    this._ensureKnownAddress(address);\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n    const relay = await this.initializeRelay();\n    const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  _eth_accounts() {\n    return this._addresses;\n  }\n\n  _eth_coinbase() {\n    return this.selectedAddress || null;\n  }\n\n  _net_version() {\n    return this.getChainId().toString(10);\n  }\n\n  _eth_chainId() {\n    return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n  }\n\n  getChainId() {\n    const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY) || \"1\";\n    const chainId = parseInt(chainIdStr, 10);\n    return (0, util_1.ensureIntNumber)(chainId);\n  }\n\n  async _eth_requestAccounts() {\n    this._walletLinkAnalytics.sendEvent(init_1.EVENTS.ETH_ACCOUNTS_STATE, {\n      method: \"provider::_eth_requestAccounts\",\n      addresses_length: this._addresses.length,\n      sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : null\n    });\n\n    if (this._addresses.length > 0) {\n      return Promise.resolve({\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: this._addresses\n      });\n    }\n\n    let res;\n\n    try {\n      const relay = await this.initializeRelay();\n      res = await relay.requestEthereumAccounts().promise;\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n      }\n\n      throw err;\n    }\n\n    if (!res.result) {\n      throw new Error(\"accounts received is empty\");\n    }\n\n    this._setAddresses(res.result);\n\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: this._addresses\n    };\n  }\n\n  _eth_sign(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const message = (0, util_1.ensureBuffer)(params[1]);\n    return this._signEthereumMessage(message, address, false);\n  }\n\n  _eth_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, false);\n  }\n\n  _personal_sign(params) {\n    this._requireAuthorization();\n\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n    return this._signEthereumMessage(message, address, true);\n  }\n\n  _personal_ecRecover(params) {\n    const message = (0, util_1.ensureBuffer)(params[0]);\n    const signature = (0, util_1.ensureBuffer)(params[1]);\n    return this._ethereumAddressFromSignedMessage(message, signature, true);\n  }\n\n  async _eth_signTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_sendRawTransaction(params) {\n    const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n    const relay = await this.initializeRelay();\n    const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: res.result\n    };\n  }\n\n  async _eth_sendTransaction(params) {\n    this._requireAuthorization();\n\n    const tx = this._prepareTransactionParams(params[0] || {});\n\n    try {\n      const relay = await this.initializeRelay();\n      const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n      return {\n        jsonrpc: \"2.0\",\n        id: 0,\n        result: res.result\n      };\n    } catch (err) {\n      if (typeof err.message === \"string\" && err.message.match(/(denied|rejected)/i)) {\n        throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n      }\n\n      throw err;\n    }\n  }\n\n  async _eth_signTypedData_v1(params) {\n    this._requireAuthorization();\n\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n    const address = (0, util_1.ensureAddressString)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v3(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v3({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _eth_signTypedData_v4(params) {\n    this._requireAuthorization();\n\n    const address = (0, util_1.ensureAddressString)(params[0]);\n    const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n\n    this._ensureKnownAddress(address);\n\n    const message = eth_eip712_util_1.default.hashForSignTypedData_v4({\n      data: typedData\n    });\n    const typedDataJSON = JSON.stringify(typedData, null, 2);\n    return this._signEthereumMessage(message, address, false, typedDataJSON);\n  }\n\n  async _walletlink_arbitrary(params) {\n    const data = params[0];\n\n    if (typeof data !== \"string\") {\n      throw new Error(\"parameter must be a string\");\n    }\n\n    const result = await this.arbitraryRequest(data);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result\n    };\n  }\n\n  async _wallet_addEthereumChain(params) {\n    const request = params[0];\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n\n    if (ethereumChain === undefined) {\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        error: {\n          code: 2,\n          message: `chainId ${request.chainId} not supported`\n        }\n      };\n    }\n\n    const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain); // @ts-ignore\n\n    await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n    return {\n      jsonrpc: '2.0',\n      id: 0,\n      result: null\n    };\n  }\n\n  async _wallet_switchEthereumChain(params) {\n    const request = params[0];\n    const chainIdNumber = parseInt(request.chainId, 16);\n    const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n\n    if (ethereumChain === undefined) {\n      return {\n        jsonrpc: '2.0',\n        id: 0,\n        error: {\n          code: 2,\n          message: `chainId ${request.chainId} not supported`\n        }\n      };\n    }\n\n    const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain); // @ts-ignore\n\n    await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: null\n    };\n  }\n\n  _eth_uninstallFilter(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.uninstallFilter(filterId);\n  }\n\n  async _eth_newFilter(params) {\n    const param = params[0];\n    const filterId = await this._filterPolyfill.newFilter(param);\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newBlockFilter() {\n    const filterId = await this._filterPolyfill.newBlockFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  async _eth_newPendingTransactionFilter() {\n    const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n    return {\n      jsonrpc: \"2.0\",\n      id: 0,\n      result: filterId\n    };\n  }\n\n  _eth_getFilterChanges(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterChanges(filterId);\n  }\n\n  _eth_getFilterLogs(params) {\n    const filterId = (0, util_1.ensureHexString)(params[0]);\n    return this._filterPolyfill.getFilterLogs(filterId);\n  }\n\n  initializeRelay() {\n    if (this._relay) {\n      return Promise.resolve(this._relay);\n    }\n\n    return this._relayProvider().then(relay => {\n      relay.setAccountsCallback(accounts => this._setAddresses(accounts));\n      relay.setChainCallback((chainId, jsonRpcUrl) => {\n        this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10), true);\n      });\n      this._relay = relay;\n      return relay;\n    });\n  }\n\n}\n\nexports.WalletLinkProvider = WalletLinkProvider;","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/walletlink/dist/provider/WalletLinkProvider.js"],"names":["__importDefault","mod","__esModule","Object","defineProperty","exports","value","WalletLinkProvider","safe_event_emitter_1","require","bn_js_1","eth_rpc_errors_1","WalletLinkAnalytics_1","EthereumChain_1","init_1","Session_1","WalletLinkRelayAbstract_1","util_1","eth_eip712_util_1","FilterPolyfill_1","JSONRPC_1","SubscriptionManager_1","DEFAULT_CHAIN_ID_KEY","DEFAULT_JSON_RPC_URL","HAS_CHAIN_BEEN_SWITCHED_KEY","HAS_CHAIN_OVERRIDDEN_FROM_RELAY","default","constructor","options","isCoinbaseWallet","_filterPolyfill","FilterPolyfill","_subscriptionManager","SubscriptionManager","_relay","_addresses","hasMadeFirstChainChangedEmission","_send","send","_sendAsync","sendAsync","setProviderInfo","bind","updateProviderInfo","getChainId","setAppInfo","enable","close","request","_setAddresses","scanQRCode","arbitraryRequest","_jsonRpcUrlFromOpts","jsonRpcUrl","_overrideIsMetaMask","overrideIsMetaMask","_relayProvider","relayProvider","_storage","storage","_relayEventManager","relayEventManager","_walletLinkAnalytics","walletLinkAnalytics","WalletLinkAnalytics","chainId","chainIdStr","prepend0x","toString","emit","cachedAddresses","getItem","LOCAL_STORAGE_ADDRESSES_KEY","addresses","split","events","on","notification","type","method","data","params","length","initializeRelay","window","addEventListener","event","_a","action","Number","selectedAddress","undefined","networkVersion","isWalletLink","isMetaMask","host","connected","isConnected","setItem","isChainOverridden","fromRelay","hasChainSwitched","originalChainId","chainChanged","ensureIntNumber","switchEthereumChain","rpcUrl","relay","res","promise","result","appName","appLogoUrl","then","sendEvent","EVENTS","ETH_ACCOUNTS_STATE","addresses_length","sessionIdHash","Session","hash","session","id","JSONRPCMethod","eth_requestAccounts","resetAndReload","requestOrMethod","callbackOrParams","Array","isArray","jsonrpc","_sendRequestAsync","callback","requests","map","r","_sendRequest","req","Error","arrayCb","_sendMultipleRequestsAsync","responses","catch","err","cb","response","args","ethErrors","rpc","invalidRequest","message","newParams","makeRequestId","match","ensureRegExpString","supportsSubscriptions","subscribe","unsubscribe","disconnect","_handleSynchronousMethods","newAddresses","address","ensureAddressString","JSON","stringify","join","dispatchEvent","CustomEvent","detail","Promise","resolve","reject","syncResult","filterPromise","_handleAsynchronousFilterMethods","assign","subscriptionPromise","_handleSubscriptionMethods","_handleAsynchronousMethods","all","eth_accounts","_eth_accounts","eth_coinbase","_eth_coinbase","eth_uninstallFilter","_eth_uninstallFilter","net_version","_net_version","eth_chainId","_eth_chainId","_eth_requestAccounts","eth_sign","_eth_sign","eth_ecRecover","_eth_ecRecover","personal_sign","_personal_sign","personal_ecRecover","_personal_ecRecover","eth_signTransaction","_eth_signTransaction","eth_sendRawTransaction","_eth_sendRawTransaction","eth_sendTransaction","_eth_sendTransaction","eth_signTypedData_v1","_eth_signTypedData_v1","eth_signTypedData_v2","_throwUnsupportedMethodError","eth_signTypedData_v3","_eth_signTypedData_v3","eth_signTypedData_v4","eth_signTypedData","_eth_signTypedData_v4","walletlink_arbitrary","_walletlink_arbitrary","wallet_addEthereumChain","_wallet_addEthereumChain","wallet_switchEthereumChain","_wallet_switchEthereumChain","fetch","body","mode","headers","json","parse","error","serializeError","eth_newFilter","_eth_newFilter","eth_newBlockFilter","_eth_newBlockFilter","eth_newPendingTransactionFilter","_eth_newPendingTransactionFilter","eth_getFilterChanges","_eth_getFilterChanges","eth_getFilterLogs","_eth_getFilterLogs","eth_subscribe","eth_unsubscribe","handleRequest","_isKnownAddress","addressString","includes","_ensureKnownAddress","_prepareTransactionParams","tx","fromAddress","from","toAddress","to","weiValue","ensureBN","ensureBuffer","Buffer","alloc","nonce","gasPriceInWei","gasPrice","maxFeePerGas","maxPriorityFeePerGas","gasLimit","gas","_requireAuthorization","provider","unauthorized","unsupportedMethod","_signEthereumMessage","addPrefix","typedDataJson","signEthereumMessage","userRejectedRequest","_ethereumAddressFromSignedMessage","signature","ethereumAddressFromSignedMessage","hexStringFromIntNumber","parseInt","requestEthereumAccounts","signEthereumTransaction","signedTransaction","submitEthereumTransaction","signAndSubmitEthereumTransaction","typedData","ensureParsedJSONObject","hashForSignTypedDataLegacy","typedDataJSON","hashForSignTypedData_v3","hashForSignTypedData_v4","chainIdNumber","ethereumChain","EthereumChain","fromChainId","BigInt","code","filterId","ensureHexString","uninstallFilter","param","newFilter","newBlockFilter","newPendingTransactionFilter","getFilterChanges","getFilterLogs","setAccountsCallback","accounts","setChainCallback"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nvar __importDefault = (this && this.__importDefault) || function (mod) {\n    return (mod && mod.__esModule) ? mod : { \"default\": mod };\n};\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.WalletLinkProvider = void 0;\nconst safe_event_emitter_1 = __importDefault(require(\"@metamask/safe-event-emitter\"));\nconst bn_js_1 = __importDefault(require(\"bn.js\"));\nconst eth_rpc_errors_1 = require(\"eth-rpc-errors\");\nconst WalletLinkAnalytics_1 = require(\"../connection/WalletLinkAnalytics\");\nconst EthereumChain_1 = require(\"../EthereumChain\");\nconst init_1 = require(\"../init\");\nconst Session_1 = require(\"../relay/Session\");\nconst WalletLinkRelayAbstract_1 = require(\"../relay/WalletLinkRelayAbstract\");\nconst util_1 = require(\"../util\");\nconst eth_eip712_util_1 = __importDefault(require(\"../vendor-js/eth-eip712-util\"));\nconst FilterPolyfill_1 = require(\"./FilterPolyfill\");\nconst JSONRPC_1 = require(\"./JSONRPC\");\nconst SubscriptionManager_1 = require(\"./SubscriptionManager\");\nconst DEFAULT_CHAIN_ID_KEY = \"DefaultChainId\";\nconst DEFAULT_JSON_RPC_URL = \"DefaultJsonRpcUrl\";\n// Indicates chain has been switched by switchEthereumChain or addEthereumChain request\nconst HAS_CHAIN_BEEN_SWITCHED_KEY = \"HasChainBeenSwitched\";\nconst HAS_CHAIN_OVERRIDDEN_FROM_RELAY = \"HasChainOverriddenFromRelay\";\nclass WalletLinkProvider extends safe_event_emitter_1.default {\n    constructor(options) {\n        super();\n        // So dapps can easily identify Coinbase Wallet for enabling features like 3085 network switcher menus\n        this.isCoinbaseWallet = true;\n        this._filterPolyfill = new FilterPolyfill_1.FilterPolyfill(this);\n        this._subscriptionManager = new SubscriptionManager_1.SubscriptionManager(this);\n        this._relay = null;\n        this._addresses = [];\n        this.hasMadeFirstChainChangedEmission = false;\n        this._send = this.send;\n        this._sendAsync = this.sendAsync;\n        this.setProviderInfo = this.setProviderInfo.bind(this);\n        this.updateProviderInfo = this.updateProviderInfo.bind(this);\n        this.getChainId = this.getChainId.bind(this);\n        this.setAppInfo = this.setAppInfo.bind(this);\n        this.enable = this.enable.bind(this);\n        this.close = this.close.bind(this);\n        this.send = this.send.bind(this);\n        this.sendAsync = this.sendAsync.bind(this);\n        this.request = this.request.bind(this);\n        this._setAddresses = this._setAddresses.bind(this);\n        this.scanQRCode = this.scanQRCode.bind(this);\n        this.arbitraryRequest = this.arbitraryRequest.bind(this);\n        this._jsonRpcUrlFromOpts = options.jsonRpcUrl;\n        this._overrideIsMetaMask = options.overrideIsMetaMask;\n        this._relayProvider = options.relayProvider;\n        this._storage = options.storage;\n        this._relayEventManager = options.relayEventManager;\n        this._walletLinkAnalytics = options.walletLinkAnalytics\n            ? options.walletLinkAnalytics\n            : new WalletLinkAnalytics_1.WalletLinkAnalytics();\n        const chainId = this.getChainId();\n        const chainIdStr = (0, util_1.prepend0x)(chainId.toString(16));\n        // indicate that we've connected, for EIP-1193 compliance\n        this.emit(\"connect\", { chainIdStr });\n        const cachedAddresses = this._storage.getItem(WalletLinkRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY);\n        if (cachedAddresses) {\n            const addresses = cachedAddresses.split(\" \");\n            if (addresses[0] !== \"\") {\n                this._addresses = addresses;\n                this.emit(\"accountsChanged\", addresses);\n            }\n        }\n        this._subscriptionManager.events.on(\"notification\", (notification) => {\n            this.emit(\"message\", {\n                type: notification.method,\n                data: notification.params\n            });\n        });\n        if (this._addresses.length > 0) {\n            this.initializeRelay();\n        }\n        window.addEventListener('message', (event) => {\n            var _a;\n            if (event.data.type !== 'walletLinkMessage')\n                return;\n            if (event.data.data.action === 'defaultChainChanged') {\n                const chainId = event.data.data.chainId;\n                const jsonRpcUrl = (_a = event.data.data.jsonRpcUrl) !== null && _a !== void 0 ? _a : this.jsonRpcUrl;\n                this.updateProviderInfo(jsonRpcUrl, Number(chainId), true);\n            }\n        });\n    }\n    get selectedAddress() {\n        return this._addresses[0] || undefined;\n    }\n    get networkVersion() {\n        return this.getChainId().toString(10);\n    }\n    get chainId() {\n        return (0, util_1.prepend0x)(this.getChainId().toString(16));\n    }\n    get isWalletLink() {\n        return true;\n    }\n    /**\n     * Some DApps (i.e. Alpha Homora) seem to require the window.ethereum object return\n     * true for this method.\n     */\n    get isMetaMask() {\n        return this._overrideIsMetaMask;\n    }\n    get host() {\n        return this.jsonRpcUrl;\n    }\n    get connected() {\n        return true;\n    }\n    isConnected() {\n        return true;\n    }\n    get jsonRpcUrl() {\n        var _a;\n        return (_a = this._storage.getItem(DEFAULT_JSON_RPC_URL)) !== null && _a !== void 0 ? _a : this._jsonRpcUrlFromOpts;\n    }\n    set jsonRpcUrl(value) {\n        this._storage.setItem(DEFAULT_JSON_RPC_URL, value);\n    }\n    get isChainOverridden() {\n        return this._storage.getItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY) === 'true';\n    }\n    set isChainOverridden(value) {\n        this._storage.setItem(HAS_CHAIN_OVERRIDDEN_FROM_RELAY, value.toString());\n    }\n    // @ts-ignore\n    setProviderInfo(jsonRpcUrl, chainId) {\n        if (this.isChainOverridden)\n            return;\n        this.updateProviderInfo(jsonRpcUrl, this.getChainId(), false);\n    }\n    updateProviderInfo(jsonRpcUrl, chainId, fromRelay) {\n        const hasChainSwitched = this._storage.getItem(HAS_CHAIN_BEEN_SWITCHED_KEY) === \"true\";\n        if (hasChainSwitched && fromRelay)\n            return;\n        if (fromRelay) {\n            this.isChainOverridden = true;\n        }\n        this.jsonRpcUrl = jsonRpcUrl;\n        // emit chainChanged event if necessary\n        const originalChainId = this.getChainId();\n        this._storage.setItem(DEFAULT_CHAIN_ID_KEY, chainId.toString(10));\n        const chainChanged = (0, util_1.ensureIntNumber)(chainId) !== originalChainId;\n        if (chainChanged || !this.hasMadeFirstChainChangedEmission) {\n            this.emit(\"chainChanged\", this.getChainId());\n            this.hasMadeFirstChainChangedEmission = true;\n        }\n    }\n    async switchEthereumChain(rpcUrl, chainId) {\n        if ((0, util_1.ensureIntNumber)(chainId) === this.getChainId()) {\n            return;\n        }\n        const relay = await this.initializeRelay();\n        const res = await relay.switchEthereumChain(chainId.toString(10)).promise;\n        if (res.result === true) {\n            this._storage.setItem(HAS_CHAIN_BEEN_SWITCHED_KEY, \"true\");\n            this.updateProviderInfo(rpcUrl, chainId, false);\n        }\n    }\n    setAppInfo(appName, appLogoUrl) {\n        this.initializeRelay().then(relay => relay.setAppInfo(appName, appLogoUrl));\n    }\n    async enable() {\n        this._walletLinkAnalytics.sendEvent(init_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::enable\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : null\n        });\n        if (this._addresses.length > 0) {\n            return this._addresses;\n        }\n        return await this._send(JSONRPC_1.JSONRPCMethod.eth_requestAccounts);\n    }\n    close() {\n        this.initializeRelay().then(relay => relay.resetAndReload());\n    }\n    send(requestOrMethod, callbackOrParams) {\n        // send<T>(method, params): Promise<T>\n        if (typeof requestOrMethod === \"string\") {\n            const method = requestOrMethod;\n            const params = Array.isArray(callbackOrParams)\n                ? callbackOrParams\n                : callbackOrParams !== undefined\n                    ? [callbackOrParams]\n                    : [];\n            const request = {\n                jsonrpc: \"2.0\",\n                id: 0,\n                method,\n                params\n            };\n            return this._sendRequestAsync(request).then(res => res.result);\n        }\n        // send(JSONRPCRequest | JSONRPCRequest[], callback): void\n        if (typeof callbackOrParams === \"function\") {\n            const request = requestOrMethod;\n            const callback = callbackOrParams;\n            return this._sendAsync(request, callback);\n        }\n        // send(JSONRPCRequest[]): JSONRPCResponse[]\n        if (Array.isArray(requestOrMethod)) {\n            const requests = requestOrMethod;\n            return requests.map(r => this._sendRequest(r));\n        }\n        // send(JSONRPCRequest): JSONRPCResponse\n        const req = requestOrMethod;\n        return this._sendRequest(req);\n    }\n    sendAsync(request, callback) {\n        if (typeof callback !== \"function\") {\n            throw new Error(\"callback is required\");\n        }\n        // send(JSONRPCRequest[], callback): void\n        if (Array.isArray(request)) {\n            const arrayCb = callback;\n            this._sendMultipleRequestsAsync(request)\n                .then(responses => arrayCb(null, responses))\n                .catch(err => arrayCb(err, null));\n            return;\n        }\n        // send(JSONRPCRequest, callback): void\n        const cb = callback;\n        this._sendRequestAsync(request)\n            .then(response => cb(null, response))\n            .catch(err => cb(err, null));\n    }\n    async request(args) {\n        if (!args || typeof args !== \"object\" || Array.isArray(args)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"Expected a single, non-array, object argument.\",\n                data: args\n            });\n        }\n        const { method, params } = args;\n        if (typeof method !== \"string\" || method.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.method' must be a non-empty string.\",\n                data: args\n            });\n        }\n        if (params !== undefined &&\n            !Array.isArray(params) &&\n            (typeof params !== \"object\" || params === null)) {\n            throw eth_rpc_errors_1.ethErrors.rpc.invalidRequest({\n                message: \"'args.params' must be an object or array if provided.\",\n                data: args\n            });\n        }\n        const newParams = params === undefined ? [] : params;\n        // WalletLink Requests\n        const id = this._relayEventManager.makeRequestId();\n        const result = await this._sendRequestAsync({\n            method,\n            params: newParams,\n            jsonrpc: \"2.0\",\n            id\n        });\n        return result.result;\n    }\n    async scanQRCode(match) {\n        const relay = await this.initializeRelay();\n        const res = await relay.scanQRCode((0, util_1.ensureRegExpString)(match)).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    async arbitraryRequest(data) {\n        const relay = await this.initializeRelay();\n        const res = await relay.arbitraryRequest(data).promise;\n        if (typeof res.result !== \"string\") {\n            throw new Error(\"result was not a string\");\n        }\n        return res.result;\n    }\n    supportsSubscriptions() {\n        return false;\n    }\n    subscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    unsubscribe() {\n        throw new Error(\"Subscriptions are not supported\");\n    }\n    disconnect() {\n        return true;\n    }\n    _sendRequest(request) {\n        const response = {\n            jsonrpc: \"2.0\",\n            id: request.id\n        };\n        const { method } = request;\n        response.result = this._handleSynchronousMethods(request);\n        if (response.result === undefined) {\n            throw new Error(`WalletLink does not support calling ${method} synchronously without ` +\n                `a callback. Please provide a callback parameter to call ${method} ` +\n                `asynchronously.`);\n        }\n        return response;\n    }\n    _setAddresses(addresses) {\n        if (!Array.isArray(addresses)) {\n            throw new Error(\"addresses is not an array\");\n        }\n        const newAddresses = addresses.map(address => (0, util_1.ensureAddressString)(address));\n        if (JSON.stringify(newAddresses) === JSON.stringify(this._addresses)) {\n            return;\n        }\n        this._addresses = newAddresses;\n        this.emit(\"accountsChanged\", this._addresses);\n        this._storage.setItem(WalletLinkRelayAbstract_1.LOCAL_STORAGE_ADDRESSES_KEY, newAddresses.join(\" \"));\n        window.dispatchEvent(new CustomEvent(\"walletlink:addresses\", { detail: this._addresses }));\n    }\n    _sendRequestAsync(request) {\n        return new Promise((resolve, reject) => {\n            try {\n                const syncResult = this._handleSynchronousMethods(request);\n                if (syncResult !== undefined) {\n                    return resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: syncResult\n                    });\n                }\n                const filterPromise = this._handleAsynchronousFilterMethods(request);\n                if (filterPromise !== undefined) {\n                    filterPromise\n                        .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                        .catch(err => reject(err));\n                    return;\n                }\n                const subscriptionPromise = this._handleSubscriptionMethods(request);\n                if (subscriptionPromise !== undefined) {\n                    subscriptionPromise\n                        .then(res => resolve({\n                        jsonrpc: \"2.0\",\n                        id: request.id,\n                        result: res.result\n                    }))\n                        .catch(err => reject(err));\n                    return;\n                }\n            }\n            catch (err) {\n                return reject(err);\n            }\n            this._handleAsynchronousMethods(request)\n                .then(res => resolve(Object.assign(Object.assign({}, res), { id: request.id })))\n                .catch(err => reject(err));\n        });\n    }\n    _sendMultipleRequestsAsync(requests) {\n        return Promise.all(requests.map(r => this._sendRequestAsync(r)));\n    }\n    _handleSynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_accounts:\n                return this._eth_accounts();\n            case JSONRPC_1.JSONRPCMethod.eth_coinbase:\n                return this._eth_coinbase();\n            case JSONRPC_1.JSONRPCMethod.eth_uninstallFilter:\n                return this._eth_uninstallFilter(params);\n            case JSONRPC_1.JSONRPCMethod.net_version:\n                return this._net_version();\n            case JSONRPC_1.JSONRPCMethod.eth_chainId:\n                return this._eth_chainId();\n            default:\n                return undefined;\n        }\n    }\n    _handleAsynchronousMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_requestAccounts:\n                return this._eth_requestAccounts();\n            case JSONRPC_1.JSONRPCMethod.eth_sign:\n                return this._eth_sign(params);\n            case JSONRPC_1.JSONRPCMethod.eth_ecRecover:\n                return this._eth_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.personal_sign:\n                return this._personal_sign(params);\n            case JSONRPC_1.JSONRPCMethod.personal_ecRecover:\n                return this._personal_ecRecover(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTransaction:\n                return this._eth_signTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendRawTransaction:\n                return this._eth_sendRawTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_sendTransaction:\n                return this._eth_sendTransaction(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v1:\n                return this._eth_signTypedData_v1(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v2:\n                return this._throwUnsupportedMethodError();\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v3:\n                return this._eth_signTypedData_v3(params);\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData_v4:\n            case JSONRPC_1.JSONRPCMethod.eth_signTypedData:\n                return this._eth_signTypedData_v4(params);\n            case JSONRPC_1.JSONRPCMethod.walletlink_arbitrary:\n                return this._walletlink_arbitrary(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_addEthereumChain:\n                return this._wallet_addEthereumChain(params);\n            case JSONRPC_1.JSONRPCMethod.wallet_switchEthereumChain:\n                return this._wallet_switchEthereumChain(params);\n        }\n        if (!this.jsonRpcUrl)\n            throw Error(\"Error: No jsonRpcUrl provided\");\n        return window\n            .fetch(this.jsonRpcUrl, {\n            method: \"POST\",\n            body: JSON.stringify(request),\n            mode: \"cors\",\n            headers: { \"Content-Type\": \"application/json\" }\n        })\n            .then(res => res.json())\n            .then(json => {\n            if (!json) {\n                throw eth_rpc_errors_1.ethErrors.rpc.parse({});\n            }\n            const response = json;\n            const { error } = response;\n            if (error) {\n                throw (0, eth_rpc_errors_1.serializeError)(error);\n            }\n            return response;\n        });\n    }\n    _handleAsynchronousFilterMethods(request) {\n        const { method } = request;\n        const params = request.params || [];\n        switch (method) {\n            case JSONRPC_1.JSONRPCMethod.eth_newFilter:\n                return this._eth_newFilter(params);\n            case JSONRPC_1.JSONRPCMethod.eth_newBlockFilter:\n                return this._eth_newBlockFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_newPendingTransactionFilter:\n                return this._eth_newPendingTransactionFilter();\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterChanges:\n                return this._eth_getFilterChanges(params);\n            case JSONRPC_1.JSONRPCMethod.eth_getFilterLogs:\n                return this._eth_getFilterLogs(params);\n        }\n        return undefined;\n    }\n    _handleSubscriptionMethods(request) {\n        switch (request.method) {\n            case JSONRPC_1.JSONRPCMethod.eth_subscribe:\n            case JSONRPC_1.JSONRPCMethod.eth_unsubscribe:\n                return this._subscriptionManager.handleRequest(request);\n        }\n        return undefined;\n    }\n    _isKnownAddress(addressString) {\n        try {\n            const address = (0, util_1.ensureAddressString)(addressString);\n            return this._addresses.includes(address);\n        }\n        catch (_a) { }\n        return false;\n    }\n    _ensureKnownAddress(addressString) {\n        if (!this._isKnownAddress(addressString)) {\n            throw new Error(\"Unknown Ethereum address\");\n        }\n    }\n    _prepareTransactionParams(tx) {\n        const fromAddress = tx.from\n            ? (0, util_1.ensureAddressString)(tx.from)\n            : this.selectedAddress;\n        if (!fromAddress) {\n            throw new Error(\"Ethereum address is unavailable\");\n        }\n        this._ensureKnownAddress(fromAddress);\n        const toAddress = tx.to ? (0, util_1.ensureAddressString)(tx.to) : null;\n        const weiValue = tx.value != null ? (0, util_1.ensureBN)(tx.value) : new bn_js_1.default(0);\n        const data = tx.data ? (0, util_1.ensureBuffer)(tx.data) : Buffer.alloc(0);\n        const nonce = tx.nonce != null ? (0, util_1.ensureIntNumber)(tx.nonce) : null;\n        const gasPriceInWei = tx.gasPrice != null ? (0, util_1.ensureBN)(tx.gasPrice) : null;\n        const maxFeePerGas = tx.maxFeePerGas != null ? (0, util_1.ensureBN)(tx.maxFeePerGas) : null;\n        const maxPriorityFeePerGas = tx.maxPriorityFeePerGas != null ? (0, util_1.ensureBN)(tx.maxPriorityFeePerGas) : null;\n        const gasLimit = tx.gas != null ? (0, util_1.ensureBN)(tx.gas) : null;\n        const chainId = this.getChainId();\n        return {\n            fromAddress,\n            toAddress,\n            weiValue,\n            data,\n            nonce,\n            gasPriceInWei,\n            maxFeePerGas,\n            maxPriorityFeePerGas,\n            gasLimit,\n            chainId\n        };\n    }\n    _requireAuthorization() {\n        if (this._addresses.length === 0) {\n            throw eth_rpc_errors_1.ethErrors.provider.unauthorized({});\n        }\n    }\n    _throwUnsupportedMethodError() {\n        throw eth_rpc_errors_1.ethErrors.provider.unsupportedMethod({});\n    }\n    async _signEthereumMessage(message, address, addPrefix, typedDataJson) {\n        this._ensureKnownAddress(address);\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumMessage(message, address, addPrefix, typedDataJson).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied message signature\");\n            }\n            throw err;\n        }\n    }\n    async _ethereumAddressFromSignedMessage(message, signature, addPrefix) {\n        const relay = await this.initializeRelay();\n        const res = await relay.ethereumAddressFromSignedMessage(message, signature, addPrefix).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    _eth_accounts() {\n        return this._addresses;\n    }\n    _eth_coinbase() {\n        return this.selectedAddress || null;\n    }\n    _net_version() {\n        return this.getChainId().toString(10);\n    }\n    _eth_chainId() {\n        return (0, util_1.hexStringFromIntNumber)(this.getChainId());\n    }\n    getChainId() {\n        const chainIdStr = this._storage.getItem(DEFAULT_CHAIN_ID_KEY) || \"1\";\n        const chainId = parseInt(chainIdStr, 10);\n        return (0, util_1.ensureIntNumber)(chainId);\n    }\n    async _eth_requestAccounts() {\n        this._walletLinkAnalytics.sendEvent(init_1.EVENTS.ETH_ACCOUNTS_STATE, {\n            method: \"provider::_eth_requestAccounts\",\n            addresses_length: this._addresses.length,\n            sessionIdHash: this._relay ? Session_1.Session.hash(this._relay.session.id) : null\n        });\n        if (this._addresses.length > 0) {\n            return Promise.resolve({\n                jsonrpc: \"2.0\",\n                id: 0,\n                result: this._addresses\n            });\n        }\n        let res;\n        try {\n            const relay = await this.initializeRelay();\n            res = await relay.requestEthereumAccounts().promise;\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied account authorization\");\n            }\n            throw err;\n        }\n        if (!res.result) {\n            throw new Error(\"accounts received is empty\");\n        }\n        this._setAddresses(res.result);\n        return { jsonrpc: \"2.0\", id: 0, result: this._addresses };\n    }\n    _eth_sign(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const message = (0, util_1.ensureBuffer)(params[1]);\n        return this._signEthereumMessage(message, address, false);\n    }\n    _eth_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, false);\n    }\n    _personal_sign(params) {\n        this._requireAuthorization();\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        return this._signEthereumMessage(message, address, true);\n    }\n    _personal_ecRecover(params) {\n        const message = (0, util_1.ensureBuffer)(params[0]);\n        const signature = (0, util_1.ensureBuffer)(params[1]);\n        return this._ethereumAddressFromSignedMessage(message, signature, true);\n    }\n    async _eth_signTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_sendRawTransaction(params) {\n        const signedTransaction = (0, util_1.ensureBuffer)(params[0]);\n        const relay = await this.initializeRelay();\n        const res = await relay.submitEthereumTransaction(signedTransaction, this.getChainId()).promise;\n        return { jsonrpc: \"2.0\", id: 0, result: res.result };\n    }\n    async _eth_sendTransaction(params) {\n        this._requireAuthorization();\n        const tx = this._prepareTransactionParams(params[0] || {});\n        try {\n            const relay = await this.initializeRelay();\n            const res = await relay.signAndSubmitEthereumTransaction(tx).promise;\n            return { jsonrpc: \"2.0\", id: 0, result: res.result };\n        }\n        catch (err) {\n            if (typeof err.message === \"string\" &&\n                err.message.match(/(denied|rejected)/i)) {\n                throw eth_rpc_errors_1.ethErrors.provider.userRejectedRequest(\"User denied transaction signature\");\n            }\n            throw err;\n        }\n    }\n    async _eth_signTypedData_v1(params) {\n        this._requireAuthorization();\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[0]);\n        const address = (0, util_1.ensureAddressString)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedDataLegacy({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v3(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v3({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _eth_signTypedData_v4(params) {\n        this._requireAuthorization();\n        const address = (0, util_1.ensureAddressString)(params[0]);\n        const typedData = (0, util_1.ensureParsedJSONObject)(params[1]);\n        this._ensureKnownAddress(address);\n        const message = eth_eip712_util_1.default.hashForSignTypedData_v4({ data: typedData });\n        const typedDataJSON = JSON.stringify(typedData, null, 2);\n        return this._signEthereumMessage(message, address, false, typedDataJSON);\n    }\n    async _walletlink_arbitrary(params) {\n        const data = params[0];\n        if (typeof data !== \"string\") {\n            throw new Error(\"parameter must be a string\");\n        }\n        const result = await this.arbitraryRequest(data);\n        return { jsonrpc: \"2.0\", id: 0, result };\n    }\n    async _wallet_addEthereumChain(params) {\n        const request = (params[0]);\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n        if (ethereumChain === undefined) {\n            return { jsonrpc: '2.0', id: 0, error: { code: 2, message: `chainId ${request.chainId} not supported` } };\n        }\n        const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain);\n        // @ts-ignore\n        await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n        return { jsonrpc: '2.0', id: 0, result: null };\n    }\n    async _wallet_switchEthereumChain(params) {\n        const request = (params[0]);\n        const chainIdNumber = parseInt(request.chainId, 16);\n        const ethereumChain = EthereumChain_1.EthereumChain.fromChainId(BigInt(chainIdNumber));\n        if (ethereumChain === undefined) {\n            return { jsonrpc: '2.0', id: 0, error: { code: 2, message: `chainId ${request.chainId} not supported` } };\n        }\n        const rpcUrl = EthereumChain_1.EthereumChain.rpcUrl(ethereumChain);\n        // @ts-ignore\n        await this.switchEthereumChain(rpcUrl, parseInt(request.chainId, 16));\n        return { jsonrpc: \"2.0\", id: 0, result: null };\n    }\n    _eth_uninstallFilter(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.uninstallFilter(filterId);\n    }\n    async _eth_newFilter(params) {\n        const param = params[0];\n        const filterId = await this._filterPolyfill.newFilter(param);\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newBlockFilter() {\n        const filterId = await this._filterPolyfill.newBlockFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    async _eth_newPendingTransactionFilter() {\n        const filterId = await this._filterPolyfill.newPendingTransactionFilter();\n        return { jsonrpc: \"2.0\", id: 0, result: filterId };\n    }\n    _eth_getFilterChanges(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterChanges(filterId);\n    }\n    _eth_getFilterLogs(params) {\n        const filterId = (0, util_1.ensureHexString)(params[0]);\n        return this._filterPolyfill.getFilterLogs(filterId);\n    }\n    initializeRelay() {\n        if (this._relay) {\n            return Promise.resolve(this._relay);\n        }\n        return this._relayProvider().then(relay => {\n            relay.setAccountsCallback((accounts) => this._setAddresses(accounts));\n            relay.setChainCallback((chainId, jsonRpcUrl) => {\n                this.updateProviderInfo(jsonRpcUrl, parseInt(chainId, 10), true);\n            });\n            this._relay = relay;\n            return relay;\n        });\n    }\n}\nexports.WalletLinkProvider = WalletLinkProvider;\n"]},"metadata":{},"sourceType":"script"}