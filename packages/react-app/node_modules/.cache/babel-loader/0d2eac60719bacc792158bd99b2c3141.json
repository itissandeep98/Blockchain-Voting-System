{"ast":null,"code":"import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState}from\"react\";// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\nexport default function useLocalStorage(key,initialValue,ttl){// State to store our value\n// Pass initial state function to useState so logic is only executed once\nvar _useState=useState(function(){try{// Get from local storage by key\nvar item=window.localStorage.getItem(key);var parsedItem=item?JSON.parse(item):initialValue;if(typeof parsedItem===\"object\"&&parsedItem!==null&&\"expiry\"in parsedItem&&\"value\"in parsedItem){var now=new Date();if(ttl&&now.getTime()>parsedItem.expiry){// If the item is expired, delete the item from storage\n// and return null\nwindow.localStorage.removeItem(key);return initialValue;}return parsedItem.value;}// Parse stored json or if none return initialValue\n// Parse stored json or if none return initialValue\nreturn parsedItem;}catch(error){// If error also return initialValue\nconsole.log(error);return initialValue;}}),_useState2=_slicedToArray(_useState,2),storedValue=_useState2[0],setStoredValue=_useState2[1];// Return a wrapped version of useState's setter function that ...\n// ... persists the new value to localStorage.\nvar setValue=function setValue(value){try{// Allow value to be a function so we have same API as useState\nvar valueToStore=value instanceof Function?value(storedValue):value;// Save state\nsetStoredValue(valueToStore);// Save to local storage\nif(ttl){var now=new Date();// `item` is an object which contains the original value\n// as well as the time when it's supposed to expire\nvar item={value:valueToStore,expiry:now.getTime()+ttl};window.localStorage.setItem(key,JSON.stringify(item));}else{window.localStorage.setItem(key,JSON.stringify(valueToStore));}}catch(error){// A more advanced implementation would handle the error case\nconsole.log(error);}};return[storedValue,setValue];}","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/LocalStorage.js"],"names":["useState","useLocalStorage","key","initialValue","ttl","item","window","localStorage","getItem","parsedItem","JSON","parse","now","Date","getTime","expiry","removeItem","value","error","console","log","storedValue","setStoredValue","setValue","valueToStore","Function","setItem","stringify"],"mappings":"sLAAA,OAASA,QAAT,KAAyB,OAAzB,CACA;AACA,cAAe,SAASC,CAAAA,eAAT,CAAyBC,GAAzB,CAA8BC,YAA9B,CAA4CC,GAA5C,CAAiD,CAC9D;AACA;AACA,cAAsCJ,QAAQ,CAAC,UAAM,CACnD,GAAI,CACF;AACA,GAAMK,CAAAA,IAAI,CAAGC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BN,GAA5B,CAAb,CACA,GAAMO,CAAAA,UAAU,CAAGJ,IAAI,CAAGK,IAAI,CAACC,KAAL,CAAWN,IAAX,CAAH,CAAsBF,YAA7C,CAEA,GAAI,MAAOM,CAAAA,UAAP,GAAsB,QAAtB,EAAkCA,UAAU,GAAK,IAAjD,EAAyD,UAAYA,CAAAA,UAArE,EAAmF,SAAWA,CAAAA,UAAlG,CAA8G,CAC5G,GAAMG,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CACA,GAAIT,GAAG,EAAIQ,GAAG,CAACE,OAAJ,GAAgBL,UAAU,CAACM,MAAtC,CAA8C,CAC5C;AACA;AACAT,MAAM,CAACC,YAAP,CAAoBS,UAApB,CAA+Bd,GAA/B,EACA,MAAOC,CAAAA,YAAP,CACD,CACD,MAAOM,CAAAA,UAAU,CAACQ,KAAlB,CACD,CACD;AAAA;AACA,MAAOR,CAAAA,UAAP,CACD,CAAC,MAAOS,KAAP,CAAc,CACd;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACA,MAAOf,CAAAA,YAAP,CACD,CACF,CAvB6C,CAA9C,wCAAOkB,WAAP,eAAoBC,cAApB,eAyBA;AACA;AACA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAN,KAAK,CAAI,CACxB,GAAI,CACF;AACA,GAAMO,CAAAA,YAAY,CAAGP,KAAK,WAAYQ,CAAAA,QAAjB,CAA4BR,KAAK,CAACI,WAAD,CAAjC,CAAiDJ,KAAtE,CACA;AACAK,cAAc,CAACE,YAAD,CAAd,CACA;AACA,GAAIpB,GAAJ,CAAS,CACP,GAAMQ,CAAAA,GAAG,CAAG,GAAIC,CAAAA,IAAJ,EAAZ,CAEA;AACA;AACA,GAAMR,CAAAA,IAAI,CAAG,CACXY,KAAK,CAAEO,YADI,CAEXT,MAAM,CAAEH,GAAG,CAACE,OAAJ,GAAgBV,GAFb,CAAb,CAIAE,MAAM,CAACC,YAAP,CAAoBmB,OAApB,CAA4BxB,GAA5B,CAAiCQ,IAAI,CAACiB,SAAL,CAAetB,IAAf,CAAjC,EACD,CAVD,IAUO,CACLC,MAAM,CAACC,YAAP,CAAoBmB,OAApB,CAA4BxB,GAA5B,CAAiCQ,IAAI,CAACiB,SAAL,CAAeH,YAAf,CAAjC,EACD,CACF,CAAC,MAAON,KAAP,CAAc,CACd;AACAC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CACF,CAxBD,CA0BA,MAAO,CAACG,WAAD,CAAcE,QAAd,CAAP,CACD","sourcesContent":["import { useState } from \"react\";\r\n// Hook from useHooks! (https://usehooks.com/useLocalStorage/)\r\nexport default function useLocalStorage(key, initialValue, ttl) {\r\n  // State to store our value\r\n  // Pass initial state function to useState so logic is only executed once\r\n  const [storedValue, setStoredValue] = useState(() => {\r\n    try {\r\n      // Get from local storage by key\r\n      const item = window.localStorage.getItem(key);\r\n      const parsedItem = item ? JSON.parse(item) : initialValue;\r\n\r\n      if (typeof parsedItem === \"object\" && parsedItem !== null && \"expiry\" in parsedItem && \"value\" in parsedItem) {\r\n        const now = new Date();\r\n        if (ttl && now.getTime() > parsedItem.expiry) {\r\n          // If the item is expired, delete the item from storage\r\n          // and return null\r\n          window.localStorage.removeItem(key);\r\n          return initialValue;\r\n        }\r\n        return parsedItem.value;\r\n      }\r\n      // Parse stored json or if none return initialValue\r\n      return parsedItem;\r\n    } catch (error) {\r\n      // If error also return initialValue\r\n      console.log(error);\r\n      return initialValue;\r\n    }\r\n  });\r\n\r\n  // Return a wrapped version of useState's setter function that ...\r\n  // ... persists the new value to localStorage.\r\n  const setValue = value => {\r\n    try {\r\n      // Allow value to be a function so we have same API as useState\r\n      const valueToStore = value instanceof Function ? value(storedValue) : value;\r\n      // Save state\r\n      setStoredValue(valueToStore);\r\n      // Save to local storage\r\n      if (ttl) {\r\n        const now = new Date();\r\n\r\n        // `item` is an object which contains the original value\r\n        // as well as the time when it's supposed to expire\r\n        const item = {\r\n          value: valueToStore,\r\n          expiry: now.getTime() + ttl,\r\n        };\r\n        window.localStorage.setItem(key, JSON.stringify(item));\r\n      } else {\r\n        window.localStorage.setItem(key, JSON.stringify(valueToStore));\r\n      }\r\n    } catch (error) {\r\n      // A more advanced implementation would handle the error case\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  return [storedValue, setValue];\r\n}\r\n"]},"metadata":{},"sourceType":"module"}