{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KINSHUK\\\\Desktop\\\\ETH\\\\qd-off-chain-voters-and-candidates\\\\packages\\\\react-app\\\\src\\\\components\\\\TokenBalance.jsx\",\n    _s = $RefreshSig$();\n\nimport { useTokenBalance } from \"eth-hooks\";\nimport React, { useState } from \"react\";\nimport { utils } from \"ethers\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function TokenBalance(props) {\n  _s();\n\n  const [dollarMode, setDollarMode] = useState(true);\n  const tokenContract = props.contracts && props.contracts[props.name];\n  const balance = useTokenBalance(tokenContract, props.address, 1777);\n  let floatBalance = parseFloat(\"0.00\");\n  let usingBalance = balance;\n\n  if (typeof props.balance !== \"undefined\") {\n    usingBalance = props.balance;\n  }\n\n  if (usingBalance) {\n    const etherBalance = utils.formatEther(usingBalance);\n    parseFloat(etherBalance).toFixed(2);\n    floatBalance = parseFloat(etherBalance);\n  }\n\n  let displayBalance = floatBalance.toFixed(4);\n\n  if (props.dollarMultiplier && dollarMode) {\n    displayBalance = \"$\" + (floatBalance * props.dollarMultiplier).toFixed(2);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    style: {\n      verticalAlign: \"middle\",\n      fontSize: 24,\n      padding: 8,\n      cursor: \"pointer\"\n    },\n    onClick: () => {\n      setDollarMode(!dollarMode);\n    },\n    children: [props.img, \" \", displayBalance]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 5\n  }, this);\n}\n\n_s(TokenBalance, \"tB5S9MdLrATSSWxfSFxfC0SSDik=\", false, function () {\n  return [useTokenBalance];\n});\n\n_c = TokenBalance;\n\nvar _c;\n\n$RefreshReg$(_c, \"TokenBalance\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/components/TokenBalance.jsx"],"names":["useTokenBalance","React","useState","utils","TokenBalance","props","dollarMode","setDollarMode","tokenContract","contracts","name","balance","address","floatBalance","parseFloat","usingBalance","etherBalance","formatEther","toFixed","displayBalance","dollarMultiplier","verticalAlign","fontSize","padding","cursor","img"],"mappings":";;;AAAA,SAASA,eAAT,QAAgC,WAAhC;AACA,OAAOC,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AAEA,SAASC,KAAT,QAAsB,QAAtB;;AAEA,eAAe,SAASC,YAAT,CAAsBC,KAAtB,EAA6B;AAAA;;AAC1C,QAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BL,QAAQ,CAAC,IAAD,CAA5C;AAEA,QAAMM,aAAa,GAAGH,KAAK,CAACI,SAAN,IAAmBJ,KAAK,CAACI,SAAN,CAAgBJ,KAAK,CAACK,IAAtB,CAAzC;AACA,QAAMC,OAAO,GAAGX,eAAe,CAACQ,aAAD,EAAgBH,KAAK,CAACO,OAAtB,EAA+B,IAA/B,CAA/B;AAEA,MAAIC,YAAY,GAAGC,UAAU,CAAC,MAAD,CAA7B;AAEA,MAAIC,YAAY,GAAGJ,OAAnB;;AAEA,MAAI,OAAON,KAAK,CAACM,OAAb,KAAyB,WAA7B,EAA0C;AACxCI,IAAAA,YAAY,GAAGV,KAAK,CAACM,OAArB;AACD;;AAED,MAAII,YAAJ,EAAkB;AAChB,UAAMC,YAAY,GAAGb,KAAK,CAACc,WAAN,CAAkBF,YAAlB,CAArB;AACAD,IAAAA,UAAU,CAACE,YAAD,CAAV,CAAyBE,OAAzB,CAAiC,CAAjC;AACAL,IAAAA,YAAY,GAAGC,UAAU,CAACE,YAAD,CAAzB;AACD;;AAED,MAAIG,cAAc,GAAGN,YAAY,CAACK,OAAb,CAAqB,CAArB,CAArB;;AAEA,MAAIb,KAAK,CAACe,gBAAN,IAA0Bd,UAA9B,EAA0C;AACxCa,IAAAA,cAAc,GAAG,MAAM,CAACN,YAAY,GAAGR,KAAK,CAACe,gBAAtB,EAAwCF,OAAxC,CAAgD,CAAhD,CAAvB;AACD;;AAED,sBACE;AACE,IAAA,KAAK,EAAE;AACLG,MAAAA,aAAa,EAAE,QADV;AAELC,MAAAA,QAAQ,EAAE,EAFL;AAGLC,MAAAA,OAAO,EAAE,CAHJ;AAILC,MAAAA,MAAM,EAAE;AAJH,KADT;AAOE,IAAA,OAAO,EAAE,MAAM;AACbjB,MAAAA,aAAa,CAAC,CAACD,UAAF,CAAb;AACD,KATH;AAAA,eAWGD,KAAK,CAACoB,GAXT,OAWeN,cAXf;AAAA;AAAA;AAAA;AAAA;AAAA,UADF;AAeD;;GAzCuBf,Y;UAINJ,e;;;KAJMI,Y","sourcesContent":["import { useTokenBalance } from \"eth-hooks\";\r\nimport React, { useState } from \"react\";\r\n\r\nimport { utils } from \"ethers\";\r\n\r\nexport default function TokenBalance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  const tokenContract = props.contracts && props.contracts[props.name];\r\n  const balance = useTokenBalance(tokenContract, props.address, 1777);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  if (props.dollarMultiplier && dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * props.dollarMultiplier).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {props.img} {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}