{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.decrypt = exports.encrypt = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\n\n\nasync function encrypt(plainText, secret) {\n  if (secret.length != 64) throw Error(`secret must be 256 bits`);\n  const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n  const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n    \"name\": \"aes-gcm\"\n  }, false, [\"encrypt\", \"decrypt\"]);\n  let enc = new TextEncoder(); // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n\n  const encryptedResult = await window.crypto.subtle.encrypt({\n    name: \"AES-GCM\",\n    iv: ivBytes\n  }, secretKey, enc.encode(plainText));\n  let tagLength = 16;\n  let authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n  let encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n  let authTagBytes = new Uint8Array(authTag);\n  let encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n  let concatted = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n  return (0, util_1.uint8ArrayToHex)(concatted);\n}\n\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\n\nfunction decrypt(cipherText, secret) {\n  if (secret.length != 64) throw Error(`secret must be 256 bits`);\n  return new rxjs_1.Observable(function (subscriber) {\n    (async function () {\n      const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), {\n        \"name\": \"aes-gcm\"\n      }, false, [\"encrypt\", \"decrypt\"]);\n      const encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n      const ivBytes = encrypted.slice(0, 12);\n      const authTagBytes = encrypted.slice(12, 28);\n      const encryptedPlaintextBytes = encrypted.slice(28);\n      const concattedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n      const algo = {\n        name: \"AES-GCM\",\n        iv: new Uint8Array(ivBytes)\n      };\n\n      try {\n        const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n        let decoder = new TextDecoder();\n        subscriber.next(decoder.decode(decrypted));\n        subscriber.complete();\n      } catch (err) {\n        subscriber.error(err);\n      }\n    })();\n  });\n}\n\nexports.decrypt = decrypt;","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/walletlink/dist/relay/aes256gcm.js"],"names":["Object","defineProperty","exports","value","decrypt","encrypt","rxjs_1","require","util_1","plainText","secret","length","Error","ivBytes","crypto","getRandomValues","Uint8Array","secretKey","subtle","importKey","hexStringToUint8Array","enc","TextEncoder","encryptedResult","window","name","iv","encode","tagLength","authTag","slice","byteLength","encryptedPlaintext","authTagBytes","encryptedPlaintextBytes","concatted","uint8ArrayToHex","cipherText","Observable","subscriber","encrypted","concattedBytes","algo","decrypted","decoder","TextDecoder","next","decode","complete","err","error"],"mappings":"AAAA,a,CACA;AACA;AACA;;AACAA,MAAM,CAACC,cAAP,CAAsBC,OAAtB,EAA+B,YAA/B,EAA6C;AAAEC,EAAAA,KAAK,EAAE;AAAT,CAA7C;AACAD,OAAO,CAACE,OAAR,GAAkBF,OAAO,CAACG,OAAR,GAAkB,KAAK,CAAzC;;AACA,MAAMC,MAAM,GAAGC,OAAO,CAAC,MAAD,CAAtB;;AACA,MAAMC,MAAM,GAAGD,OAAO,CAAC,SAAD,CAAtB;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,eAAeF,OAAf,CAAuBI,SAAvB,EAAkCC,MAAlC,EAA0C;AACtC,MAAIA,MAAM,CAACC,MAAP,IAAiB,EAArB,EACI,MAAMC,KAAK,CAAE,yBAAF,CAAX;AACJ,QAAMC,OAAO,GAAGC,MAAM,CAACC,eAAP,CAAuB,IAAIC,UAAJ,CAAe,EAAf,CAAvB,CAAhB;AACA,QAAMC,SAAS,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcC,SAAd,CAAwB,KAAxB,EAA+B,CAAC,GAAGX,MAAM,CAACY,qBAAX,EAAkCV,MAAlC,CAA/B,EAA0E;AAAE,YAAQ;AAAV,GAA1E,EAAiG,KAAjG,EAAwG,CAAC,SAAD,EAAY,SAAZ,CAAxG,CAAxB;AACA,MAAIW,GAAG,GAAG,IAAIC,WAAJ,EAAV,CALsC,CAMtC;;AACA,QAAMC,eAAe,GAAG,MAAMC,MAAM,CAACV,MAAP,CAAcI,MAAd,CAAqBb,OAArB,CAA6B;AACvDoB,IAAAA,IAAI,EAAE,SADiD;AAEvDC,IAAAA,EAAE,EAAEb;AAFmD,GAA7B,EAG3BI,SAH2B,EAGhBI,GAAG,CAACM,MAAJ,CAAWlB,SAAX,CAHgB,CAA9B;AAIA,MAAImB,SAAS,GAAG,EAAhB;AACA,MAAIC,OAAO,GAAGN,eAAe,CAACO,KAAhB,CAAsBP,eAAe,CAACQ,UAAhB,GAA6BH,SAAnD,CAAd;AACA,MAAII,kBAAkB,GAAGT,eAAe,CAACO,KAAhB,CAAsB,CAAtB,EAAyBP,eAAe,CAACQ,UAAhB,GAA6BH,SAAtD,CAAzB;AACA,MAAIK,YAAY,GAAG,IAAIjB,UAAJ,CAAea,OAAf,CAAnB;AACA,MAAIK,uBAAuB,GAAG,IAAIlB,UAAJ,CAAegB,kBAAf,CAA9B;AACA,MAAIG,SAAS,GAAG,IAAInB,UAAJ,CAAe,CAAC,GAAGH,OAAJ,EAAa,GAAGoB,YAAhB,EAA8B,GAAGC,uBAAjC,CAAf,CAAhB;AACA,SAAO,CAAC,GAAG1B,MAAM,CAAC4B,eAAX,EAA4BD,SAA5B,CAAP;AACH;;AACDjC,OAAO,CAACG,OAAR,GAAkBA,OAAlB;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,SAASD,OAAT,CAAiBiC,UAAjB,EAA6B3B,MAA7B,EAAqC;AACjC,MAAIA,MAAM,CAACC,MAAP,IAAiB,EAArB,EACI,MAAMC,KAAK,CAAE,yBAAF,CAAX;AACJ,SAAO,IAAIN,MAAM,CAACgC,UAAX,CAAsB,UAAUC,UAAV,EAAsB;AAC/C,KAAC,kBAAkB;AACf,YAAMtB,SAAS,GAAG,MAAMH,MAAM,CAACI,MAAP,CAAcC,SAAd,CAAwB,KAAxB,EAA+B,CAAC,GAAGX,MAAM,CAACY,qBAAX,EAAkCV,MAAlC,CAA/B,EAA0E;AAAE,gBAAQ;AAAV,OAA1E,EAAiG,KAAjG,EAAwG,CAAC,SAAD,EAAY,SAAZ,CAAxG,CAAxB;AACA,YAAM8B,SAAS,GAAG,CAAC,GAAGhC,MAAM,CAACY,qBAAX,EAAkCiB,UAAlC,CAAlB;AACA,YAAMxB,OAAO,GAAG2B,SAAS,CAACV,KAAV,CAAgB,CAAhB,EAAmB,EAAnB,CAAhB;AACA,YAAMG,YAAY,GAAGO,SAAS,CAACV,KAAV,CAAgB,EAAhB,EAAoB,EAApB,CAArB;AACA,YAAMI,uBAAuB,GAAGM,SAAS,CAACV,KAAV,CAAgB,EAAhB,CAAhC;AACA,YAAMW,cAAc,GAAG,IAAIzB,UAAJ,CAAe,CAAC,GAAGkB,uBAAJ,EAA6B,GAAGD,YAAhC,CAAf,CAAvB;AACA,YAAMS,IAAI,GAAG;AACTjB,QAAAA,IAAI,EAAE,SADG;AAETC,QAAAA,EAAE,EAAE,IAAIV,UAAJ,CAAeH,OAAf;AAFK,OAAb;;AAIA,UAAI;AACA,cAAM8B,SAAS,GAAG,MAAMnB,MAAM,CAACV,MAAP,CAAcI,MAAd,CAAqBd,OAArB,CAA6BsC,IAA7B,EAAmCzB,SAAnC,EAA8CwB,cAA9C,CAAxB;AACA,YAAIG,OAAO,GAAG,IAAIC,WAAJ,EAAd;AACAN,QAAAA,UAAU,CAACO,IAAX,CAAgBF,OAAO,CAACG,MAAR,CAAeJ,SAAf,CAAhB;AACAJ,QAAAA,UAAU,CAACS,QAAX;AACH,OALD,CAMA,OAAOC,GAAP,EAAY;AACRV,QAAAA,UAAU,CAACW,KAAX,CAAiBD,GAAjB;AACH;AACJ,KApBD;AAqBH,GAtBM,CAAP;AAuBH;;AACD/C,OAAO,CAACE,OAAR,GAAkBA,OAAlB","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.decrypt = exports.encrypt = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst util_1 = require(\"../util\");\n/**\n *\n * @param plainText string to be encrypted\n * @param secret hex representation of 32-byte secret\n * returns hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes. Remaining bytes are the\n * encrypted plainText.\n */\nasync function encrypt(plainText, secret) {\n    if (secret.length != 64)\n        throw Error(`secret must be 256 bits`);\n    const ivBytes = crypto.getRandomValues(new Uint8Array(12));\n    const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n    let enc = new TextEncoder();\n    // Will return encrypted plainText with auth tag (ie MAC or checksum) appended at the end\n    const encryptedResult = await window.crypto.subtle.encrypt({\n        name: \"AES-GCM\",\n        iv: ivBytes\n    }, secretKey, enc.encode(plainText));\n    let tagLength = 16;\n    let authTag = encryptedResult.slice(encryptedResult.byteLength - tagLength);\n    let encryptedPlaintext = encryptedResult.slice(0, encryptedResult.byteLength - tagLength);\n    let authTagBytes = new Uint8Array(authTag);\n    let encryptedPlaintextBytes = new Uint8Array(encryptedPlaintext);\n    let concatted = new Uint8Array([...ivBytes, ...authTagBytes, ...encryptedPlaintextBytes]);\n    return (0, util_1.uint8ArrayToHex)(concatted);\n}\nexports.encrypt = encrypt;\n/**\n *\n * @param cipherText hex string representation of bytes in the order: initialization vector (iv),\n * auth tag, encrypted plaintext. IV is 12 bytes. Auth tag is 16 bytes.\n * @param secret hex string representation of 32-byte secret\n */\nfunction decrypt(cipherText, secret) {\n    if (secret.length != 64)\n        throw Error(`secret must be 256 bits`);\n    return new rxjs_1.Observable(function (subscriber) {\n        (async function () {\n            const secretKey = await crypto.subtle.importKey(\"raw\", (0, util_1.hexStringToUint8Array)(secret), { \"name\": \"aes-gcm\" }, false, [\"encrypt\", \"decrypt\"]);\n            const encrypted = (0, util_1.hexStringToUint8Array)(cipherText);\n            const ivBytes = encrypted.slice(0, 12);\n            const authTagBytes = encrypted.slice(12, 28);\n            const encryptedPlaintextBytes = encrypted.slice(28);\n            const concattedBytes = new Uint8Array([...encryptedPlaintextBytes, ...authTagBytes]);\n            const algo = {\n                name: \"AES-GCM\",\n                iv: new Uint8Array(ivBytes)\n            };\n            try {\n                const decrypted = await window.crypto.subtle.decrypt(algo, secretKey, concattedBytes);\n                let decoder = new TextDecoder();\n                subscriber.next(decoder.decode(decrypted));\n                subscriber.complete();\n            }\n            catch (err) {\n                subscriber.error(err);\n            }\n        })();\n    });\n}\nexports.decrypt = decrypt;\n"]},"metadata":{},"sourceType":"script"}