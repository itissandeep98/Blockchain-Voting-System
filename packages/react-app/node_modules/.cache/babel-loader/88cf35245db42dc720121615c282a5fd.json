{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useState, useRef } from \"react\";\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to keep track of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider\r\n*/\n\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\n  _s();\n\n  const [updates, setUpdates] = useState([]);\n  const currentStartBlockRef = useRef();\n  useEffect(() => {\n    if (currentStartBlockRef.current !== startBlock) {\n      currentStartBlockRef.current = startBlock;\n      setUpdates([]);\n    }\n\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\n      provider.resetEventsBlock(startBlock);\n    }\n\n    if (contracts && contractName && contracts[contractName]) {\n      try {\n        contracts[contractName].on(eventName, function () {\n          for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {\n            args[_key] = arguments[_key];\n          }\n\n          const blockNumber = args[args.length - 1].blockNumber;\n          setUpdates(messages => [{\n            blockNumber,\n            ...args.pop().args\n          }, ...messages]);\n        });\n        return () => {\n          contracts[contractName].removeListener(eventName);\n        };\n      } catch (e) {\n        console.log(e);\n      }\n    }\n  }, [provider, startBlock, contracts, contractName, eventName]);\n  return updates;\n}\n\n_s(useEventListener, \"2+7Q1+LU6aUrlRm+gzMXd/TZOJo=\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/EventListener.js"],"names":["useEffect","useState","useRef","useEventListener","contracts","contractName","eventName","provider","startBlock","args","updates","setUpdates","currentStartBlockRef","current","resetEventsBlock","on","blockNumber","length","messages","pop","removeListener","e","console","log"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,QAApB,EAA8BC,MAA9B,QAA4C,OAA5C;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA,eAAe,SAASC,gBAAT,CAA0BC,SAA1B,EAAqCC,YAArC,EAAmDC,SAAnD,EAA8DC,QAA9D,EAAwEC,UAAxE,EAAoFC,IAApF,EAA0F;AAAA;;AACvG,QAAM,CAACC,OAAD,EAAUC,UAAV,IAAwBV,QAAQ,CAAC,EAAD,CAAtC;AACA,QAAMW,oBAAoB,GAAGV,MAAM,EAAnC;AAEAF,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIY,oBAAoB,CAACC,OAArB,KAAiCL,UAArC,EAAiD;AAC/CI,MAAAA,oBAAoB,CAACC,OAArB,GAA+BL,UAA/B;AACAG,MAAAA,UAAU,CAAC,EAAD,CAAV;AACD;;AACD,QAAI,OAAOJ,QAAP,KAAoB,WAApB,IAAmC,OAAOC,UAAP,KAAsB,WAA7D,EAA0E;AACxE;AACAD,MAAAA,QAAQ,CAACO,gBAAT,CAA0BN,UAA1B;AACD;;AACD,QAAIJ,SAAS,IAAIC,YAAb,IAA6BD,SAAS,CAACC,YAAD,CAA1C,EAA0D;AACxD,UAAI;AACFD,QAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBU,EAAxB,CAA2BT,SAA3B,EAAsC,YAAa;AAAA,4CAATG,IAAS;AAATA,YAAAA,IAAS;AAAA;;AACjD,gBAAMO,WAAW,GAAGP,IAAI,CAACA,IAAI,CAACQ,MAAL,GAAc,CAAf,CAAJ,CAAsBD,WAA1C;AACAL,UAAAA,UAAU,CAACO,QAAQ,IAAI,CAAC;AAAEF,YAAAA,WAAF;AAAe,eAAGP,IAAI,CAACU,GAAL,GAAWV;AAA7B,WAAD,EAAsC,GAAGS,QAAzC,CAAb,CAAV;AACD,SAHD;AAIA,eAAO,MAAM;AACXd,UAAAA,SAAS,CAACC,YAAD,CAAT,CAAwBe,cAAxB,CAAuCd,SAAvC;AACD,SAFD;AAGD,OARD,CAQE,OAAOe,CAAP,EAAU;AACVC,QAAAA,OAAO,CAACC,GAAR,CAAYF,CAAZ;AACD;AACF;AACF,GAtBQ,EAsBN,CAACd,QAAD,EAAWC,UAAX,EAAuBJ,SAAvB,EAAkCC,YAAlC,EAAgDC,SAAhD,CAtBM,CAAT;AAwBA,SAAOI,OAAP;AACD;;GA7BuBP,gB","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to keep track of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider\r\n*/\r\n\r\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\r\n  const [updates, setUpdates] = useState([]);\r\n  const currentStartBlockRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (currentStartBlockRef.current !== startBlock) {\r\n      currentStartBlockRef.current = startBlock;\r\n      setUpdates([]);\r\n    }\r\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\r\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\r\n      provider.resetEventsBlock(startBlock);\r\n    }\r\n    if (contracts && contractName && contracts[contractName]) {\r\n      try {\r\n        contracts[contractName].on(eventName, (...args) => {\r\n          const blockNumber = args[args.length - 1].blockNumber;\r\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\r\n        });\r\n        return () => {\r\n          contracts[contractName].removeListener(eventName);\r\n        };\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [provider, startBlock, contracts, contractName, eventName]);\r\n\r\n  return updates;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}