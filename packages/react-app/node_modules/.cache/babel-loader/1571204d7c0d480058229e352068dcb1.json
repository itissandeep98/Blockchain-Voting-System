{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{Input}from\"antd\";import React,{useEffect,useState}from\"react\";// small change in useEffect, display currentValue if it's provided by user\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/import{jsx as _jsx}from\"react/jsx-runtime\";export default function EtherInput(props){var _useState=useState(props.price?\"USD\":\"ETH\"),_useState2=_slicedToArray(_useState,2),mode=_useState2[0],setMode=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),display=_useState4[0],setDisplay=_useState4[1];var _useState5=useState(),_useState6=_slicedToArray(_useState5,2),value=_useState6[0],setValue=_useState6[1];var currentValue=typeof props.value!==\"undefined\"?props.value:value;var option=function option(title){if(!props.price)return\"\";return/*#__PURE__*/_jsx(\"div\",{style:{cursor:\"pointer\"},onClick:function onClick(){if(mode===\"USD\"){setMode(\"ETH\");setDisplay(currentValue);}else{setMode(\"USD\");if(currentValue){var usdValue=\"\"+(parseFloat(currentValue)*props.price).toFixed(2);setDisplay(usdValue);}else{setDisplay(currentValue);}}},children:title});};var prefix;var addonAfter;if(mode===\"USD\"){prefix=\"$\";addonAfter=option(\"USD ðŸ”€\");}else{prefix=\"Îž\";addonAfter=option(\"ETH ðŸ”€\");}useEffect(function(){if(!currentValue){setDisplay(\"\");}},[currentValue]);return/*#__PURE__*/_jsx(Input,{placeholder:props.placeholder?props.placeholder:\"amount in \"+mode,autoFocus:props.autoFocus,prefix:prefix,value:display,addonAfter:addonAfter,onChange:/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(e){var newValue,possibleNewValue,ethValue;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:newValue=e.target.value;if(mode===\"USD\"){possibleNewValue=parseFloat(newValue);if(possibleNewValue){ethValue=possibleNewValue/props.price;setValue(ethValue);if(typeof props.onChange===\"function\"){props.onChange(ethValue);}setDisplay(newValue);}else{setDisplay(newValue);}}else{setValue(newValue);if(typeof props.onChange===\"function\"){props.onChange(newValue);}setDisplay(newValue);}case 2:case\"end\":return _context.stop();}}},_callee);}));return function(_x){return _ref.apply(this,arguments);};}()});}","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/components/EtherInput.jsx"],"names":["Input","React","useEffect","useState","EtherInput","props","price","mode","setMode","display","setDisplay","value","setValue","currentValue","option","title","cursor","usdValue","parseFloat","toFixed","prefix","addonAfter","placeholder","autoFocus","e","newValue","target","possibleNewValue","ethValue","onChange"],"mappings":"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","sourcesContent":["import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD ðŸ”€\");\r\n  } else {\r\n    prefix = \"Îž\";\r\n    addonAfter = option(\"ETH ðŸ”€\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}