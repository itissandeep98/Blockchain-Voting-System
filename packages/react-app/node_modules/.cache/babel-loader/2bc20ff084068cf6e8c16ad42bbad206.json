{"ast":null,"code":"\"use strict\"; // Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.Session = void 0;\n\nconst rxjs_1 = require(\"rxjs\");\n\nconst operators_1 = require(\"rxjs/operators\");\n\nconst util_1 = require(\"../util\");\n\nconst js_sha256_1 = require(\"js-sha256\");\n\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\n\nclass Session {\n  constructor(storage, id, secret, linked) {\n    this._storage = storage;\n    this._id = id || (0, util_1.randomBytesHex)(16);\n    this._secret = secret || (0, util_1.randomBytesHex)(32);\n    const hash = js_sha256_1.sha256.create();\n    hash.update(`${this._id}, ${this._secret} WalletLink`);\n    this._key = hash.hex();\n    this._linked = !!linked;\n  }\n\n  static load(storage) {\n    const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n    const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n    const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n\n    if (id && secret) {\n      return new Session(storage, id, secret, linked === \"1\");\n    }\n\n    return null;\n  }\n\n  static clear(storage) {\n    storage.removeItem(STORAGE_KEY_SESSION_SECRET);\n    storage.removeItem(STORAGE_KEY_SESSION_ID);\n    storage.removeItem(STORAGE_KEY_SESSION_LINKED);\n  }\n\n  static get persistedSessionIdChange$() {\n    return (0, rxjs_1.fromEvent)(window, \"storage\").pipe((0, operators_1.filter)(evt => evt.key === STORAGE_KEY_SESSION_ID), (0, operators_1.map)(evt => ({\n      oldValue: evt.oldValue || null,\n      newValue: evt.newValue || null\n    })));\n  }\n  /**\n   * Takes in a session ID and returns the sha256 hash of it.\n   * @param sessionId session ID\n   */\n\n\n  static hash(sessionId) {\n    const hash = js_sha256_1.sha256.create();\n    return hash.update(sessionId).hex();\n  }\n\n  get id() {\n    return this._id;\n  }\n\n  get secret() {\n    return this._secret;\n  }\n\n  get key() {\n    return this._key;\n  }\n\n  get linked() {\n    return this._linked;\n  }\n\n  set linked(val) {\n    this._linked = val;\n    this.persistLinked();\n  }\n\n  save() {\n    this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n\n    this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n\n    this.persistLinked();\n    return this;\n  }\n\n  persistLinked() {\n    this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n  }\n\n}\n\nexports.Session = Session;","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/walletlink/dist/relay/Session.js"],"names":["Object","defineProperty","exports","value","Session","rxjs_1","require","operators_1","util_1","js_sha256_1","STORAGE_KEY_SESSION_ID","STORAGE_KEY_SESSION_SECRET","STORAGE_KEY_SESSION_LINKED","constructor","storage","id","secret","linked","_storage","_id","randomBytesHex","_secret","hash","sha256","create","update","_key","hex","_linked","load","getItem","clear","removeItem","persistedSessionIdChange$","fromEvent","window","pipe","filter","evt","key","map","oldValue","newValue","sessionId","val","persistLinked","save","setItem"],"mappings":"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","sourcesContent":["\"use strict\";\n// Copyright (c) 2018-2020 WalletLink.org <https://www.walletlink.org/>\n// Copyright (c) 2018-2020 Coinbase, Inc. <https://www.coinbase.com/>\n// Licensed under the Apache License, version 2.0\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.Session = void 0;\nconst rxjs_1 = require(\"rxjs\");\nconst operators_1 = require(\"rxjs/operators\");\nconst util_1 = require(\"../util\");\nconst js_sha256_1 = require(\"js-sha256\");\nconst STORAGE_KEY_SESSION_ID = \"session:id\";\nconst STORAGE_KEY_SESSION_SECRET = \"session:secret\";\nconst STORAGE_KEY_SESSION_LINKED = \"session:linked\";\nclass Session {\n    constructor(storage, id, secret, linked) {\n        this._storage = storage;\n        this._id = id || (0, util_1.randomBytesHex)(16);\n        this._secret = secret || (0, util_1.randomBytesHex)(32);\n        const hash = js_sha256_1.sha256.create();\n        hash.update(`${this._id}, ${this._secret} WalletLink`);\n        this._key = hash.hex();\n        this._linked = !!linked;\n    }\n    static load(storage) {\n        const id = storage.getItem(STORAGE_KEY_SESSION_ID);\n        const linked = storage.getItem(STORAGE_KEY_SESSION_LINKED);\n        const secret = storage.getItem(STORAGE_KEY_SESSION_SECRET);\n        if (id && secret) {\n            return new Session(storage, id, secret, linked === \"1\");\n        }\n        return null;\n    }\n    static clear(storage) {\n        storage.removeItem(STORAGE_KEY_SESSION_SECRET);\n        storage.removeItem(STORAGE_KEY_SESSION_ID);\n        storage.removeItem(STORAGE_KEY_SESSION_LINKED);\n    }\n    static get persistedSessionIdChange$() {\n        return (0, rxjs_1.fromEvent)(window, \"storage\").pipe((0, operators_1.filter)(evt => evt.key === STORAGE_KEY_SESSION_ID), (0, operators_1.map)(evt => ({\n            oldValue: evt.oldValue || null,\n            newValue: evt.newValue || null\n        })));\n    }\n    /**\n     * Takes in a session ID and returns the sha256 hash of it.\n     * @param sessionId session ID\n     */\n    static hash(sessionId) {\n        const hash = js_sha256_1.sha256.create();\n        return hash.update(sessionId).hex();\n    }\n    get id() {\n        return this._id;\n    }\n    get secret() {\n        return this._secret;\n    }\n    get key() {\n        return this._key;\n    }\n    get linked() {\n        return this._linked;\n    }\n    set linked(val) {\n        this._linked = val;\n        this.persistLinked();\n    }\n    save() {\n        this._storage.setItem(STORAGE_KEY_SESSION_ID, this._id);\n        this._storage.setItem(STORAGE_KEY_SESSION_SECRET, this._secret);\n        this.persistLinked();\n        return this;\n    }\n    persistLinked() {\n        this._storage.setItem(STORAGE_KEY_SESSION_LINKED, this._linked ? \"1\" : \"0\");\n    }\n}\nexports.Session = Session;\n"]},"metadata":{},"sourceType":"script"}