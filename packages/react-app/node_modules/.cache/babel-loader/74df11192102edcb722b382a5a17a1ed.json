{"ast":null,"code":"import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useState,useEffect}from\"react\";var _require=require(\"ethers\"),ethers=_require.ethers;export default function useBurnerSigner(provider){var key=\"metaPrivateKey\";var wallet;var _useState=useState(),_useState2=_slicedToArray(_useState,2),signer=_useState2[0],setSigner=_useState2[1];var _useState3=useState(),_useState4=_slicedToArray(_useState3,2),storedValue=_useState4[0],setStoredValue=_useState4[1];var setValue=function setValue(value){try{setStoredValue(value);window.localStorage.setItem(key,value);}catch(error){console.log(error);}};useEffect(function(){var storedKey=window.localStorage.getItem(key);if(!storedKey){console.log(\"generating a new key\");var _newWallet=ethers.Wallet.createRandom();var _newKey=_newWallet.privateKey;setValue(_newKey);}else{setValue(storedKey);}},[]);useEffect(function(){if(storedValue&&provider){wallet=new ethers.Wallet(storedValue);var _signer=wallet.connect(provider);setSigner(_signer);}},[storedValue,provider]);return signer;}","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/BurnerSigner.js"],"names":["useState","useEffect","require","ethers","useBurnerSigner","provider","key","wallet","signer","setSigner","storedValue","setStoredValue","setValue","value","window","localStorage","setItem","error","console","log","storedKey","getItem","_newWallet","Wallet","createRandom","_newKey","privateKey","_signer","connect"],"mappings":"sLAAA,OAASA,QAAT,CAAmBC,SAAnB,KAAoC,OAApC,CAEA,aAAmBC,OAAO,CAAC,QAAD,CAA1B,CAAQC,MAAR,UAAQA,MAAR,CAEA,cAAe,SAASC,CAAAA,eAAT,CAAyBC,QAAzB,CAAmC,CAChD,GAAMC,CAAAA,GAAG,CAAG,gBAAZ,CACA,GAAIC,CAAAA,MAAJ,CACA,cAA4BP,QAAQ,EAApC,wCAAOQ,MAAP,eAAeC,SAAf,eACA,eAAsCT,QAAQ,EAA9C,yCAAOU,WAAP,eAAoBC,cAApB,eAEA,GAAMC,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,KAAK,CAAI,CACxB,GAAI,CACFF,cAAc,CAACE,KAAD,CAAd,CACAC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BV,GAA5B,CAAiCO,KAAjC,EACD,CAAC,MAAOI,KAAP,CAAc,CACdC,OAAO,CAACC,GAAR,CAAYF,KAAZ,EACD,CACF,CAPD,CASAhB,SAAS,CAAC,UAAM,CACd,GAAMmB,CAAAA,SAAS,CAAGN,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4Bf,GAA5B,CAAlB,CACA,GAAI,CAACc,SAAL,CAAgB,CACdF,OAAO,CAACC,GAAR,CAAY,sBAAZ,EACA,GAAMG,CAAAA,UAAU,CAAGnB,MAAM,CAACoB,MAAP,CAAcC,YAAd,EAAnB,CACA,GAAMC,CAAAA,OAAO,CAAGH,UAAU,CAACI,UAA3B,CACAd,QAAQ,CAACa,OAAD,CAAR,CACD,CALD,IAKO,CACLb,QAAQ,CAACQ,SAAD,CAAR,CACD,CACF,CAVQ,CAUN,EAVM,CAAT,CAYAnB,SAAS,CAAC,UAAM,CACd,GAAIS,WAAW,EAAIL,QAAnB,CAA6B,CAC3BE,MAAM,CAAG,GAAIJ,CAAAA,MAAM,CAACoB,MAAX,CAAkBb,WAAlB,CAAT,CACA,GAAMiB,CAAAA,OAAO,CAAGpB,MAAM,CAACqB,OAAP,CAAevB,QAAf,CAAhB,CACAI,SAAS,CAACkB,OAAD,CAAT,CACD,CACF,CANQ,CAMN,CAACjB,WAAD,CAAcL,QAAd,CANM,CAAT,CAQA,MAAOG,CAAAA,MAAP,CACD","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\nexport default function useBurnerSigner(provider) {\r\n  const key = \"metaPrivateKey\";\r\n  let wallet;\r\n  const [signer, setSigner] = useState();\r\n  const [storedValue, setStoredValue] = useState();\r\n\r\n  const setValue = value => {\r\n    try {\r\n      setStoredValue(value);\r\n      window.localStorage.setItem(key, value);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedKey = window.localStorage.getItem(key);\r\n    if (!storedKey) {\r\n      console.log(\"generating a new key\");\r\n      const _newWallet = ethers.Wallet.createRandom();\r\n      const _newKey = _newWallet.privateKey;\r\n      setValue(_newKey);\r\n    } else {\r\n      setValue(storedKey);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (storedValue && provider) {\r\n      wallet = new ethers.Wallet(storedValue);\r\n      const _signer = wallet.connect(provider);\r\n      setSigner(_signer);\r\n    }\r\n  }, [storedValue, provider]);\r\n\r\n  return signer;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}