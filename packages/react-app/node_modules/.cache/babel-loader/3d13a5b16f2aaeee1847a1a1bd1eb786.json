{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KINSHUK\\\\Desktop\\\\ETH\\\\qd-off-chain-voters-and-candidates\\\\packages\\\\react-app\\\\src\\\\views\\\\QuadraticDiplomacyReward.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState, useMemo } from \"react\";\nimport { Alert, Input, Button, Divider, Space, Typography, Table, Tag, Select, notification, Spin } from \"antd\";\nimport { CheckCircleTwoTone, CloseCircleTwoTone } from \"@ant-design/icons\";\nimport { Address } from \"../components\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst {\n  Text,\n  Title\n} = Typography;\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nconst axios = require(\"axios\");\n\nconst TOKENS = [\"ETH\", \"GTC\", \"DAI\"];\nconst REWARD_STATUS = {\n  PENDING: \"reward_status.pending\",\n  COMPLETED: \"reward_status.completed\",\n  FAILED: \"reward_status.failed\"\n};\nconst VOTING_TYPES = [\"Quadratic\", \"Common\"];\nexport default function QuadraticDiplomacyReward(_ref) {\n  _s();\n\n  let {\n    tx,\n    writeContracts,\n    userSigner,\n    isAdmin,\n    mainnetProvider,\n    currentDistribution,\n    serverUrl,\n    address\n  } = _ref;\n  const [totalRewardAmount, setTotalRewardAmount] = useState(0);\n  const [rewardStatus, setRewardStatus] = useState(REWARD_STATUS.PENDING);\n  const [selectedToken, setSelectedToken] = useState(\"\");\n  const [isSendingTx, setIsSendingTx] = useState(false);\n  const [votingType, setVotingType] = useState(\"Quadratic\");\n  const [voteResults, totalVotes, totalSqrtVotes, totalSquare] = useMemo(() => {\n    const votes = {};\n    let voteCount = 0;\n    let sqrts = 0;\n    let total = 0;\n\n    if (!currentDistribution.id) {\n      return [0, 0, 0, 0];\n    }\n\n    Object.entries(currentDistribution.votes).forEach(memberVotes => {\n      const votingAddress = memberVotes[0];\n      const selectedContributors = memberVotes[1];\n      Object.entries(selectedContributors).forEach(voteInfo => {\n        const contributor = voteInfo[0];\n        const vote = voteInfo[1];\n        let sqrtVote = Math.sqrt(vote);\n\n        if (votingType === \"Common\") {\n          sqrtVote = vote;\n        }\n\n        if (!votes[contributor]) {\n          votes[contributor] = {\n            vote: 0,\n            // Sum of the square root of the votes for each member.\n            sqrtVote: 0\n          };\n        }\n\n        votes[contributor].sqrtVote += sqrtVote;\n        votes[contributor].vote += vote;\n        voteCount += vote; // Total sum of the sum of the square roots of the votes for all members.\n\n        sqrts += sqrtVote;\n      });\n    });\n    Object.entries(votes).forEach(_ref2 => {\n      let [wallet, {\n        sqrtVote\n      }] = _ref2;\n\n      if (votingType === \"Common\") {\n        total += sqrtVote;\n      } else {\n        total += Math.pow(sqrtVote, 2);\n      }\n    });\n    return [votes, voteCount, sqrts, total];\n  }, [currentDistribution.id, currentDistribution.id && Object.keys(currentDistribution.votes).sort().join(), votingType]);\n  const votersInfo = useMemo(() => {\n    const voters = [];\n\n    if (!currentDistribution.id) {\n      return voters;\n    }\n\n    currentDistribution.members.forEach(member => {\n      const hasVoted = Object.keys(currentDistribution.votes).includes(member);\n      let totalVotes = 0;\n      let verifiedSignature = false;\n\n      if (hasVoted) {\n        const selectedContributors = currentDistribution.votes[member];\n        const sortedVotes = Object.keys(selectedContributors).sort();\n        const message = \"qdip-vote-\" + currentDistribution.id + member + sortedVotes.join() + sortedVotes.map(voter => selectedContributors[voter]).join();\n        const recovered = ethers.utils.verifyMessage(message, currentDistribution.votesSignatures[member]);\n        verifiedSignature = recovered === member;\n        Object.entries(selectedContributors).forEach(voteInfo => {\n          totalVotes += voteInfo[1];\n        });\n      }\n\n      voters.push({\n        address: member,\n        vote: totalVotes,\n        hasVoted: hasVoted,\n        verifiedSignature: verifiedSignature\n      });\n    });\n    return voters;\n  }, [currentDistribution.id, currentDistribution.id && Object.keys(currentDistribution.votes).sort().join()]);\n  const columns = useMemo(() => [{\n    title: \"Address\",\n    dataIndex: \"address\",\n    render: address => /*#__PURE__*/_jsxDEV(Address, {\n      address: address,\n      fontSize: 16,\n      size: \"short\",\n      ensProvider: mainnetProvider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 131,\n      columnNumber: 28\n    }, this)\n  }, {\n    title: \"Nº of votes\",\n    dataIndex: \"vote\",\n    defaultSortOrder: \"descend\",\n    align: \"center\",\n    sorter: (a, b) => a.vote - b.vote\n  }, {\n    title: votingType + \" votes\",\n    dataIndex: \"votesSqrt\",\n    align: \"center\",\n    sorter: (a, b) => a.votesSqrt - b.votesSqrt,\n    render: (votesSqrt, record) => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [votesSqrt.toFixed(2), \" \", /*#__PURE__*/_jsxDEV(Text, {\n        type: \"secondary\",\n        children: [\"(\", (record.votesShare * 100).toFixed(2), \"%)\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 147,\n        columnNumber: 36\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 146,\n      columnNumber: 11\n    }, this)\n  }, {\n    title: \"Reward Amount\",\n    dataIndex: \"rewardAmount\",\n    defaultSortOrder: \"descend\",\n    align: \"center\",\n    sorter: (a, b) => a.rewardAmount - b.rewardAmount,\n    render: rewardAmount => /*#__PURE__*/_jsxDEV(\"p\", {\n      children: [rewardAmount.toFixed(2), \" \", selectedToken.toUpperCase()]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 158,\n      columnNumber: 11\n    }, this)\n  }], [mainnetProvider, selectedToken]);\n  const columnsVoters = useMemo(() => [{\n    title: \"Address\",\n    dataIndex: \"address\",\n    render: address => /*#__PURE__*/_jsxDEV(Address, {\n      address: address,\n      fontSize: 16,\n      size: \"short\",\n      ensProvider: mainnetProvider\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 172,\n      columnNumber: 28\n    }, this)\n  }, {\n    title: \"Nº of votes\",\n    dataIndex: \"vote\",\n    defaultSortOrder: \"descend\",\n    align: \"center\",\n    sorter: (a, b) => a.vote - b.vote\n  }, {\n    title: \"Has Voted\",\n    dataIndex: \"hasVoted\",\n    align: \"center\",\n    filters: [{\n      text: \"Yes\",\n      value: true\n    }, {\n      text: \"No\",\n      value: false\n    }],\n    onFilter: (value, record) => record.hasVoted === value,\n    render: hasVoted => hasVoted ? /*#__PURE__*/_jsxDEV(CheckCircleTwoTone, {\n      twoToneColor: \"#52c41a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 22\n    }, this) : /*#__PURE__*/_jsxDEV(CloseCircleTwoTone, {\n      twoToneColor: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 70\n    }, this)\n  }, {\n    title: \"Verified\",\n    dataIndex: \"verifiedSignature\",\n    align: \"center\",\n    filters: [{\n      text: \"Yes\",\n      value: true\n    }, {\n      text: \"No\",\n      value: false\n    }],\n    onFilter: (value, record) => record.verifiedSignature === value,\n    render: verifiedSignature => verifiedSignature ? /*#__PURE__*/_jsxDEV(CheckCircleTwoTone, {\n      twoToneColor: \"#52c41a\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 31\n    }, this) : /*#__PURE__*/_jsxDEV(CloseCircleTwoTone, {\n      twoToneColor: \"red\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 203,\n      columnNumber: 79\n    }, this)\n  }], [mainnetProvider]);\n  const dataSource = useMemo(() => Object.entries(voteResults).map(_ref3 => {\n    let [address, contributor] = _ref3;\n    return {\n      key: address,\n      address: address,\n      vote: contributor === null || contributor === void 0 ? void 0 : contributor.vote,\n      votesSqrt: contributor === null || contributor === void 0 ? void 0 : contributor.sqrtVote,\n      votesShare: votingType === \"Quadratic\" ? (contributor === null || contributor === void 0 ? void 0 : contributor.sqrtVote) / totalSqrtVotes : (contributor === null || contributor === void 0 ? void 0 : contributor.sqrtVote) / totalSquare,\n      rewardAmount: votingType === \"Quadratic\" ? (contributor === null || contributor === void 0 ? void 0 : contributor.sqrtVote) / totalSqrtVotes * totalRewardAmount : (contributor === null || contributor === void 0 ? void 0 : contributor.sqrtVote) / totalSquare * totalRewardAmount,\n      hasVoted: contributor === null || contributor === void 0 ? void 0 : contributor.hasVoted,\n      verifiedSignature: contributor === null || contributor === void 0 ? void 0 : contributor.verifiedSignature\n    };\n  }), [voteResults, totalSquare, totalRewardAmount]);\n  const missingVotingMembers = votersInfo.filter(voter => !voter.hasVoted);\n\n  const handleFinishDistribution = async finishDistribution => {\n    const message = \"qdip-finish-\" + currentDistribution.id + address;\n    const signature = await userSigner.signMessage(message);\n    setIsSendingTx(true);\n    axios.post(serverUrl + \"distributions/\" + currentDistribution.id + \"/finish\", {\n      address: address,\n      signature: signature\n    }).then(response => {\n      setIsSendingTx(false);\n      setRewardStatus(REWARD_STATUS.COMPLETED);\n    }).catch(e => {\n      console.log(\"Error finishing the distribution\");\n      setIsSendingTx(false);\n    });\n  };\n\n  const handlePayment = async function payFromSelf(close) {\n    // ToDo. Do some validation (non-empty elements, etc.)\n    const wallets = [];\n    const amounts = [];\n    setIsSendingTx(true); // choose appropriate function from contract\n\n    let func;\n\n    if (selectedToken === \"ETH\") {\n      dataSource.forEach(_ref4 => {\n        let {\n          address,\n          rewardAmount\n        } = _ref4;\n        wallets.push(address); // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\n\n        amounts.push(ethers.utils.parseEther((Math.floor(rewardAmount * 10000) / 10000).toString()));\n      });\n      func = payFromSelf ? // payable functions need an `overrides` param.\n      // relevant docs: https://docs.ethers.io/v5/api/contract/contract/#Contract-functionsCall\n      writeContracts.QuadraticDiplomacyContract.sharePayedETH(wallets, amounts, {\n        value: ethers.utils.parseEther(totalRewardAmount.toString())\n      }) : writeContracts.QuadraticDiplomacyContract.shareETH(wallets, amounts);\n    } else {\n      const tokenAddress = writeContracts[selectedToken].address;\n      const userAddress = await userSigner.getAddress();\n      const tokenContract = writeContracts[selectedToken].connect(userSigner); // approve only if have to pay from self wallet\n\n      if (payFromSelf) {\n        await tx(tokenContract.approve(writeContracts.QuadraticDiplomacyContract.address, ethers.utils.parseUnits(totalRewardAmount.toString(), 18)));\n      }\n\n      dataSource.forEach(_ref5 => {\n        let {\n          address,\n          rewardAmount\n        } = _ref5;\n        wallets.push(address); // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\n\n        amounts.push(ethers.utils.parseUnits((Math.floor(rewardAmount * 10000) / 10000).toString()));\n      });\n      func = payFromSelf ? writeContracts.QuadraticDiplomacyContract.sharePayedToken(wallets, amounts, tokenAddress, userAddress) : writeContracts.QuadraticDiplomacyContract.shareToken(wallets, amounts, tokenAddress);\n    }\n\n    await tx(func, update => {\n      // ToDo. Handle errors.\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\n        notification.success({\n          message: \"Payment sent!\"\n        });\n\n        if (close) {\n          handleFinishDistribution();\n        } else {\n          setIsSendingTx(false);\n        }\n      } else if (update.error) {\n        setIsSendingTx(false);\n      }\n    });\n  };\n\n  if (!isAdmin) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid #cccccc\",\n        padding: 16,\n        width: 800,\n        margin: \"auto\",\n        marginTop: 64\n      },\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        level: 4,\n        children: \"Access denied\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 320,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Only admins can send rewards.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 321,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 319,\n      columnNumber: 7\n    }, this);\n  }\n\n  if (!currentDistribution.id) {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        border: \"1px solid #cccccc\",\n        padding: 16,\n        width: 800,\n        margin: \"auto\",\n        marginTop: 64\n      },\n      children: /*#__PURE__*/_jsxDEV(Title, {\n        level: 4,\n        children: \"No Current Distribution\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 329,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 328,\n      columnNumber: 7\n    }, this);\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      border: \"1px solid #cccccc\",\n      padding: 16,\n      width: 1000,\n      margin: \"auto\",\n      marginTop: 64\n    },\n    children: [/*#__PURE__*/_jsxDEV(Title, {\n      level: 3,\n      children: [\"Reward Contributors \", currentDistribution.id]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 336,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      level: 5,\n      children: [\"Total votes:\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(Tag, {\n        color: \"#000000\",\n        children: totalVotes\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 339,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 337,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Title, {\n      level: 5,\n      children: [\"Total \", votingType, \" votes:\\xA0\\xA0\", /*#__PURE__*/_jsxDEV(Tag, {\n        color: \"#52c41a\",\n        children: totalSqrtVotes.toFixed(2)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 343,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Select, {\n        defaultValue: votingType,\n        onChange: setVotingType,\n        children: VOTING_TYPES.map(vType => /*#__PURE__*/_jsxDEV(Select.Option, {\n          value: vType,\n          children: vType\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 346,\n          columnNumber: 13\n        }, this))\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 344,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 341,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 350,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Space, {\n      split: true,\n      children: /*#__PURE__*/_jsxDEV(Input, {\n        type: \"number\",\n        disabled: !selectedToken // disable if no token selected\n        ,\n        value: totalRewardAmount,\n        addonBefore: \"Total Amount to Distribute\",\n        addonAfter: /*#__PURE__*/_jsxDEV(Select, {\n          defaultValue: \"Select token...\",\n          onChange: setSelectedToken,\n          children: TOKENS.map(tokenName => /*#__PURE__*/_jsxDEV(Select.Option, {\n            value: tokenName,\n            children: tokenName\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 360,\n            columnNumber: 17\n          }, this))\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 358,\n          columnNumber: 13\n        }, this),\n        onChange: e => setTotalRewardAmount(e.target.value.toLowerCase())\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 352,\n        columnNumber: 9\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 351,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 367,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Space, {\n      direction: \"vertical\",\n      style: {\n        width: \"100%\"\n      },\n      children: [/*#__PURE__*/_jsxDEV(Title, {\n        level: 4,\n        children: \"Voters\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 369,\n        columnNumber: 9\n      }, this), (missingVotingMembers === null || missingVotingMembers === void 0 ? void 0 : missingVotingMembers.length) > 0 && /*#__PURE__*/_jsxDEV(Alert, {\n        showIcon: true,\n        type: \"warning\",\n        message: /*#__PURE__*/_jsxDEV(Title, {\n          level: 5,\n          children: [missingVotingMembers.length, \" members has not voted yet.\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 374,\n          columnNumber: 22\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 371,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        dataSource: votersInfo,\n        columns: columnsVoters,\n        pagination: {\n          pageSize: 100,\n          hideOnSinglePage: true\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 377,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 383,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Title, {\n        level: 4,\n        children: \"Candidates\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 384,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(Table, {\n        bordered: true,\n        dataSource: dataSource,\n        columns: columns,\n        pagination: {\n          pageSize: 100,\n          hideOnSinglePage: true\n        },\n        footer: () => !isSendingTx ? /*#__PURE__*/_jsxDEV(Space, {\n          children: [/*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handlePayment(false),\n            disabled: rewardStatus === REWARD_STATUS.COMPLETED || !totalRewardAmount || !(dataSource === null || dataSource === void 0 ? void 0 : dataSource.length),\n            size: \"large\",\n            children: \"Pay \\uD83D\\uDCB8\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 393,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => handlePayment(true),\n            disabled: rewardStatus === REWARD_STATUS.COMPLETED || !totalRewardAmount || !(dataSource === null || dataSource === void 0 ? void 0 : dataSource.length),\n            size: \"large\",\n            children: \"Pay and Close \\uD83D\\uDCB8\\uD83D\\uDD12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 400,\n            columnNumber: 17\n          }, this), /*#__PURE__*/_jsxDEV(Button, {\n            onClick: () => {\n              if (confirm(\"Are you sure you want to close the distribution? You can't send payments after a distribution is closed.\")) {\n                handleFinishDistribution();\n              }\n            },\n            size: \"large\",\n            children: \"Just Close \\uD83D\\uDD12\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 407,\n            columnNumber: 17\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 392,\n          columnNumber: 15\n        }, this) : /*#__PURE__*/_jsxDEV(Spin, {\n          size: \"small\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 415,\n          columnNumber: 15\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 385,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 368,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Divider, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 420,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 335,\n    columnNumber: 5\n  }, this);\n}\n\n_s(QuadraticDiplomacyReward, \"yOtrhekca9O+Uj8GVZLSUfBvDzk=\");\n\n_c = QuadraticDiplomacyReward;\n\nvar _c;\n\n$RefreshReg$(_c, \"QuadraticDiplomacyReward\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/views/QuadraticDiplomacyReward.jsx"],"names":["React","useState","useMemo","Alert","Input","Button","Divider","Space","Typography","Table","Tag","Select","notification","Spin","CheckCircleTwoTone","CloseCircleTwoTone","Address","Text","Title","ethers","require","axios","TOKENS","REWARD_STATUS","PENDING","COMPLETED","FAILED","VOTING_TYPES","QuadraticDiplomacyReward","tx","writeContracts","userSigner","isAdmin","mainnetProvider","currentDistribution","serverUrl","address","totalRewardAmount","setTotalRewardAmount","rewardStatus","setRewardStatus","selectedToken","setSelectedToken","isSendingTx","setIsSendingTx","votingType","setVotingType","voteResults","totalVotes","totalSqrtVotes","totalSquare","votes","voteCount","sqrts","total","id","Object","entries","forEach","memberVotes","votingAddress","selectedContributors","voteInfo","contributor","vote","sqrtVote","Math","sqrt","wallet","pow","keys","sort","join","votersInfo","voters","members","member","hasVoted","includes","verifiedSignature","sortedVotes","message","map","voter","recovered","utils","verifyMessage","votesSignatures","push","columns","title","dataIndex","render","defaultSortOrder","align","sorter","a","b","votesSqrt","record","toFixed","votesShare","rewardAmount","toUpperCase","columnsVoters","filters","text","value","onFilter","dataSource","key","missingVotingMembers","filter","handleFinishDistribution","finishDistribution","signature","signMessage","post","then","response","catch","e","console","log","handlePayment","payFromSelf","close","wallets","amounts","func","parseEther","floor","toString","QuadraticDiplomacyContract","sharePayedETH","shareETH","tokenAddress","userAddress","getAddress","tokenContract","connect","approve","parseUnits","sharePayedToken","shareToken","update","status","success","error","border","padding","width","margin","marginTop","vType","tokenName","target","toLowerCase","length","pageSize","hideOnSinglePage","confirm"],"mappings":"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","sourcesContent":["import React, { useState, useMemo } from \"react\";\r\nimport { Alert, Input, Button, Divider, Space, Typography, Table, Tag, Select, notification, Spin } from \"antd\";\r\nimport { CheckCircleTwoTone, CloseCircleTwoTone } from \"@ant-design/icons\";\r\nimport { Address } from \"../components\";\r\nconst { Text, Title } = Typography;\r\nconst { ethers } = require(\"ethers\");\r\nconst axios = require(\"axios\");\r\n\r\nconst TOKENS = [\"ETH\", \"GTC\", \"DAI\"];\r\nconst REWARD_STATUS = {\r\n  PENDING: \"reward_status.pending\",\r\n  COMPLETED: \"reward_status.completed\",\r\n  FAILED: \"reward_status.failed\",\r\n};\r\nconst VOTING_TYPES = [\"Quadratic\", \"Common\"];\r\n\r\nexport default function QuadraticDiplomacyReward({\r\n  tx,\r\n  writeContracts,\r\n  userSigner,\r\n  isAdmin,\r\n  mainnetProvider,\r\n  currentDistribution,\r\n  serverUrl,\r\n  address,\r\n}) {\r\n  const [totalRewardAmount, setTotalRewardAmount] = useState(0);\r\n  const [rewardStatus, setRewardStatus] = useState(REWARD_STATUS.PENDING);\r\n  const [selectedToken, setSelectedToken] = useState(\"\");\r\n  const [isSendingTx, setIsSendingTx] = useState(false);\r\n  const [votingType, setVotingType] = useState(\"Quadratic\");\r\n\r\n  const [voteResults, totalVotes, totalSqrtVotes, totalSquare] = useMemo(() => {\r\n    const votes = {};\r\n    let voteCount = 0;\r\n    let sqrts = 0;\r\n    let total = 0;\r\n\r\n    if (!currentDistribution.id) {\r\n      return [0, 0, 0, 0];\r\n    }\r\n\r\n    Object.entries(currentDistribution.votes).forEach(memberVotes => {\r\n      const votingAddress = memberVotes[0];\r\n      const selectedContributors = memberVotes[1];\r\n\r\n      Object.entries(selectedContributors).forEach(voteInfo => {\r\n        const contributor = voteInfo[0];\r\n        const vote = voteInfo[1];\r\n        let sqrtVote = Math.sqrt(vote);\r\n        if (votingType === \"Common\") {\r\n          sqrtVote = vote;\r\n        }\r\n\r\n        if (!votes[contributor]) {\r\n          votes[contributor] = {\r\n            vote: 0,\r\n            // Sum of the square root of the votes for each member.\r\n            sqrtVote: 0,\r\n          };\r\n        }\r\n\r\n        votes[contributor].sqrtVote += sqrtVote;\r\n        votes[contributor].vote += vote;\r\n\r\n        voteCount += vote;\r\n        // Total sum of the sum of the square roots of the votes for all members.\r\n        sqrts += sqrtVote;\r\n      });\r\n    });\r\n\r\n    Object.entries(votes).forEach(([wallet, { sqrtVote }]) => {\r\n      if (votingType === \"Common\") {\r\n        total += sqrtVote;\r\n      } else {\r\n        total += Math.pow(sqrtVote, 2);\r\n      }\r\n    });\r\n\r\n    return [votes, voteCount, sqrts, total];\r\n  }, [currentDistribution.id, currentDistribution.id && Object.keys(currentDistribution.votes).sort().join(), votingType]);\r\n\r\n  const votersInfo = useMemo(() => {\r\n    const voters = [];\r\n\r\n    if (!currentDistribution.id) {\r\n      return voters;\r\n    }\r\n\r\n    currentDistribution.members.forEach(member => {\r\n      const hasVoted = Object.keys(currentDistribution.votes).includes(member);\r\n      let totalVotes = 0;\r\n      let verifiedSignature = false;\r\n\r\n      if (hasVoted) {\r\n        const selectedContributors = currentDistribution.votes[member];\r\n\r\n        const sortedVotes = Object.keys(selectedContributors).sort();\r\n\r\n        const message =\r\n          \"qdip-vote-\" +\r\n          currentDistribution.id +\r\n          member +\r\n          sortedVotes.join() +\r\n          sortedVotes.map(voter => selectedContributors[voter]).join();\r\n\r\n        const recovered = ethers.utils.verifyMessage(message, currentDistribution.votesSignatures[member]);\r\n        verifiedSignature = recovered === member;\r\n\r\n        Object.entries(selectedContributors).forEach(voteInfo => {\r\n          totalVotes += voteInfo[1];\r\n        });\r\n      }\r\n\r\n      voters.push({\r\n        address: member,\r\n        vote: totalVotes,\r\n        hasVoted: hasVoted,\r\n        verifiedSignature: verifiedSignature,\r\n      });\r\n    });\r\n\r\n    return voters;\r\n  }, [currentDistribution.id, currentDistribution.id && Object.keys(currentDistribution.votes).sort().join()]);\r\n\r\n  const columns = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Address\",\r\n        dataIndex: \"address\",\r\n        render: address => <Address address={address} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />,\r\n      },\r\n      {\r\n        title: \"Nº of votes\",\r\n        dataIndex: \"vote\",\r\n        defaultSortOrder: \"descend\",\r\n        align: \"center\",\r\n        sorter: (a, b) => a.vote - b.vote,\r\n      },\r\n      {\r\n        title: votingType + \" votes\",\r\n        dataIndex: \"votesSqrt\",\r\n        align: \"center\",\r\n        sorter: (a, b) => a.votesSqrt - b.votesSqrt,\r\n        render: (votesSqrt, record) => (\r\n          <p>\r\n            {votesSqrt.toFixed(2)} <Text type=\"secondary\">({(record.votesShare * 100).toFixed(2)}%)</Text>\r\n          </p>\r\n        ),\r\n      },\r\n      {\r\n        title: \"Reward Amount\",\r\n        dataIndex: \"rewardAmount\",\r\n        defaultSortOrder: \"descend\",\r\n        align: \"center\",\r\n        sorter: (a, b) => a.rewardAmount - b.rewardAmount,\r\n        render: rewardAmount => (\r\n          <p>\r\n            {rewardAmount.toFixed(2)} {selectedToken.toUpperCase()}\r\n          </p>\r\n        ),\r\n      },\r\n    ],\r\n    [mainnetProvider, selectedToken],\r\n  );\r\n\r\n  const columnsVoters = useMemo(\r\n    () => [\r\n      {\r\n        title: \"Address\",\r\n        dataIndex: \"address\",\r\n        render: address => <Address address={address} fontSize={16} size=\"short\" ensProvider={mainnetProvider} />,\r\n      },\r\n      {\r\n        title: \"Nº of votes\",\r\n        dataIndex: \"vote\",\r\n        defaultSortOrder: \"descend\",\r\n        align: \"center\",\r\n        sorter: (a, b) => a.vote - b.vote,\r\n      },\r\n      {\r\n        title: \"Has Voted\",\r\n        dataIndex: \"hasVoted\",\r\n        align: \"center\",\r\n        filters: [\r\n          { text: \"Yes\", value: true },\r\n          { text: \"No\", value: false },\r\n        ],\r\n        onFilter: (value, record) => record.hasVoted === value,\r\n        render: hasVoted =>\r\n          hasVoted ? <CheckCircleTwoTone twoToneColor=\"#52c41a\" /> : <CloseCircleTwoTone twoToneColor=\"red\" />,\r\n      },\r\n      {\r\n        title: \"Verified\",\r\n        dataIndex: \"verifiedSignature\",\r\n        align: \"center\",\r\n        filters: [\r\n          { text: \"Yes\", value: true },\r\n          { text: \"No\", value: false },\r\n        ],\r\n        onFilter: (value, record) => record.verifiedSignature === value,\r\n        render: verifiedSignature =>\r\n          verifiedSignature ? <CheckCircleTwoTone twoToneColor=\"#52c41a\" /> : <CloseCircleTwoTone twoToneColor=\"red\" />,\r\n      },\r\n    ],\r\n    [mainnetProvider],\r\n  );\r\n\r\n  const dataSource = useMemo(\r\n    () =>\r\n      Object.entries(voteResults).map(([address, contributor]) => ({\r\n        key: address,\r\n        address: address,\r\n        vote: contributor?.vote,\r\n        votesSqrt: contributor?.sqrtVote,\r\n        votesShare:\r\n          votingType === \"Quadratic\"\r\n            ? contributor?.sqrtVote / totalSqrtVotes\r\n            : contributor?.sqrtVote / totalSquare,\r\n        rewardAmount:\r\n          votingType === \"Quadratic\"\r\n            ? (contributor?.sqrtVote / totalSqrtVotes) * totalRewardAmount\r\n            : (contributor?.sqrtVote / totalSquare) * totalRewardAmount,\r\n        hasVoted: contributor?.hasVoted,\r\n        verifiedSignature: contributor?.verifiedSignature,\r\n      })),\r\n    [voteResults, totalSquare, totalRewardAmount],\r\n  );\r\n\r\n  const missingVotingMembers = votersInfo.filter(voter => !voter.hasVoted);\r\n\r\n  const handleFinishDistribution = async finishDistribution => {\r\n    const message = \"qdip-finish-\" + currentDistribution.id + address;\r\n    const signature = await userSigner.signMessage(message);\r\n\r\n    setIsSendingTx(true);\r\n\r\n    axios\r\n      .post(serverUrl + \"distributions/\" + currentDistribution.id + \"/finish\", {\r\n        address: address,\r\n        signature: signature,\r\n      })\r\n      .then(response => {\r\n        setIsSendingTx(false);\r\n        setRewardStatus(REWARD_STATUS.COMPLETED);\r\n      })\r\n      .catch(e => {\r\n        console.log(\"Error finishing the distribution\");\r\n        setIsSendingTx(false);\r\n      });\r\n  };\r\n\r\n  const handlePayment = async function payFromSelf(close) {\r\n    // ToDo. Do some validation (non-empty elements, etc.)\r\n    const wallets = [];\r\n    const amounts = [];\r\n\r\n    setIsSendingTx(true);\r\n    // choose appropriate function from contract\r\n    let func;\r\n    if (selectedToken === \"ETH\") {\r\n      dataSource.forEach(({ address, rewardAmount }) => {\r\n        wallets.push(address);\r\n        // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\r\n        amounts.push(ethers.utils.parseEther((Math.floor(rewardAmount * 10000) / 10000).toString()));\r\n      });\r\n\r\n      func = payFromSelf\r\n        ? // payable functions need an `overrides` param.\r\n          // relevant docs: https://docs.ethers.io/v5/api/contract/contract/#Contract-functionsCall\r\n          writeContracts.QuadraticDiplomacyContract.sharePayedETH(wallets, amounts, {\r\n            value: ethers.utils.parseEther(totalRewardAmount.toString()),\r\n          })\r\n        : writeContracts.QuadraticDiplomacyContract.shareETH(wallets, amounts);\r\n    } else {\r\n      const tokenAddress = writeContracts[selectedToken].address;\r\n      const userAddress = await userSigner.getAddress();\r\n      const tokenContract = writeContracts[selectedToken].connect(userSigner);\r\n      // approve only if have to pay from self wallet\r\n      if (payFromSelf) {\r\n        await tx(\r\n          tokenContract.approve(\r\n            writeContracts.QuadraticDiplomacyContract.address,\r\n            ethers.utils.parseUnits(totalRewardAmount.toString(), 18),\r\n          ),\r\n        );\r\n      }\r\n\r\n      dataSource.forEach(({ address, rewardAmount }) => {\r\n        wallets.push(address);\r\n        // Flooring some decimals to avoid rounding errors => can result in not having enough funds.\r\n        amounts.push(ethers.utils.parseUnits((Math.floor(rewardAmount * 10000) / 10000).toString()));\r\n      });\r\n      func = payFromSelf\r\n        ? writeContracts.QuadraticDiplomacyContract.sharePayedToken(wallets, amounts, tokenAddress, userAddress)\r\n        : writeContracts.QuadraticDiplomacyContract.shareToken(wallets, amounts, tokenAddress);\r\n    }\r\n\r\n    await tx(func, update => {\r\n      // ToDo. Handle errors.\r\n      if (update && (update.status === \"confirmed\" || update.status === 1)) {\r\n        notification.success({\r\n          message: \"Payment sent!\",\r\n        });\r\n\r\n        if (close) {\r\n          handleFinishDistribution();\r\n        } else {\r\n          setIsSendingTx(false);\r\n        }\r\n      } else if (update.error) {\r\n        setIsSendingTx(false);\r\n      }\r\n    });\r\n  };\r\n\r\n  if (!isAdmin) {\r\n    return (\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\r\n        <Title level={4}>Access denied</Title>\r\n        <p>Only admins can send rewards.</p>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  if (!currentDistribution.id) {\r\n    return (\r\n      <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 800, margin: \"auto\", marginTop: 64 }}>\r\n        <Title level={4}>No Current Distribution</Title>\r\n      </div>\r\n    );\r\n  }\r\n\r\n  return (\r\n    <div style={{ border: \"1px solid #cccccc\", padding: 16, width: 1000, margin: \"auto\", marginTop: 64 }}>\r\n      <Title level={3}>Reward Contributors {currentDistribution.id}</Title>\r\n      <Title level={5}>\r\n        Total votes:&nbsp;&nbsp;\r\n        <Tag color=\"#000000\">{totalVotes}</Tag>\r\n      </Title>\r\n      <Title level={5}>\r\n        Total {votingType} votes:&nbsp;&nbsp;\r\n        <Tag color=\"#52c41a\">{totalSqrtVotes.toFixed(2)}</Tag>\r\n        <Select defaultValue={votingType} onChange={setVotingType}>\r\n          {VOTING_TYPES.map(vType => (\r\n            <Select.Option value={vType}>{vType}</Select.Option>\r\n          ))}\r\n        </Select>\r\n      </Title>\r\n      <Divider />\r\n      <Space split>\r\n        <Input\r\n          type=\"number\"\r\n          disabled={!selectedToken} // disable if no token selected\r\n          value={totalRewardAmount}\r\n          addonBefore=\"Total Amount to Distribute\"\r\n          addonAfter={\r\n            <Select defaultValue=\"Select token...\" onChange={setSelectedToken}>\r\n              {TOKENS.map(tokenName => (\r\n                <Select.Option value={tokenName}>{tokenName}</Select.Option>\r\n              ))}\r\n            </Select>\r\n          }\r\n          onChange={e => setTotalRewardAmount(e.target.value.toLowerCase())}\r\n        />\r\n      </Space>\r\n      <Divider />\r\n      <Space direction=\"vertical\" style={{ width: \"100%\" }}>\r\n        <Title level={4}>Voters</Title>\r\n        {missingVotingMembers?.length > 0 && (\r\n          <Alert\r\n            showIcon\r\n            type=\"warning\"\r\n            message={<Title level={5}>{missingVotingMembers.length} members has not voted yet.</Title>}\r\n          />\r\n        )}\r\n        <Table\r\n          bordered\r\n          dataSource={votersInfo}\r\n          columns={columnsVoters}\r\n          pagination={{ pageSize: 100, hideOnSinglePage: true }}\r\n        />\r\n        <Divider />\r\n        <Title level={4}>Candidates</Title>\r\n        <Table\r\n          bordered\r\n          dataSource={dataSource}\r\n          columns={columns}\r\n          pagination={{ pageSize: 100, hideOnSinglePage: true }}\r\n          footer={() =>\r\n            !isSendingTx ? (\r\n              <Space>\r\n                <Button\r\n                  onClick={() => handlePayment(false)}\r\n                  disabled={rewardStatus === REWARD_STATUS.COMPLETED || !totalRewardAmount || !dataSource?.length}\r\n                  size=\"large\"\r\n                >\r\n                  Pay 💸\r\n                </Button>\r\n                <Button\r\n                  onClick={() => handlePayment(true)}\r\n                  disabled={rewardStatus === REWARD_STATUS.COMPLETED || !totalRewardAmount || !dataSource?.length}\r\n                  size=\"large\"\r\n                >\r\n                  Pay and Close 💸🔒\r\n                </Button>\r\n                <Button\r\n                  onClick={() => { if (confirm(\"Are you sure you want to close the distribution? You can't send payments after a distribution is closed.\")) { handleFinishDistribution() }}}\r\n                  size=\"large\"\r\n                >\r\n                  Just Close 🔒\r\n                </Button>\r\n              </Space>\r\n            ) : (\r\n              <Spin size=\"small\" />\r\n            )\r\n          }\r\n        />\r\n      </Space>\r\n      <Divider />\r\n    </div>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}