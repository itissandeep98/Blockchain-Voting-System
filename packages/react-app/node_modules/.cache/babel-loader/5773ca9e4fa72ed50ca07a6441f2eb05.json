{"ast":null,"code":"import _regeneratorRuntime from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/regenerator\";import _asyncToGenerator from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{utils}from\"ethers\";import{useEffect,useState}from\"react\";/*\r\n  ~ What it does? ~\r\n\r\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\r\n\r\n  ~ How can I use? ~\r\n\r\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide contractAddress to check if the contract is deployed\r\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\r\n*/var useContractExistsAtAddress=function useContractExistsAtAddress(provider,contractAddress){var _useState=useState(false),_useState2=_slicedToArray(_useState,2),contractIsDeployed=_useState2[0],setContractIsDeployed=_useState2[1];// We can look at the blockchain and see what's stored at `contractAddress`\n// If we find code then we know that a contract exists there.\n// If we find nothing (0x0) then there is no contract deployed to that address\nuseEffect(function(){// eslint-disable-next-line consistent-return\nvar checkDeployment=/*#__PURE__*/function(){var _ref=_asyncToGenerator(/*#__PURE__*/_regeneratorRuntime.mark(function _callee(){var bytecode;return _regeneratorRuntime.wrap(function _callee$(_context){while(1){switch(_context.prev=_context.next){case 0:if(utils.isAddress(contractAddress)){_context.next=2;break;}return _context.abrupt(\"return\",false);case 2:_context.next=4;return provider.getCode(contractAddress);case 4:bytecode=_context.sent;setContractIsDeployed(bytecode!==\"0x0\");case 6:case\"end\":return _context.stop();}}},_callee);}));return function checkDeployment(){return _ref.apply(this,arguments);};}();if(provider)checkDeployment();},[provider,contractAddress]);return contractIsDeployed;};export default useContractExistsAtAddress;","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/ContractExistsAtAddress.js"],"names":["utils","useEffect","useState","useContractExistsAtAddress","provider","contractAddress","contractIsDeployed","setContractIsDeployed","checkDeployment","isAddress","getCode","bytecode"],"mappings":"+hBAAA,OAASA,KAAT,KAAsB,QAAtB,CACA,OAASC,SAAT,CAAoBC,QAApB,KAAoC,OAApC,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,GAAMC,CAAAA,0BAA0B,CAAG,QAA7BA,CAAAA,0BAA6B,CAACC,QAAD,CAAWC,eAAX,CAA+B,CAChE,cAAoDH,QAAQ,CAAC,KAAD,CAA5D,wCAAOI,kBAAP,eAA2BC,qBAA3B,eAEA;AACA;AACA;AACAN,SAAS,CAAC,UAAM,CACd;AACA,GAAMO,CAAAA,eAAe,0FAAG,mJACjBR,KAAK,CAACS,SAAN,CAAgBJ,eAAhB,CADiB,yDACwB,KADxB,+BAECD,CAAAA,QAAQ,CAACM,OAAT,CAAiBL,eAAjB,CAFD,QAEhBM,QAFgB,eAGtBJ,qBAAqB,CAACI,QAAQ,GAAK,KAAd,CAArB,CAHsB,sDAAH,kBAAfH,CAAAA,eAAe,0CAArB,CAKA,GAAIJ,QAAJ,CAAcI,eAAe,GAC9B,CARQ,CAQN,CAACJ,QAAD,CAAWC,eAAX,CARM,CAAT,CAUA,MAAOC,CAAAA,kBAAP,CACD,CAjBD,CAmBA,cAAeH,CAAAA,0BAAf","sourcesContent":["import { utils } from \"ethers\";\r\nimport { useEffect, useState } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Checks whether a contract exists on the blockchain, returns true if it exists, otherwise false\r\n\r\n  ~ How can I use? ~\r\n\r\n  const contractIsDeployed = useContractExistsAtAddress(localProvider, contractAddress);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide contractAddress to check if the contract is deployed\r\n  - Change provider to check contract address on different chains (ex. mainnetProvider)\r\n*/\r\n\r\nconst useContractExistsAtAddress = (provider, contractAddress) => {\r\n  const [contractIsDeployed, setContractIsDeployed] = useState(false);\r\n\r\n  // We can look at the blockchain and see what's stored at `contractAddress`\r\n  // If we find code then we know that a contract exists there.\r\n  // If we find nothing (0x0) then there is no contract deployed to that address\r\n  useEffect(() => {\r\n    // eslint-disable-next-line consistent-return\r\n    const checkDeployment = async () => {\r\n      if (!utils.isAddress(contractAddress)) return false;\r\n      const bytecode = await provider.getCode(contractAddress);\r\n      setContractIsDeployed(bytecode !== \"0x0\");\r\n    };\r\n    if (provider) checkDeployment();\r\n  }, [provider, contractAddress]);\r\n\r\n  return contractIsDeployed;\r\n};\r\n\r\nexport default useContractExistsAtAddress;\r\n"]},"metadata":{},"sourceType":"module"}