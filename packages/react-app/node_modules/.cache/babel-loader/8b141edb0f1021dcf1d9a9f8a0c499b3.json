{"ast":null,"code":"import _objectSpread from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread2\";import _toConsumableArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useEffect,useState,useRef}from\"react\";/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to keep track of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider\r\n*/export default function useEventListener(contracts,contractName,eventName,provider,startBlock,args){var _useState=useState([]),_useState2=_slicedToArray(_useState,2),updates=_useState2[0],setUpdates=_useState2[1];var currentStartBlockRef=useRef();useEffect(function(){if(currentStartBlockRef.current!==startBlock){currentStartBlockRef.current=startBlock;setUpdates([]);}if(typeof provider!==\"undefined\"&&typeof startBlock!==\"undefined\"){// if you want to read _all_ events from your contracts, set this to the block number it is deployed\nprovider.resetEventsBlock(startBlock);}if(contracts&&contractName&&contracts[contractName]){try{contracts[contractName].on(eventName,function(){for(var _len=arguments.length,args=new Array(_len),_key=0;_key<_len;_key++){args[_key]=arguments[_key];}var blockNumber=args[args.length-1].blockNumber;setUpdates(function(messages){return[_objectSpread({blockNumber:blockNumber},args.pop().args)].concat(_toConsumableArray(messages));});});return function(){contracts[contractName].removeListener(eventName);};}catch(e){console.log(e);}}},[provider,startBlock,contracts,contractName,eventName]);return updates;}","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/EventListener.js"],"names":["useEffect","useState","useRef","useEventListener","contracts","contractName","eventName","provider","startBlock","args","updates","setUpdates","currentStartBlockRef","current","resetEventsBlock","on","blockNumber","length","messages","pop","removeListener","e","console","log"],"mappings":"yiBAAA,OAASA,SAAT,CAAoBC,QAApB,CAA8BC,MAA9B,KAA4C,OAA5C,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,cAAe,SAASC,CAAAA,gBAAT,CAA0BC,SAA1B,CAAqCC,YAArC,CAAmDC,SAAnD,CAA8DC,QAA9D,CAAwEC,UAAxE,CAAoFC,IAApF,CAA0F,CACvG,cAA8BR,QAAQ,CAAC,EAAD,CAAtC,wCAAOS,OAAP,eAAgBC,UAAhB,eACA,GAAMC,CAAAA,oBAAoB,CAAGV,MAAM,EAAnC,CAEAF,SAAS,CAAC,UAAM,CACd,GAAIY,oBAAoB,CAACC,OAArB,GAAiCL,UAArC,CAAiD,CAC/CI,oBAAoB,CAACC,OAArB,CAA+BL,UAA/B,CACAG,UAAU,CAAC,EAAD,CAAV,CACD,CACD,GAAI,MAAOJ,CAAAA,QAAP,GAAoB,WAApB,EAAmC,MAAOC,CAAAA,UAAP,GAAsB,WAA7D,CAA0E,CACxE;AACAD,QAAQ,CAACO,gBAAT,CAA0BN,UAA1B,EACD,CACD,GAAIJ,SAAS,EAAIC,YAAb,EAA6BD,SAAS,CAACC,YAAD,CAA1C,CAA0D,CACxD,GAAI,CACFD,SAAS,CAACC,YAAD,CAAT,CAAwBU,EAAxB,CAA2BT,SAA3B,CAAsC,UAAa,+BAATG,IAAS,0CAATA,IAAS,wBACjD,GAAMO,CAAAA,WAAW,CAAGP,IAAI,CAACA,IAAI,CAACQ,MAAL,CAAc,CAAf,CAAJ,CAAsBD,WAA1C,CACAL,UAAU,CAAC,SAAAO,QAAQ,wBAAOF,WAAW,CAAXA,WAAP,EAAuBP,IAAI,CAACU,GAAL,GAAWV,IAAlC,6BAA6CS,QAA7C,IAAT,CAAV,CACD,CAHD,EAIA,MAAO,WAAM,CACXd,SAAS,CAACC,YAAD,CAAT,CAAwBe,cAAxB,CAAuCd,SAAvC,EACD,CAFD,CAGD,CAAC,MAAOe,CAAP,CAAU,CACVC,OAAO,CAACC,GAAR,CAAYF,CAAZ,EACD,CACF,CACF,CAtBQ,CAsBN,CAACd,QAAD,CAAWC,UAAX,CAAuBJ,SAAvB,CAAkCC,YAAlC,CAAgDC,SAAhD,CAtBM,CAAT,CAwBA,MAAOI,CAAAA,OAAP,CACD","sourcesContent":["import { useEffect, useState, useRef } from \"react\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Enables you to keep track of events\r\n\r\n  ~ How can I use? ~\r\n\r\n  const setPurposeEvents = useEventListener(readContracts, \"YourContract\", \"SetPurpose\", localProvider, 1);\r\n\r\n  ~ Features ~\r\n\r\n  - Provide readContracts by loading contracts (see more on ContractLoader.js)\r\n  - Specify the name of the contract, in this case it is \"YourContract\"\r\n  - Specify the name of the event in the contract, in this case we keep track of \"SetPurpose\" event\r\n  - Specify the provider\r\n*/\r\n\r\nexport default function useEventListener(contracts, contractName, eventName, provider, startBlock, args) {\r\n  const [updates, setUpdates] = useState([]);\r\n  const currentStartBlockRef = useRef();\r\n\r\n  useEffect(() => {\r\n    if (currentStartBlockRef.current !== startBlock) {\r\n      currentStartBlockRef.current = startBlock;\r\n      setUpdates([]);\r\n    }\r\n    if (typeof provider !== \"undefined\" && typeof startBlock !== \"undefined\") {\r\n      // if you want to read _all_ events from your contracts, set this to the block number it is deployed\r\n      provider.resetEventsBlock(startBlock);\r\n    }\r\n    if (contracts && contractName && contracts[contractName]) {\r\n      try {\r\n        contracts[contractName].on(eventName, (...args) => {\r\n          const blockNumber = args[args.length - 1].blockNumber;\r\n          setUpdates(messages => [{ blockNumber, ...args.pop().args }, ...messages]);\r\n        });\r\n        return () => {\r\n          contracts[contractName].removeListener(eventName);\r\n        };\r\n      } catch (e) {\r\n        console.log(e);\r\n      }\r\n    }\r\n  }, [provider, startBlock, contracts, contractName, eventName]);\r\n\r\n  return updates;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}