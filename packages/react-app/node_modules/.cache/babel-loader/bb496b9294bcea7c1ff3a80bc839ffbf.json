{"ast":null,"code":"import _toConsumableArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/toConsumableArray\";import{useEffect,useRef}from\"react\";// helper hook to call a function regularly in time intervals\nvar DEBUG=false;export default function useOnBlock(provider,fn,args){var savedCallback=useRef();// Remember the latest fn.\nuseEffect(function(){savedCallback.current=fn;},[fn]);// Turn on the listener if we have a function & a provider\nuseEffect(function(){if(fn&&provider){var listener=function listener(blockNumber){if(DEBUG)console.log(blockNumber,fn,args,provider.listeners());if(args&&args.length>0){savedCallback.current.apply(savedCallback,_toConsumableArray(args));}else{savedCallback.current();}};provider.on(\"block\",listener);return function(){provider.off(\"block\",listener);};}},[provider]);}","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/OnBlock.js"],"names":["useEffect","useRef","DEBUG","useOnBlock","provider","fn","args","savedCallback","current","listener","blockNumber","console","log","listeners","length","on","off"],"mappings":"8LAAA,OAASA,SAAT,CAAoBC,MAApB,KAAkC,OAAlC,CAEA;AACA,GAAMC,CAAAA,KAAK,CAAG,KAAd,CAEA,cAAe,SAASC,CAAAA,UAAT,CAAoBC,QAApB,CAA8BC,EAA9B,CAAkCC,IAAlC,CAAwC,CACrD,GAAMC,CAAAA,aAAa,CAAGN,MAAM,EAA5B,CACA;AACAD,SAAS,CAAC,UAAM,CACdO,aAAa,CAACC,OAAd,CAAwBH,EAAxB,CACD,CAFQ,CAEN,CAACA,EAAD,CAFM,CAAT,CAIA;AACAL,SAAS,CAAC,UAAM,CACd,GAAIK,EAAE,EAAID,QAAV,CAAoB,CAClB,GAAMK,CAAAA,QAAQ,CAAG,QAAXA,CAAAA,QAAW,CAAAC,WAAW,CAAI,CAC9B,GAAIR,KAAJ,CAAWS,OAAO,CAACC,GAAR,CAAYF,WAAZ,CAAyBL,EAAzB,CAA6BC,IAA7B,CAAmCF,QAAQ,CAACS,SAAT,EAAnC,EAEX,GAAIP,IAAI,EAAIA,IAAI,CAACQ,MAAL,CAAc,CAA1B,CAA6B,CAC3BP,aAAa,CAACC,OAAd,OAAAD,aAAa,oBAAYD,IAAZ,EAAb,CACD,CAFD,IAEO,CACLC,aAAa,CAACC,OAAd,GACD,CACF,CARD,CAUAJ,QAAQ,CAACW,EAAT,CAAY,OAAZ,CAAqBN,QAArB,EAEA,MAAO,WAAM,CACXL,QAAQ,CAACY,GAAT,CAAa,OAAb,CAAsBP,QAAtB,EACD,CAFD,CAGD,CACF,CAlBQ,CAkBN,CAACL,QAAD,CAlBM,CAAT,CAmBD","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\nconst DEBUG = false;\r\n\r\nexport default function useOnBlock(provider, fn, args) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n\r\n  // Turn on the listener if we have a function & a provider\r\n  useEffect(() => {\r\n    if (fn && provider) {\r\n      const listener = blockNumber => {\r\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\r\n\r\n        if (args && args.length > 0) {\r\n          savedCallback.current(...args);\r\n        } else {\r\n          savedCallback.current();\r\n        }\r\n      };\r\n\r\n      provider.on(\"block\", listener);\r\n\r\n      return () => {\r\n        provider.off(\"block\", listener);\r\n      };\r\n    }\r\n  }, [provider]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}