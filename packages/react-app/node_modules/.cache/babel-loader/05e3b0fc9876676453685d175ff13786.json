{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useEffect, useRef } from \"react\"; // helper hook to call a function regularly in time intervals\n\nconst DEBUG = false;\nexport default function useOnBlock(provider, fn, args) {\n  _s();\n\n  const savedCallback = useRef(); // Remember the latest fn.\n\n  useEffect(() => {\n    savedCallback.current = fn;\n  }, [fn]); // Turn on the listener if we have a function & a provider\n\n  useEffect(() => {\n    if (fn && provider) {\n      const listener = blockNumber => {\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\n\n        if (args && args.length > 0) {\n          savedCallback.current(...args);\n        } else {\n          savedCallback.current();\n        }\n      };\n\n      provider.on(\"block\", listener);\n      return () => {\n        provider.off(\"block\", listener);\n      };\n    }\n  }, [provider]);\n}\n\n_s(useOnBlock, \"dqNZMqbncP+HtqBlD20aSNv0Ugk=\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/OnBlock.js"],"names":["useEffect","useRef","DEBUG","useOnBlock","provider","fn","args","savedCallback","current","listener","blockNumber","console","log","listeners","length","on","off"],"mappings":";;AAAA,SAASA,SAAT,EAAoBC,MAApB,QAAkC,OAAlC,C,CAEA;;AACA,MAAMC,KAAK,GAAG,KAAd;AAEA,eAAe,SAASC,UAAT,CAAoBC,QAApB,EAA8BC,EAA9B,EAAkCC,IAAlC,EAAwC;AAAA;;AACrD,QAAMC,aAAa,GAAGN,MAAM,EAA5B,CADqD,CAErD;;AACAD,EAAAA,SAAS,CAAC,MAAM;AACdO,IAAAA,aAAa,CAACC,OAAd,GAAwBH,EAAxB;AACD,GAFQ,EAEN,CAACA,EAAD,CAFM,CAAT,CAHqD,CAOrD;;AACAL,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIK,EAAE,IAAID,QAAV,EAAoB;AAClB,YAAMK,QAAQ,GAAGC,WAAW,IAAI;AAC9B,YAAIR,KAAJ,EAAWS,OAAO,CAACC,GAAR,CAAYF,WAAZ,EAAyBL,EAAzB,EAA6BC,IAA7B,EAAmCF,QAAQ,CAACS,SAAT,EAAnC;;AAEX,YAAIP,IAAI,IAAIA,IAAI,CAACQ,MAAL,GAAc,CAA1B,EAA6B;AAC3BP,UAAAA,aAAa,CAACC,OAAd,CAAsB,GAAGF,IAAzB;AACD,SAFD,MAEO;AACLC,UAAAA,aAAa,CAACC,OAAd;AACD;AACF,OARD;;AAUAJ,MAAAA,QAAQ,CAACW,EAAT,CAAY,OAAZ,EAAqBN,QAArB;AAEA,aAAO,MAAM;AACXL,QAAAA,QAAQ,CAACY,GAAT,CAAa,OAAb,EAAsBP,QAAtB;AACD,OAFD;AAGD;AACF,GAlBQ,EAkBN,CAACL,QAAD,CAlBM,CAAT;AAmBD;;GA3BuBD,U","sourcesContent":["import { useEffect, useRef } from \"react\";\r\n\r\n// helper hook to call a function regularly in time intervals\r\nconst DEBUG = false;\r\n\r\nexport default function useOnBlock(provider, fn, args) {\r\n  const savedCallback = useRef();\r\n  // Remember the latest fn.\r\n  useEffect(() => {\r\n    savedCallback.current = fn;\r\n  }, [fn]);\r\n\r\n  // Turn on the listener if we have a function & a provider\r\n  useEffect(() => {\r\n    if (fn && provider) {\r\n      const listener = blockNumber => {\r\n        if (DEBUG) console.log(blockNumber, fn, args, provider.listeners());\r\n\r\n        if (args && args.length > 0) {\r\n          savedCallback.current(...args);\r\n        } else {\r\n          savedCallback.current();\r\n        }\r\n      };\r\n\r\n      provider.on(\"block\", listener);\r\n\r\n      return () => {\r\n        provider.off(\"block\", listener);\r\n      };\r\n    }\r\n  }, [provider]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}