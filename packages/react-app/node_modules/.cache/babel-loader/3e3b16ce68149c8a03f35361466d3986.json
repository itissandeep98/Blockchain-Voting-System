{"ast":null,"code":"import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import{useMemo,useState}from\"react\";import useBurnerSigner from\"./BurnerSigner\";/*\r\n  ~ What it does? ~\r\n\r\n  Gets user provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const userProvider = useUserProvider(injectedProvider, localProvider);\r\n\r\n  ~ Features ~\r\n\r\n  - Specify the injected provider from Metamask\r\n  - Specify the local provider\r\n  - Usage examples:\r\n    const tx = Transactor(userSigner, gasPrice)\r\n*/var useUserSigner=function useUserSigner(injectedProvider,localProvider){var _useState=useState(),_useState2=_slicedToArray(_useState,2),signer=_useState2[0],setSigner=_useState2[1];var burnerSigner=useBurnerSigner(localProvider);useMemo(function(){if(injectedProvider){console.log(\"ðŸ¦Š Using injected provider\");var injectedSigner=injectedProvider._isProvider?injectedProvider.getSigner():injectedProvider;setSigner(injectedSigner);}else if(!localProvider)setSigner();else{if(window.location.pathname&&window.location.pathname.indexOf(\"/pk\")>=0){var incomingPK=window.location.hash.replace(\"#\",\"\");var rawPK;if(incomingPK.length===64||incomingPK.length===66){console.log(\"ðŸ”‘ Incoming Private Key...\");rawPK=incomingPK;window.history.pushState({},\"\",\"/\");var currentPrivateKey=window.localStorage.getItem(\"metaPrivateKey\");if(currentPrivateKey&&currentPrivateKey!==rawPK){window.localStorage.setItem(\"metaPrivateKey_backup\"+Date.now(),currentPrivateKey);}window.localStorage.setItem(\"metaPrivateKey\",rawPK);}}console.log(\"ðŸ”¥ Using burner signer\",burnerSigner);setSigner(burnerSigner);}},[injectedProvider,localProvider,burnerSigner]);return signer;};export default useUserSigner;","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/UserSigner.js"],"names":["useMemo","useState","useBurnerSigner","useUserSigner","injectedProvider","localProvider","signer","setSigner","burnerSigner","console","log","injectedSigner","_isProvider","getSigner","window","location","pathname","indexOf","incomingPK","hash","replace","rawPK","length","history","pushState","currentPrivateKey","localStorage","getItem","setItem","Date","now"],"mappings":"sLAAA,OAASA,OAAT,CAAkBC,QAAlB,KAAkC,OAAlC,CACA,MAAOC,CAAAA,eAAP,KAA4B,gBAA5B,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,GAAMC,CAAAA,aAAa,CAAG,QAAhBA,CAAAA,aAAgB,CAACC,gBAAD,CAAmBC,aAAnB,CAAqC,CACzD,cAA4BJ,QAAQ,EAApC,wCAAOK,MAAP,eAAeC,SAAf,eACA,GAAMC,CAAAA,YAAY,CAAGN,eAAe,CAACG,aAAD,CAApC,CAEAL,OAAO,CAAC,UAAM,CACZ,GAAII,gBAAJ,CAAsB,CACpBK,OAAO,CAACC,GAAR,CAAY,4BAAZ,EACA,GAAMC,CAAAA,cAAc,CAAGP,gBAAgB,CAACQ,WAAjB,CAA+BR,gBAAgB,CAACS,SAAjB,EAA/B,CAA8DT,gBAArF,CACAG,SAAS,CAACI,cAAD,CAAT,CACD,CAJD,IAIO,IAAI,CAACN,aAAL,CAAoBE,SAAS,GAA7B,IACF,CACH,GAAIO,MAAM,CAACC,QAAP,CAAgBC,QAAhB,EAA4BF,MAAM,CAACC,QAAP,CAAgBC,QAAhB,CAAyBC,OAAzB,CAAiC,KAAjC,GAA2C,CAA3E,CAA8E,CAC5E,GAAMC,CAAAA,UAAU,CAAGJ,MAAM,CAACC,QAAP,CAAgBI,IAAhB,CAAqBC,OAArB,CAA6B,GAA7B,CAAkC,EAAlC,CAAnB,CACA,GAAIC,CAAAA,KAAJ,CACA,GAAIH,UAAU,CAACI,MAAX,GAAsB,EAAtB,EAA4BJ,UAAU,CAACI,MAAX,GAAsB,EAAtD,CAA0D,CACxDb,OAAO,CAACC,GAAR,CAAY,4BAAZ,EACAW,KAAK,CAAGH,UAAR,CACAJ,MAAM,CAACS,OAAP,CAAeC,SAAf,CAAyB,EAAzB,CAA6B,EAA7B,CAAiC,GAAjC,EACA,GAAMC,CAAAA,iBAAiB,CAAGX,MAAM,CAACY,YAAP,CAAoBC,OAApB,CAA4B,gBAA5B,CAA1B,CACA,GAAIF,iBAAiB,EAAIA,iBAAiB,GAAKJ,KAA/C,CAAsD,CACpDP,MAAM,CAACY,YAAP,CAAoBE,OAApB,CAA4B,wBAA0BC,IAAI,CAACC,GAAL,EAAtD,CAAkEL,iBAAlE,EACD,CACDX,MAAM,CAACY,YAAP,CAAoBE,OAApB,CAA4B,gBAA5B,CAA8CP,KAA9C,EACD,CACF,CAEDZ,OAAO,CAACC,GAAR,CAAY,wBAAZ,CAAsCF,YAAtC,EACAD,SAAS,CAACC,YAAD,CAAT,CACD,CACF,CAzBM,CAyBJ,CAACJ,gBAAD,CAAmBC,aAAnB,CAAkCG,YAAlC,CAzBI,CAAP,CA2BA,MAAOF,CAAAA,MAAP,CACD,CAhCD,CAkCA,cAAeH,CAAAA,aAAf","sourcesContent":["import { useMemo, useState } from \"react\";\r\nimport useBurnerSigner from \"./BurnerSigner\";\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Gets user provider\r\n\r\n  ~ How can I use? ~\r\n\r\n  const userProvider = useUserProvider(injectedProvider, localProvider);\r\n\r\n  ~ Features ~\r\n\r\n  - Specify the injected provider from Metamask\r\n  - Specify the local provider\r\n  - Usage examples:\r\n    const tx = Transactor(userSigner, gasPrice)\r\n*/\r\n\r\nconst useUserSigner = (injectedProvider, localProvider) => {\r\n  const [signer, setSigner] = useState();\r\n  const burnerSigner = useBurnerSigner(localProvider);\r\n\r\n  useMemo(() => {\r\n    if (injectedProvider) {\r\n      console.log(\"ðŸ¦Š Using injected provider\");\r\n      const injectedSigner = injectedProvider._isProvider ? injectedProvider.getSigner() : injectedProvider;\r\n      setSigner(injectedSigner);\r\n    } else if (!localProvider) setSigner();\r\n    else {\r\n      if (window.location.pathname && window.location.pathname.indexOf(\"/pk\") >= 0) {\r\n        const incomingPK = window.location.hash.replace(\"#\", \"\");\r\n        let rawPK;\r\n        if (incomingPK.length === 64 || incomingPK.length === 66) {\r\n          console.log(\"ðŸ”‘ Incoming Private Key...\");\r\n          rawPK = incomingPK;\r\n          window.history.pushState({}, \"\", \"/\");\r\n          const currentPrivateKey = window.localStorage.getItem(\"metaPrivateKey\");\r\n          if (currentPrivateKey && currentPrivateKey !== rawPK) {\r\n            window.localStorage.setItem(\"metaPrivateKey_backup\" + Date.now(), currentPrivateKey);\r\n          }\r\n          window.localStorage.setItem(\"metaPrivateKey\", rawPK);\r\n        }\r\n      }\r\n\r\n      console.log(\"ðŸ”¥ Using burner signer\", burnerSigner);\r\n      setSigner(burnerSigner);\r\n    }\r\n  }, [injectedProvider, localProvider, burnerSigner]);\r\n\r\n  return signer;\r\n};\r\n\r\nexport default useUserSigner;\r\n"]},"metadata":{},"sourceType":"module"}