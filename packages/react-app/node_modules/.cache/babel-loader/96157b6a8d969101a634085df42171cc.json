{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KINSHUK\\\\Desktop\\\\ETH\\\\qd-off-chain-voters-and-candidates\\\\packages\\\\react-app\\\\src\\\\components\\\\EtherInput.jsx\",\n    _s = $RefreshSig$();\n\nimport { Input } from \"antd\";\nimport React, { useEffect, useState } from \"react\"; // small change in useEffect, display currentValue if it's provided by user\n\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\n\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport default function EtherInput(props) {\n  _s();\n\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\n  const [display, setDisplay] = useState();\n  const [value, setValue] = useState();\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\n\n  const option = title => {\n    if (!props.price) return \"\";\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        cursor: \"pointer\"\n      },\n      onClick: () => {\n        if (mode === \"USD\") {\n          setMode(\"ETH\");\n          setDisplay(currentValue);\n        } else {\n          setMode(\"USD\");\n\n          if (currentValue) {\n            const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\n            setDisplay(usdValue);\n          } else {\n            setDisplay(currentValue);\n          }\n        }\n      },\n      children: title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 7\n    }, this);\n  };\n\n  let prefix;\n  let addonAfter;\n\n  if (mode === \"USD\") {\n    prefix = \"$\";\n    addonAfter = option(\"USD ðŸ”€\");\n  } else {\n    prefix = \"Îž\";\n    addonAfter = option(\"ETH ðŸ”€\");\n  }\n\n  useEffect(() => {\n    if (!currentValue) {\n      setDisplay(\"\");\n    }\n  }, [currentValue]);\n  return /*#__PURE__*/_jsxDEV(Input, {\n    placeholder: props.placeholder ? props.placeholder : \"amount in \" + mode,\n    autoFocus: props.autoFocus,\n    prefix: prefix,\n    value: display,\n    addonAfter: addonAfter,\n    onChange: async e => {\n      const newValue = e.target.value;\n\n      if (mode === \"USD\") {\n        const possibleNewValue = parseFloat(newValue);\n\n        if (possibleNewValue) {\n          const ethValue = possibleNewValue / props.price;\n          setValue(ethValue);\n\n          if (typeof props.onChange === \"function\") {\n            props.onChange(ethValue);\n          }\n\n          setDisplay(newValue);\n        } else {\n          setDisplay(newValue);\n        }\n      } else {\n        setValue(newValue);\n\n        if (typeof props.onChange === \"function\") {\n          props.onChange(newValue);\n        }\n\n        setDisplay(newValue);\n      }\n    }\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 80,\n    columnNumber: 5\n  }, this);\n}\n\n_s(EtherInput, \"Dj2TPI0Whn++ciBZophnuMQMQDE=\");\n\n_c = EtherInput;\n\nvar _c;\n\n$RefreshReg$(_c, \"EtherInput\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/components/EtherInput.jsx"],"names":["Input","React","useEffect","useState","EtherInput","props","mode","setMode","price","display","setDisplay","value","setValue","currentValue","option","title","cursor","usdValue","parseFloat","toFixed","prefix","addonAfter","placeholder","autoFocus","e","newValue","target","possibleNewValue","ethValue","onChange"],"mappings":"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","sourcesContent":["import { Input } from \"antd\";\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// small change in useEffect, display currentValue if it's provided by user\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays input field for ETH/USD amount, with an option to convert between ETH and USD\r\n\r\n  ~ How can I use? ~\r\n\r\n  <EtherInput\r\n    autofocus\r\n    price={price}\r\n    value=100\r\n    placeholder=\"Enter amount\"\r\n    onChange={value => {\r\n      setAmount(value);\r\n    }}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and easily convert between USD and ETH\r\n  - Provide value={value} to specify initial amount of ether\r\n  - Provide placeholder=\"Enter amount\" value for the input\r\n  - Control input change by onChange={value => { setAmount(value);}}\r\n*/\r\n\r\nexport default function EtherInput(props) {\r\n  const [mode, setMode] = useState(props.price ? \"USD\" : \"ETH\");\r\n  const [display, setDisplay] = useState();\r\n  const [value, setValue] = useState();\r\n\r\n  const currentValue = typeof props.value !== \"undefined\" ? props.value : value;\r\n\r\n  const option = title => {\r\n    if (!props.price) return \"\";\r\n    return (\r\n      <div\r\n        style={{ cursor: \"pointer\" }}\r\n        onClick={() => {\r\n          if (mode === \"USD\") {\r\n            setMode(\"ETH\");\r\n            setDisplay(currentValue);\r\n          } else {\r\n            setMode(\"USD\");\r\n            if (currentValue) {\r\n              const usdValue = \"\" + (parseFloat(currentValue) * props.price).toFixed(2);\r\n              setDisplay(usdValue);\r\n            } else {\r\n              setDisplay(currentValue);\r\n            }\r\n          }\r\n        }}\r\n      >\r\n        {title}\r\n      </div>\r\n    );\r\n  };\r\n\r\n  let prefix;\r\n  let addonAfter;\r\n  if (mode === \"USD\") {\r\n    prefix = \"$\";\r\n    addonAfter = option(\"USD ðŸ”€\");\r\n  } else {\r\n    prefix = \"Îž\";\r\n    addonAfter = option(\"ETH ðŸ”€\");\r\n  }\r\n\r\n  useEffect(() => {\r\n    if (!currentValue) {\r\n      setDisplay(\"\");\r\n    }\r\n  }, [currentValue]);\r\n\r\n  return (\r\n    <Input\r\n      placeholder={props.placeholder ? props.placeholder : \"amount in \" + mode}\r\n      autoFocus={props.autoFocus}\r\n      prefix={prefix}\r\n      value={display}\r\n      addonAfter={addonAfter}\r\n      onChange={async e => {\r\n        const newValue = e.target.value;\r\n        if (mode === \"USD\") {\r\n          const possibleNewValue = parseFloat(newValue);\r\n          if (possibleNewValue) {\r\n            const ethValue = possibleNewValue / props.price;\r\n            setValue(ethValue);\r\n            if (typeof props.onChange === \"function\") {\r\n              props.onChange(ethValue);\r\n            }\r\n            setDisplay(newValue);\r\n          } else {\r\n            setDisplay(newValue);\r\n          }\r\n        } else {\r\n          setValue(newValue);\r\n          if (typeof props.onChange === \"function\") {\r\n            props.onChange(newValue);\r\n          }\r\n          setDisplay(newValue);\r\n        }\r\n      }}\r\n    />\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}