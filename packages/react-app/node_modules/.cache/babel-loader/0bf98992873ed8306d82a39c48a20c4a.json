{"ast":null,"code":"import _slicedToArray from\"C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";import React,{useState}from\"react\";import{useBalance}from\"../hooks\";import{jsx as _jsx}from\"react/jsx-runtime\";var _require=require(\"ethers\"),utils=_require.utils;/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/export default function Balance(props){var _useState=useState(true),_useState2=_slicedToArray(_useState,2),dollarMode=_useState2[0],setDollarMode=_useState2[1];// const [listening, setListening] = useState(false);\nvar balance=useBalance(props.provider,props.address);var floatBalance=parseFloat(\"0.00\");var usingBalance=balance;if(typeof props.balance!==\"undefined\"){usingBalance=props.balance;}if(typeof props.value!==\"undefined\"){usingBalance=props.value;}if(usingBalance){var etherBalance=utils.formatEther(usingBalance);parseFloat(etherBalance).toFixed(2);floatBalance=parseFloat(etherBalance);}var displayBalance=floatBalance.toFixed(4);var price=props.price||props.dollarMultiplier;if(price&&dollarMode){displayBalance=\"$\"+(floatBalance*price).toFixed(2);}return/*#__PURE__*/_jsx(\"span\",{style:{verticalAlign:\"middle\",fontSize:props.size?props.size:24,padding:8,cursor:\"pointer\"},onClick:function onClick(){setDollarMode(!dollarMode);},children:displayBalance});}","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/components/Balance.jsx"],"names":["React","useState","useBalance","require","utils","Balance","props","dollarMode","setDollarMode","balance","provider","address","floatBalance","parseFloat","usingBalance","value","etherBalance","formatEther","toFixed","displayBalance","price","dollarMultiplier","verticalAlign","fontSize","size","padding","cursor"],"mappings":"sLAAA,MAAOA,CAAAA,KAAP,EAAgBC,QAAhB,KAAgC,OAAhC,CACA,OAASC,UAAT,KAA2B,UAA3B,C,2CAEA,aAAkBC,OAAO,CAAC,QAAD,CAAzB,CAAQC,KAAR,UAAQA,KAAR,CAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,EAEA,cAAe,SAASC,CAAAA,OAAT,CAAiBC,KAAjB,CAAwB,CACrC,cAAoCL,QAAQ,CAAC,IAAD,CAA5C,wCAAOM,UAAP,eAAmBC,aAAnB,eAEA;AAEA,GAAMC,CAAAA,OAAO,CAAGP,UAAU,CAACI,KAAK,CAACI,QAAP,CAAiBJ,KAAK,CAACK,OAAvB,CAA1B,CAEA,GAAIC,CAAAA,YAAY,CAAGC,UAAU,CAAC,MAAD,CAA7B,CAEA,GAAIC,CAAAA,YAAY,CAAGL,OAAnB,CAEA,GAAI,MAAOH,CAAAA,KAAK,CAACG,OAAb,GAAyB,WAA7B,CAA0C,CACxCK,YAAY,CAAGR,KAAK,CAACG,OAArB,CACD,CACD,GAAI,MAAOH,CAAAA,KAAK,CAACS,KAAb,GAAuB,WAA3B,CAAwC,CACtCD,YAAY,CAAGR,KAAK,CAACS,KAArB,CACD,CAED,GAAID,YAAJ,CAAkB,CAChB,GAAME,CAAAA,YAAY,CAAGZ,KAAK,CAACa,WAAN,CAAkBH,YAAlB,CAArB,CACAD,UAAU,CAACG,YAAD,CAAV,CAAyBE,OAAzB,CAAiC,CAAjC,EACAN,YAAY,CAAGC,UAAU,CAACG,YAAD,CAAzB,CACD,CAED,GAAIG,CAAAA,cAAc,CAAGP,YAAY,CAACM,OAAb,CAAqB,CAArB,CAArB,CAEA,GAAME,CAAAA,KAAK,CAAGd,KAAK,CAACc,KAAN,EAAed,KAAK,CAACe,gBAAnC,CAEA,GAAID,KAAK,EAAIb,UAAb,CAAyB,CACvBY,cAAc,CAAG,IAAM,CAACP,YAAY,CAAGQ,KAAhB,EAAuBF,OAAvB,CAA+B,CAA/B,CAAvB,CACD,CAED,mBACE,aACE,KAAK,CAAE,CACLI,aAAa,CAAE,QADV,CAELC,QAAQ,CAAEjB,KAAK,CAACkB,IAAN,CAAalB,KAAK,CAACkB,IAAnB,CAA0B,EAF/B,CAGLC,OAAO,CAAE,CAHJ,CAILC,MAAM,CAAE,SAJH,CADT,CAOE,OAAO,CAAE,kBAAM,CACblB,aAAa,CAAC,CAACD,UAAF,CAAb,CACD,CATH,UAWGY,cAXH,EADF,CAeD","sourcesContent":["import React, { useState } from \"react\";\r\nimport { useBalance } from \"../hooks\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a balance of given address in ether & dollar\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Balance\r\n    address={address}\r\n    provider={mainnetProvider}\r\n    price={price}\r\n  />\r\n\r\n  ~ If you already have the balance as a bignumber ~\r\n  <Balance\r\n    balance={balance}\r\n    price={price}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide address={address} and get balance corresponding to given address\r\n  - Provide provider={mainnetProvider} to access balance on mainnet or any other network (ex. localProvider)\r\n  - Provide price={price} of ether and get your balance converted to dollars\r\n*/\r\n\r\nexport default function Balance(props) {\r\n  const [dollarMode, setDollarMode] = useState(true);\r\n\r\n  // const [listening, setListening] = useState(false);\r\n\r\n  const balance = useBalance(props.provider, props.address);\r\n\r\n  let floatBalance = parseFloat(\"0.00\");\r\n\r\n  let usingBalance = balance;\r\n\r\n  if (typeof props.balance !== \"undefined\") {\r\n    usingBalance = props.balance;\r\n  }\r\n  if (typeof props.value !== \"undefined\") {\r\n    usingBalance = props.value;\r\n  }\r\n\r\n  if (usingBalance) {\r\n    const etherBalance = utils.formatEther(usingBalance);\r\n    parseFloat(etherBalance).toFixed(2);\r\n    floatBalance = parseFloat(etherBalance);\r\n  }\r\n\r\n  let displayBalance = floatBalance.toFixed(4);\r\n\r\n  const price = props.price || props.dollarMultiplier;\r\n\r\n  if (price && dollarMode) {\r\n    displayBalance = \"$\" + (floatBalance * price).toFixed(2);\r\n  }\r\n\r\n  return (\r\n    <span\r\n      style={{\r\n        verticalAlign: \"middle\",\r\n        fontSize: props.size ? props.size : 24,\r\n        padding: 8,\r\n        cursor: \"pointer\",\r\n      }}\r\n      onClick={() => {\r\n        setDollarMode(!dollarMode);\r\n      }}\r\n    >\r\n      {displayBalance}\r\n    </span>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}