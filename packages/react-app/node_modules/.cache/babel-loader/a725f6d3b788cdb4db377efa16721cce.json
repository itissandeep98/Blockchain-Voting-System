{"ast":null,"code":"var _s = $RefreshSig$();\n\nimport { useState, useEffect } from \"react\";\n\nconst {\n  ethers\n} = require(\"ethers\");\n\nexport default function useBurnerSigner(provider) {\n  _s();\n\n  const key = \"metaPrivateKey\";\n  let wallet;\n  const [signer, setSigner] = useState();\n  const [storedValue, setStoredValue] = useState();\n\n  const setValue = value => {\n    try {\n      setStoredValue(value);\n      window.localStorage.setItem(key, value);\n    } catch (error) {\n      console.log(error);\n    }\n  };\n\n  useEffect(() => {\n    const storedKey = window.localStorage.getItem(key);\n\n    if (!storedKey) {\n      console.log(\"generating a new key\");\n\n      const _newWallet = ethers.Wallet.createRandom();\n\n      const _newKey = _newWallet.privateKey;\n      setValue(_newKey);\n    } else {\n      setValue(storedKey);\n    }\n  }, []);\n  useEffect(() => {\n    if (storedValue && provider) {\n      wallet = new ethers.Wallet(storedValue);\n\n      const _signer = wallet.connect(provider);\n\n      setSigner(_signer);\n    }\n  }, [storedValue, provider]);\n  return signer;\n}\n\n_s(useBurnerSigner, \"i60MX44HTuB7K1ysc/UMkJYO284=\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/hooks/BurnerSigner.js"],"names":["useState","useEffect","ethers","require","useBurnerSigner","provider","key","wallet","signer","setSigner","storedValue","setStoredValue","setValue","value","window","localStorage","setItem","error","console","log","storedKey","getItem","_newWallet","Wallet","createRandom","_newKey","privateKey","_signer","connect"],"mappings":";;AAAA,SAASA,QAAT,EAAmBC,SAAnB,QAAoC,OAApC;;AAEA,MAAM;AAAEC,EAAAA;AAAF,IAAaC,OAAO,CAAC,QAAD,CAA1B;;AAEA,eAAe,SAASC,eAAT,CAAyBC,QAAzB,EAAmC;AAAA;;AAChD,QAAMC,GAAG,GAAG,gBAAZ;AACA,MAAIC,MAAJ;AACA,QAAM,CAACC,MAAD,EAASC,SAAT,IAAsBT,QAAQ,EAApC;AACA,QAAM,CAACU,WAAD,EAAcC,cAAd,IAAgCX,QAAQ,EAA9C;;AAEA,QAAMY,QAAQ,GAAGC,KAAK,IAAI;AACxB,QAAI;AACFF,MAAAA,cAAc,CAACE,KAAD,CAAd;AACAC,MAAAA,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4BV,GAA5B,EAAiCO,KAAjC;AACD,KAHD,CAGE,OAAOI,KAAP,EAAc;AACdC,MAAAA,OAAO,CAACC,GAAR,CAAYF,KAAZ;AACD;AACF,GAPD;;AASAhB,EAAAA,SAAS,CAAC,MAAM;AACd,UAAMmB,SAAS,GAAGN,MAAM,CAACC,YAAP,CAAoBM,OAApB,CAA4Bf,GAA5B,CAAlB;;AACA,QAAI,CAACc,SAAL,EAAgB;AACdF,MAAAA,OAAO,CAACC,GAAR,CAAY,sBAAZ;;AACA,YAAMG,UAAU,GAAGpB,MAAM,CAACqB,MAAP,CAAcC,YAAd,EAAnB;;AACA,YAAMC,OAAO,GAAGH,UAAU,CAACI,UAA3B;AACAd,MAAAA,QAAQ,CAACa,OAAD,CAAR;AACD,KALD,MAKO;AACLb,MAAAA,QAAQ,CAACQ,SAAD,CAAR;AACD;AACF,GAVQ,EAUN,EAVM,CAAT;AAYAnB,EAAAA,SAAS,CAAC,MAAM;AACd,QAAIS,WAAW,IAAIL,QAAnB,EAA6B;AAC3BE,MAAAA,MAAM,GAAG,IAAIL,MAAM,CAACqB,MAAX,CAAkBb,WAAlB,CAAT;;AACA,YAAMiB,OAAO,GAAGpB,MAAM,CAACqB,OAAP,CAAevB,QAAf,CAAhB;;AACAI,MAAAA,SAAS,CAACkB,OAAD,CAAT;AACD;AACF,GANQ,EAMN,CAACjB,WAAD,EAAcL,QAAd,CANM,CAAT;AAQA,SAAOG,MAAP;AACD;;GApCuBJ,e","sourcesContent":["import { useState, useEffect } from \"react\";\r\n\r\nconst { ethers } = require(\"ethers\");\r\n\r\nexport default function useBurnerSigner(provider) {\r\n  const key = \"metaPrivateKey\";\r\n  let wallet;\r\n  const [signer, setSigner] = useState();\r\n  const [storedValue, setStoredValue] = useState();\r\n\r\n  const setValue = value => {\r\n    try {\r\n      setStoredValue(value);\r\n      window.localStorage.setItem(key, value);\r\n    } catch (error) {\r\n      console.log(error);\r\n    }\r\n  };\r\n\r\n  useEffect(() => {\r\n    const storedKey = window.localStorage.getItem(key);\r\n    if (!storedKey) {\r\n      console.log(\"generating a new key\");\r\n      const _newWallet = ethers.Wallet.createRandom();\r\n      const _newKey = _newWallet.privateKey;\r\n      setValue(_newKey);\r\n    } else {\r\n      setValue(storedKey);\r\n    }\r\n  }, []);\r\n\r\n  useEffect(() => {\r\n    if (storedValue && provider) {\r\n      wallet = new ethers.Wallet(storedValue);\r\n      const _signer = wallet.connect(provider);\r\n      setSigner(_signer);\r\n    }\r\n  }, [storedValue, provider]);\r\n\r\n  return signer;\r\n}\r\n"]},"metadata":{},"sourceType":"module"}