{"ast":null,"code":"\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.EthereumChain = void 0;\nvar EthereumChain;\n\n(function (EthereumChain) {\n  // mainnets\n  EthereumChain[EthereumChain[\"ETHEREUM_MAINNET\"] = 1] = \"ETHEREUM_MAINNET\";\n  EthereumChain[EthereumChain[\"OPTIMISM_MAINNET\"] = 10] = \"OPTIMISM_MAINNET\";\n  EthereumChain[EthereumChain[\"POLYGON_MAINNET\"] = 137] = \"POLYGON_MAINNET\";\n  EthereumChain[EthereumChain[\"ETHEREUM_CLASSIC_MAINNET\"] = 61] = \"ETHEREUM_CLASSIC_MAINNET\";\n  EthereumChain[EthereumChain[\"BSC_MAINNET\"] = 56] = \"BSC_MAINNET\";\n  EthereumChain[EthereumChain[\"FANTOM_MAINNET\"] = 250] = \"FANTOM_MAINNET\";\n  EthereumChain[EthereumChain[\"ARBITRUM_MAINNET\"] = 42161] = \"ARBITRUM_MAINNET\";\n  EthereumChain[EthereumChain[\"XDAI_MAINNET\"] = 100] = \"XDAI_MAINNET\";\n  EthereumChain[EthereumChain[\"AVALANCHE_MAINNET\"] = 43114] = \"AVALANCHE_MAINNET\"; // testnets\n\n  EthereumChain[EthereumChain[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n  EthereumChain[EthereumChain[\"RINKEBY\"] = 4] = \"RINKEBY\";\n  EthereumChain[EthereumChain[\"GOERLI\"] = 5] = \"GOERLI\";\n  EthereumChain[EthereumChain[\"KOVAN\"] = 42] = \"KOVAN\";\n  EthereumChain[EthereumChain[\"OPTIMISM_KOVAN\"] = 69] = \"OPTIMISM_KOVAN\";\n  EthereumChain[EthereumChain[\"POLYGON_TESTNET\"] = 80001] = \"POLYGON_TESTNET\";\n  EthereumChain[EthereumChain[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n  EthereumChain[EthereumChain[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n  EthereumChain[EthereumChain[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n  EthereumChain[EthereumChain[\"AVALANCHE_FUJI\"] = 43113] = \"AVALANCHE_FUJI\";\n})(EthereumChain = exports.EthereumChain || (exports.EthereumChain = {}));\n\n(function (EthereumChain) {\n  function rpcUrl(thiz) {\n    switch (thiz) {\n      case EthereumChain.ETHEREUM_MAINNET:\n        return \"https://mainnet-infura.wallet.coinbase.com\";\n\n      case EthereumChain.ROPSTEN:\n        return \"https://ropsten-infura.wallet.coinbase.com\";\n\n      case EthereumChain.RINKEBY:\n        return \"https://rinkeby-infura.wallet.coinbase.com\";\n\n      case EthereumChain.KOVAN:\n        return \"https://kovan-infura.wallet.coinbase.com\";\n\n      case EthereumChain.GOERLI:\n        return \"https://goerli-node.wallet.coinbase.com\";\n\n      case EthereumChain.OPTIMISM_KOVAN:\n        return \"https://optimism-node.wallet.coinbase.com\";\n\n      case EthereumChain.OPTIMISM_MAINNET:\n        return \"https://optimism-mainnet.wallet.coinbase.com\";\n\n      case EthereumChain.POLYGON_MAINNET:\n        return \"https://polygon-mainnet-infura.wallet.coinbase.com\";\n\n      case EthereumChain.POLYGON_TESTNET:\n        return \"https://polygon-mumbai-infura.wallet.coinbase.com\";\n\n      case EthereumChain.BSC_MAINNET:\n        return \"https://bsc-dataseed.binance.org\";\n\n      case EthereumChain.BSC_TESTNET:\n        return \"https://data-seed-prebsc-1-s1.binance.org:8545\";\n\n      case EthereumChain.FANTOM_MAINNET:\n        return \"https://rpcapi.fantom.network\";\n\n      case EthereumChain.FANTOM_TESTNET:\n        return \"https://rpc.testnet.fantom.network\";\n\n      case EthereumChain.ARBITRUM_MAINNET:\n        return \"https://l2-mainnet.wallet.coinbase.com?targetName=arbitrum\";\n\n      case EthereumChain.ARBITRUM_TESTNET:\n        return \"https://rinkeby.arbitrum.io/rpc\";\n\n      case EthereumChain.XDAI_MAINNET:\n        return \"https://rpc.xdaichain.com\";\n\n      case EthereumChain.AVALANCHE_MAINNET:\n        return \"https://api.avax.network/ext/bc/C/rpc\";\n\n      case EthereumChain.AVALANCHE_FUJI:\n        return \"https://api.avax-test.network/ext/bc/C/rpc\";\n\n      default:\n        return undefined;\n    }\n  }\n\n  EthereumChain.rpcUrl = rpcUrl;\n\n  function fromChainId(chainId) {\n    switch (Number(chainId)) {\n      // mainnets\n      case EthereumChain.ETHEREUM_MAINNET.valueOf():\n        return EthereumChain.ETHEREUM_MAINNET;\n\n      case EthereumChain.OPTIMISM_MAINNET.valueOf():\n        return EthereumChain.OPTIMISM_MAINNET;\n\n      case EthereumChain.POLYGON_MAINNET.valueOf():\n        return EthereumChain.POLYGON_MAINNET;\n\n      case EthereumChain.ETHEREUM_CLASSIC_MAINNET.valueOf():\n        return EthereumChain.ETHEREUM_CLASSIC_MAINNET;\n\n      case EthereumChain.BSC_MAINNET.valueOf():\n        return EthereumChain.BSC_MAINNET;\n\n      case EthereumChain.FANTOM_MAINNET.valueOf():\n        return EthereumChain.FANTOM_MAINNET;\n\n      case EthereumChain.ARBITRUM_MAINNET.valueOf():\n        return EthereumChain.ARBITRUM_MAINNET;\n\n      case EthereumChain.AVALANCHE_MAINNET.valueOf():\n        return EthereumChain.AVALANCHE_MAINNET;\n\n      case EthereumChain.XDAI_MAINNET.valueOf():\n        return EthereumChain.XDAI_MAINNET;\n      // testnets\n\n      case EthereumChain.ROPSTEN.valueOf():\n        return EthereumChain.ROPSTEN;\n\n      case EthereumChain.RINKEBY.valueOf():\n        return EthereumChain.RINKEBY;\n\n      case EthereumChain.GOERLI.valueOf():\n        return EthereumChain.GOERLI;\n\n      case EthereumChain.KOVAN.valueOf():\n        return EthereumChain.KOVAN;\n\n      case EthereumChain.OPTIMISM_KOVAN.valueOf():\n        return EthereumChain.OPTIMISM_KOVAN;\n\n      case EthereumChain.POLYGON_TESTNET.valueOf():\n        return EthereumChain.POLYGON_TESTNET;\n\n      case EthereumChain.BSC_TESTNET.valueOf():\n        return EthereumChain.BSC_TESTNET;\n\n      case EthereumChain.FANTOM_TESTNET.valueOf():\n        return EthereumChain.FANTOM_TESTNET;\n\n      case EthereumChain.ARBITRUM_TESTNET.valueOf():\n        return EthereumChain.ARBITRUM_TESTNET;\n\n      case EthereumChain.AVALANCHE_FUJI.valueOf():\n        return EthereumChain.AVALANCHE_FUJI;\n\n      default:\n        return undefined;\n    }\n  }\n\n  EthereumChain.fromChainId = fromChainId;\n})(EthereumChain = exports.EthereumChain || (exports.EthereumChain = {}));","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/node_modules/walletlink/dist/EthereumChain.js"],"names":["Object","defineProperty","exports","value","EthereumChain","rpcUrl","thiz","ETHEREUM_MAINNET","ROPSTEN","RINKEBY","KOVAN","GOERLI","OPTIMISM_KOVAN","OPTIMISM_MAINNET","POLYGON_MAINNET","POLYGON_TESTNET","BSC_MAINNET","BSC_TESTNET","FANTOM_MAINNET","FANTOM_TESTNET","ARBITRUM_MAINNET","ARBITRUM_TESTNET","XDAI_MAINNET","AVALANCHE_MAINNET","AVALANCHE_FUJI","undefined","fromChainId","chainId","Number","valueOf","ETHEREUM_CLASSIC_MAINNET"],"mappings":"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","sourcesContent":["\"use strict\";\nObject.defineProperty(exports, \"__esModule\", { value: true });\nexports.EthereumChain = void 0;\nvar EthereumChain;\n(function (EthereumChain) {\n    // mainnets\n    EthereumChain[EthereumChain[\"ETHEREUM_MAINNET\"] = 1] = \"ETHEREUM_MAINNET\";\n    EthereumChain[EthereumChain[\"OPTIMISM_MAINNET\"] = 10] = \"OPTIMISM_MAINNET\";\n    EthereumChain[EthereumChain[\"POLYGON_MAINNET\"] = 137] = \"POLYGON_MAINNET\";\n    EthereumChain[EthereumChain[\"ETHEREUM_CLASSIC_MAINNET\"] = 61] = \"ETHEREUM_CLASSIC_MAINNET\";\n    EthereumChain[EthereumChain[\"BSC_MAINNET\"] = 56] = \"BSC_MAINNET\";\n    EthereumChain[EthereumChain[\"FANTOM_MAINNET\"] = 250] = \"FANTOM_MAINNET\";\n    EthereumChain[EthereumChain[\"ARBITRUM_MAINNET\"] = 42161] = \"ARBITRUM_MAINNET\";\n    EthereumChain[EthereumChain[\"XDAI_MAINNET\"] = 100] = \"XDAI_MAINNET\";\n    EthereumChain[EthereumChain[\"AVALANCHE_MAINNET\"] = 43114] = \"AVALANCHE_MAINNET\";\n    // testnets\n    EthereumChain[EthereumChain[\"ROPSTEN\"] = 3] = \"ROPSTEN\";\n    EthereumChain[EthereumChain[\"RINKEBY\"] = 4] = \"RINKEBY\";\n    EthereumChain[EthereumChain[\"GOERLI\"] = 5] = \"GOERLI\";\n    EthereumChain[EthereumChain[\"KOVAN\"] = 42] = \"KOVAN\";\n    EthereumChain[EthereumChain[\"OPTIMISM_KOVAN\"] = 69] = \"OPTIMISM_KOVAN\";\n    EthereumChain[EthereumChain[\"POLYGON_TESTNET\"] = 80001] = \"POLYGON_TESTNET\";\n    EthereumChain[EthereumChain[\"BSC_TESTNET\"] = 97] = \"BSC_TESTNET\";\n    EthereumChain[EthereumChain[\"FANTOM_TESTNET\"] = 4002] = \"FANTOM_TESTNET\";\n    EthereumChain[EthereumChain[\"ARBITRUM_TESTNET\"] = 421611] = \"ARBITRUM_TESTNET\";\n    EthereumChain[EthereumChain[\"AVALANCHE_FUJI\"] = 43113] = \"AVALANCHE_FUJI\";\n})(EthereumChain = exports.EthereumChain || (exports.EthereumChain = {}));\n(function (EthereumChain) {\n    function rpcUrl(thiz) {\n        switch (thiz) {\n            case EthereumChain.ETHEREUM_MAINNET: return \"https://mainnet-infura.wallet.coinbase.com\";\n            case EthereumChain.ROPSTEN: return \"https://ropsten-infura.wallet.coinbase.com\";\n            case EthereumChain.RINKEBY: return \"https://rinkeby-infura.wallet.coinbase.com\";\n            case EthereumChain.KOVAN: return \"https://kovan-infura.wallet.coinbase.com\";\n            case EthereumChain.GOERLI: return \"https://goerli-node.wallet.coinbase.com\";\n            case EthereumChain.OPTIMISM_KOVAN: return \"https://optimism-node.wallet.coinbase.com\";\n            case EthereumChain.OPTIMISM_MAINNET: return \"https://optimism-mainnet.wallet.coinbase.com\";\n            case EthereumChain.POLYGON_MAINNET: return \"https://polygon-mainnet-infura.wallet.coinbase.com\";\n            case EthereumChain.POLYGON_TESTNET: return \"https://polygon-mumbai-infura.wallet.coinbase.com\";\n            case EthereumChain.BSC_MAINNET: return \"https://bsc-dataseed.binance.org\";\n            case EthereumChain.BSC_TESTNET: return \"https://data-seed-prebsc-1-s1.binance.org:8545\";\n            case EthereumChain.FANTOM_MAINNET: return \"https://rpcapi.fantom.network\";\n            case EthereumChain.FANTOM_TESTNET: return \"https://rpc.testnet.fantom.network\";\n            case EthereumChain.ARBITRUM_MAINNET: return \"https://l2-mainnet.wallet.coinbase.com?targetName=arbitrum\";\n            case EthereumChain.ARBITRUM_TESTNET: return \"https://rinkeby.arbitrum.io/rpc\";\n            case EthereumChain.XDAI_MAINNET: return \"https://rpc.xdaichain.com\";\n            case EthereumChain.AVALANCHE_MAINNET: return \"https://api.avax.network/ext/bc/C/rpc\";\n            case EthereumChain.AVALANCHE_FUJI: return \"https://api.avax-test.network/ext/bc/C/rpc\";\n            default: return undefined;\n        }\n    }\n    EthereumChain.rpcUrl = rpcUrl;\n    function fromChainId(chainId) {\n        switch (Number(chainId)) {\n            // mainnets\n            case EthereumChain.ETHEREUM_MAINNET.valueOf(): return EthereumChain.ETHEREUM_MAINNET;\n            case EthereumChain.OPTIMISM_MAINNET.valueOf(): return EthereumChain.OPTIMISM_MAINNET;\n            case EthereumChain.POLYGON_MAINNET.valueOf(): return EthereumChain.POLYGON_MAINNET;\n            case EthereumChain.ETHEREUM_CLASSIC_MAINNET.valueOf(): return EthereumChain.ETHEREUM_CLASSIC_MAINNET;\n            case EthereumChain.BSC_MAINNET.valueOf(): return EthereumChain.BSC_MAINNET;\n            case EthereumChain.FANTOM_MAINNET.valueOf(): return EthereumChain.FANTOM_MAINNET;\n            case EthereumChain.ARBITRUM_MAINNET.valueOf(): return EthereumChain.ARBITRUM_MAINNET;\n            case EthereumChain.AVALANCHE_MAINNET.valueOf(): return EthereumChain.AVALANCHE_MAINNET;\n            case EthereumChain.XDAI_MAINNET.valueOf(): return EthereumChain.XDAI_MAINNET;\n            // testnets\n            case EthereumChain.ROPSTEN.valueOf(): return EthereumChain.ROPSTEN;\n            case EthereumChain.RINKEBY.valueOf(): return EthereumChain.RINKEBY;\n            case EthereumChain.GOERLI.valueOf(): return EthereumChain.GOERLI;\n            case EthereumChain.KOVAN.valueOf(): return EthereumChain.KOVAN;\n            case EthereumChain.OPTIMISM_KOVAN.valueOf(): return EthereumChain.OPTIMISM_KOVAN;\n            case EthereumChain.POLYGON_TESTNET.valueOf(): return EthereumChain.POLYGON_TESTNET;\n            case EthereumChain.BSC_TESTNET.valueOf(): return EthereumChain.BSC_TESTNET;\n            case EthereumChain.FANTOM_TESTNET.valueOf(): return EthereumChain.FANTOM_TESTNET;\n            case EthereumChain.ARBITRUM_TESTNET.valueOf(): return EthereumChain.ARBITRUM_TESTNET;\n            case EthereumChain.AVALANCHE_FUJI.valueOf(): return EthereumChain.AVALANCHE_FUJI;\n            default: return undefined;\n        }\n    }\n    EthereumChain.fromChainId = fromChainId;\n})(EthereumChain = exports.EthereumChain || (exports.EthereumChain = {}));\n"]},"metadata":{},"sourceType":"script"}