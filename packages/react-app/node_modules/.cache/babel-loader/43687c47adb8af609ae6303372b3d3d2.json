{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\KINSHUK\\\\Desktop\\\\ETH\\\\qd-off-chain-voters-and-candidates\\\\packages\\\\react-app\\\\src\\\\components\\\\Faucet.jsx\",\n    _s = $RefreshSig$();\n\nimport { SendOutlined } from \"@ant-design/icons\";\nimport { Button, Input, Tooltip } from \"antd\";\nimport { useLookupAddress } from \"eth-hooks\";\nimport React, { useCallback, useState, useEffect } from \"react\";\nimport Blockies from \"react-blockies\";\nimport { Transactor } from \"../helpers\";\nimport Wallet from \"./Wallet\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst {\n  utils\n} = require(\"ethers\"); // improved a bit by converting address to ens if it exists\n// added option to directly input ens name\n// added placeholder option\n\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\n\n\nexport default function Faucet(props) {\n  _s();\n\n  const [address, setAddress] = useState();\n  const [faucetAddress, setFaucetAddress] = useState();\n  useEffect(() => {\n    const getFaucetAddress = async () => {\n      if (props.localProvider) {\n        const _faucetAddress = await props.localProvider.listAccounts();\n\n        setFaucetAddress(_faucetAddress[0]);\n        console.log(_faucetAddress);\n      }\n    };\n\n    getFaucetAddress();\n  }, [props.localProvider]);\n  let blockie;\n\n  if (address && typeof address.toLowerCase === \"function\") {\n    blockie = /*#__PURE__*/_jsxDEV(Blockies, {\n      seed: address.toLowerCase(),\n      size: 8,\n      scale: 4\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 56,\n      columnNumber: 15\n    }, this);\n  } else {\n    blockie = /*#__PURE__*/_jsxDEV(\"div\", {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 15\n    }, this);\n  }\n\n  const ens = useLookupAddress(props.ensProvider, address);\n  const updateAddress = useCallback(async newValue => {\n    if (typeof newValue !== \"undefined\") {\n      let address = newValue;\n\n      if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\n        try {\n          const possibleAddress = await props.ensProvider.resolveName(address);\n\n          if (possibleAddress) {\n            address = possibleAddress;\n          } // eslint-disable-next-line no-empty\n\n        } catch (e) {}\n      }\n\n      setAddress(address);\n    }\n  }, [props.ensProvider, props.onChange]);\n  const tx = Transactor(props.localProvider);\n  return /*#__PURE__*/_jsxDEV(\"span\", {\n    children: /*#__PURE__*/_jsxDEV(Input, {\n      size: \"large\",\n      placeholder: props.placeholder ? props.placeholder : \"local faucet\",\n      prefix: blockie // value={address}\n      ,\n      value: ens || address,\n      onChange: e => {\n        // setAddress(e.target.value);\n        updateAddress(e.target.value);\n      },\n      suffix: /*#__PURE__*/_jsxDEV(Tooltip, {\n        title: \"Faucet: Send local ether to an address.\",\n        children: [/*#__PURE__*/_jsxDEV(Button, {\n          onClick: () => {\n            tx({\n              to: address,\n              value: utils.parseEther(\"0.01\")\n            });\n            setAddress(\"\");\n          },\n          shape: \"circle\",\n          icon: /*#__PURE__*/_jsxDEV(SendOutlined, {}, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 107,\n            columnNumber: 21\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 98,\n          columnNumber: 13\n        }, this), /*#__PURE__*/_jsxDEV(Wallet, {\n          color: \"#888888\",\n          provider: props.localProvider,\n          ensProvider: props.ensProvider,\n          price: props.price,\n          address: faucetAddress\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 109,\n          columnNumber: 13\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 97,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n}\n\n_s(Faucet, \"v1dxTeoOmEsKhuzSZGhB7qM4Bf8=\", false, function () {\n  return [useLookupAddress];\n});\n\n_c = Faucet;\n\nvar _c;\n\n$RefreshReg$(_c, \"Faucet\");","map":{"version":3,"sources":["C:/Users/KINSHUK/Desktop/ETH/qd-off-chain-voters-and-candidates/packages/react-app/src/components/Faucet.jsx"],"names":["SendOutlined","Button","Input","Tooltip","useLookupAddress","React","useCallback","useState","useEffect","Blockies","Transactor","Wallet","utils","require","Faucet","props","address","setAddress","faucetAddress","setFaucetAddress","getFaucetAddress","localProvider","_faucetAddress","listAccounts","console","log","blockie","toLowerCase","ens","ensProvider","updateAddress","newValue","indexOf","possibleAddress","resolveName","e","onChange","tx","placeholder","target","value","to","parseEther","price"],"mappings":"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","sourcesContent":["import { SendOutlined } from \"@ant-design/icons\";\r\nimport { Button, Input, Tooltip } from \"antd\";\r\nimport { useLookupAddress } from \"eth-hooks\";\r\nimport React, { useCallback, useState, useEffect } from \"react\";\r\nimport Blockies from \"react-blockies\";\r\nimport { Transactor } from \"../helpers\";\r\nimport Wallet from \"./Wallet\";\r\n\r\nconst { utils } = require(\"ethers\");\r\n\r\n// improved a bit by converting address to ens if it exists\r\n// added option to directly input ens name\r\n// added placeholder option\r\n\r\n/*\r\n  ~ What it does? ~\r\n\r\n  Displays a local faucet to send ETH to given address, also wallet is provided\r\n\r\n  ~ How can I use? ~\r\n\r\n  <Faucet\r\n    price={price}\r\n    localProvider={localProvider}\r\n    ensProvider={mainnetProvider}\r\n    placeholder={\"Send local faucet\"}\r\n  />\r\n\r\n  ~ Features ~\r\n\r\n  - Provide price={price} of ether and convert between USD and ETH in a wallet\r\n  - Provide localProvider={localProvider} to be able to send ETH to given address\r\n  - Provide ensProvider={mainnetProvider} and your address will be replaced by ENS name\r\n              (ex. \"0xa870\" => \"user.eth\") or you can enter directly ENS name instead of address\r\n              works both in input field & wallet\r\n  - Provide placeholder=\"Send local faucet\" value for the input\r\n*/\r\n\r\nexport default function Faucet(props) {\r\n  const [address, setAddress] = useState();\r\n  const [faucetAddress, setFaucetAddress] = useState();\r\n\r\n  useEffect(() => {\r\n    const getFaucetAddress = async () => {\r\n      if (props.localProvider) {\r\n        const _faucetAddress = await props.localProvider.listAccounts();\r\n        setFaucetAddress(_faucetAddress[0]);\r\n        console.log(_faucetAddress);\r\n      }\r\n    };\r\n    getFaucetAddress();\r\n  }, [props.localProvider]);\r\n\r\n  let blockie;\r\n  if (address && typeof address.toLowerCase === \"function\") {\r\n    blockie = <Blockies seed={address.toLowerCase()} size={8} scale={4} />;\r\n  } else {\r\n    blockie = <div />;\r\n  }\r\n\r\n  const ens = useLookupAddress(props.ensProvider, address);\r\n\r\n  const updateAddress = useCallback(\r\n    async newValue => {\r\n      if (typeof newValue !== \"undefined\") {\r\n        let address = newValue;\r\n        if (address.indexOf(\".eth\") > 0 || address.indexOf(\".xyz\") > 0) {\r\n          try {\r\n            const possibleAddress = await props.ensProvider.resolveName(address);\r\n            if (possibleAddress) {\r\n              address = possibleAddress;\r\n            }\r\n            // eslint-disable-next-line no-empty\r\n          } catch (e) {}\r\n        }\r\n        setAddress(address);\r\n      }\r\n    },\r\n    [props.ensProvider, props.onChange],\r\n  );\r\n\r\n  const tx = Transactor(props.localProvider);\r\n\r\n  return (\r\n    <span>\r\n      <Input\r\n        size=\"large\"\r\n        placeholder={props.placeholder ? props.placeholder : \"local faucet\"}\r\n        prefix={blockie}\r\n        // value={address}\r\n        value={ens || address}\r\n        onChange={e => {\r\n          // setAddress(e.target.value);\r\n          updateAddress(e.target.value);\r\n        }}\r\n        suffix={\r\n          <Tooltip title=\"Faucet: Send local ether to an address.\">\r\n            <Button\r\n              onClick={() => {\r\n                tx({\r\n                  to: address,\r\n                  value: utils.parseEther(\"0.01\"),\r\n                });\r\n                setAddress(\"\");\r\n              }}\r\n              shape=\"circle\"\r\n              icon={<SendOutlined />}\r\n            />\r\n            <Wallet\r\n              color=\"#888888\"\r\n              provider={props.localProvider}\r\n              ensProvider={props.ensProvider}\r\n              price={props.price}\r\n              address={faucetAddress}\r\n            />\r\n          </Tooltip>\r\n        }\r\n      />\r\n    </span>\r\n  );\r\n}\r\n"]},"metadata":{},"sourceType":"module"}